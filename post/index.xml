<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on V8 Network</title>
    <link>https://v8.network/post/</link>
    <description>Recent content in Posts on V8 Network</description>
    <image>
      <url>https://v8.network/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://v8.network/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 11 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://v8.network/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Elastic Search] 기본 개념</title>
      <link>https://v8.network/post/esbasic/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/esbasic/</guid>
      <description>엘라스틱서치에 대해 알아보자</description>
    </item>
    
    <item>
      <title>[Go] Go언어로 redis pub sub 구현</title>
      <link>https://v8.network/post/go_redis_pubsub/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/go_redis_pubsub/</guid>
      <description>Go 언어로 Redis pubsub 구현 필수 패키지 Mac 기준입니다.
brew install redis brew 로 redis 설치하게 되면 Redis7 로 설치됩니다.
저희가 사용할 go-redis 는 현재 Redis6 가 stable 버전임을 참고바랍니다.
go get github.com/go-redis/redis/v8 v8 = Redis6 (stable)
v9 = Redis7 (beta)
하지만 테스트 해본결과 큰 문제가 없습니다.
라우터의 경우 뭘 사용해도 상관없습니다. (다만 body 바인딩 부분에서 조금의 차이가 있을 수 있습니다.)
저는 AWS API Gateway 와 AWS Lambda 도 같이 사용할수있는</description>
    </item>
    
    <item>
      <title>[데이터베이스] N &#43; 1 문제</title>
      <link>https://v8.network/post/dbn&#43;1/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/dbn&#43;1/</guid>
      <description>N + 1 문제란? ORM 의 연관 관계에서 발생하는 문제다. 예를 들어 여러 개의 상품 구매 목록을 가지고 있는 쇼핑몰 유저다.
User 와 Order 테이블이 1:N 관계로 설정되어있다 가정하고
특정 유저를 조회했을때 SELECT 문은 1번 실행되고, 해당 유저와 관련된 상품을 N 번 더 조회하게 된다.
N + 1 문제를 해결하기 전에 관련된 중요한 개념인 Eager Loading 과 Lazy Loading 에 대해 알아야한다.
Eager Loading 이란? Eager Loading 이란 즉시 로딩으로 로딩 시 참조해야 할 데이터들을 미리 전부 가져옵니다.</description>
    </item>
    
    <item>
      <title>[데이터베이스] 트랜잭션 격리 수준(Transaction isolation Level)</title>
      <link>https://v8.network/post/dbisolation/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/dbisolation/</guid>
      <description>격리 수준(Isolation Level) 격리 수준이란 트랜잭션들끼리 일관된 데이터들을 얼마나 허용할것인지를 정하는 수준이다.
쉽게 말해 동시에 데이터베이스에 접근할 때 그 접근을 어떻게 제어할지에 대한 설정이다.
격리 수준에는 총 4가지의 수준이 있다.
Read-Uncommitted (레벨 0) Read-Commited (레벨 1) Repeat-Read (레벨 2) Serializable (레벨 3) 밑으로 갈 수록 격리 수준은 높아지지만 성능은 떨어진다.
데이터 정확성과 성능이 반비례하므로 상황에 따라 잘 선택하는것이 중요하다.
Isolation Level 종류 Read-Uncommitted (레벨 0) SELECT 문장이 수행되는 동안 해당 데이터에 Shared Lock이 걸리지 않는 계층 트랜잭션이 처리중이거나 아직 commit 되지않은 데이터를 다른 트랜잭션이 읽는 것을 허용한다.</description>
    </item>
    
    <item>
      <title>[데이터베이스] 트랜잭션(Transaction) 이란?</title>
      <link>https://v8.network/post/dbtransaction/</link>
      <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/dbtransaction/</guid>
      <description>트랜잭션(Transaction) 트랜잭션은 데이터베이스 내에서 수행되는 작업의 최소 단위로, 데이터베이스의 무결성을 유지하며,
데이터베이스의 상태를 변화시키는 기능을 수행한다.
데이터베이스의 상태를 변경시킨다는 것은 SELECT,UPDATE, INSERT, DELETE 와 같은 행동을 뜻한다.
트랜잭션은 하나 이상의 query 를 포함해야하고 ACID 라 칭해지는 원자성, 일관성, 고립성, 지속성의 4가지 규칙을 만족해야한다.
왜 필요한가? 데이터베이스에서 트랜잭션이 필요한 이유는 데이터를 다룰 때 장애가 일어나는 경우
트랜잭션은 장애 발생 시 데이터를 복구하는 작업의 단위가 되기 때문이다.
또한 데이터베이스에서 여러 작업이 동시에 같은 데이터를 다룰 때 트랜잭션을 통해 작업을 분리하고, 이를 통해 오류가 발생하지 않게 한다.</description>
    </item>
    
    <item>
      <title>[운영체제] 동시성(Concurrency) 과 병렬성(Parallelism) 의 차이</title>
      <link>https://v8.network/post/os%EB%8F%99%EC%8B%9C%EC%84%B1_%EB%B3%91%EB%A0%AC%EC%84%B1/</link>
      <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/os%EB%8F%99%EC%8B%9C%EC%84%B1_%EB%B3%91%EB%A0%AC%EC%84%B1/</guid>
      <description>동시성(Concurrency) 동시성은 동시에 실행되는 것처럼 보이는 것이다.
&amp;lsquo;동시&amp;rsquo; 라고 이야기 하지만 컴퓨터(코어)는 한번에 하나의 명령어만 처리 할 수 있다.
위의 사진과 같이 Thread A 와 Thread B 가 Context Switching 을 통해 여러 개의 스레드를 번갈아 가면서 실행되는 방식이다.
병렬성(Parallelism) 병렬성은 2개 이상의 코어에서 알고리즘이 동시에 정확히 실행 되는 것이다.
동시성과는 다르게 여러 작업이 여러 스레드에서 각각 처리된다.
결론은 한번에 여러일을 처리가 가능한것이다.
사실 위의 글을 정리하면서 와닿지 않는 부분이 있었는데</description>
    </item>
    
    <item>
      <title>[운영체제] 프로세스(Process)와 스레드(Thread)</title>
      <link>https://v8.network/post/osprocess_thread/</link>
      <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/osprocess_thread/</guid>
      <description>프로세스(Process) 우리 컴퓨터에서 실행 할 수 있는것을 프로그램 이라 한다.
그리고 프로그램 이 실행이 되어 돌아가고 있는 상태를 프로세스 라 한다.
글을 쓰고 있는 상태에서도 내 PC에서는 프로세스 가 저렇게 많이 켜져있다.
위의 사진 처럼 여러 프로세스들이 함께 돌아갈 수 있는 이유는 나중에 더 깊게 다룰 것이지만,
동시적, 병렬적 이 둘의 혼합으로 이루어진다.
간단히 설명하자면,
동시성(Concurrency)은 프로세서(CPU) 하나가 진행 중인 작업을 계속 바꿔준다.
바꿔주는 작업을 Context Switching 이라 한다.
이 과정이 사람이 눈치 챌 수 없을만큼 빠르게 진행되다보니 동시에 진행되는것처럼 느끼는것이다.</description>
    </item>
    
    <item>
      <title>[네트워크] 네트워크의 기본 규칙 (프로토콜, OSI 모델과 TCP/IP 모델)</title>
      <link>https://v8.network/post/networknetwork_rules/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/networknetwork_rules/</guid>
      <description>프로토콜이란? 일상생활에서 지켜야 하는 규칙이 있듯이, 네트워크에서도 문제없이 통신하려면 규칙을 지켜야한다.
예를 들어 프랑스어를 못하는 한국인과 한국어를 못하는 프랑스인이 만나면 대화가 불가능하다.
그러면 영어로 대화한다는 규칙을 정해 놓으면 문제없이 대화가 가능하다.
이와 같은 규칙을 네트워크에서는 프로토콜 이라고 한다.
일상생활에서 접할 수 있는 편지를 예시로 들어보면
편지를 써서 우체통에 넣으면 우체부가 편지를 수거한다. 수거한 편지는 우체국으로 가져가 분류한다. 분류된 편지들은 우체부가 가까운 우체국으로 편지를 운송하고, 수신자들은 우편함에서 찾아간다. 그러나 1 에서 편지를 쓰는 과정에서 주소를 적지 않았거나, 우표를 붙이지 않았다면 우체부는 수신처를 알 수 없으므로 가져다 줄 수 없다.</description>
    </item>
    
    <item>
      <title>[자료구조] 스택(Stack) 과 큐(Queue)</title>
      <link>https://v8.network/post/stack-queue/</link>
      <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/stack-queue/</guid>
      <description>스택 (Stack) 스택(Stack)은 &amp;lsquo;쌓다&amp;rsquo; 라는 의미로, 데이터를 쌓아 올린 형태의 자료구조이다.
접근 방법은 LIFO(Last In First Out) 라고 부르며, 마지막에 넣은 요소가 먼저 나온다는 의미다.
아래가 막혀있고 위가 뚫린 형태로 차곡차곡 쌓인다.
이러한 구조이기때문에 마지막에 삽입한 요소는 처음으로 삭제할 수 있다.
스택에서 삽입은 PUSH, 삭제는 POP 이라는 용어로 사용하고 있다.
실사용 예제 브라우저에서 뒤로 가기 문서작업에서 Ctrl + Z 실행취소 (undo) 후위 표기법 (컴퓨터가 어떤식으로 사칙 연산을 하는지 이해하는 용도) 큐(Queue) 큐는 단순히 스택의 반대 개념이다.</description>
    </item>
    
    <item>
      <title>[자료구조] 배열(Array) 과 리스트(List)</title>
      <link>https://v8.network/post/array-list/</link>
      <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/array-list/</guid>
      <description>Array (배열) 데이터가 많아지면 그룹 관리의 필요성이 생긴다. 이럴 때 사용하는 것이 배열이다. 하나의 변수에 여러 데이터를 담을 수 있다. 파이썬에서는 배열이라는게 없고 리스트가 배열 기능을 제공한다.
그래서 C로 예시를 들어보자면
int Array[5] = {13, 42, 33, 95, 11, 28} Index 0 1 2 3 4 5 Element 13 42 33 95 11 28 위의 표와 같이 Index 는 0 부터 시작하고 배열의 사이즈에 맞게 들어가는것을 볼 수 있다.
배열의 특징 미리 최대 크기를 지정해야 한다.</description>
    </item>
    
    <item>
      <title>TDD 는 왜 필요한가?</title>
      <link>https://v8.network/post/tdd/</link>
      <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/tdd/</guid>
      <description>테스트가 개발을 주도한다</description>
    </item>
    
    <item>
      <title>[알고리즘] 시간 복잡도</title>
      <link>https://v8.network/post/algorithm-complexity/</link>
      <pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/algorithm-complexity/</guid>
      <description>알고리즘 복잡도 알고리즘 복잡도에는
시간 복잡도 (알고리즘 실행 속도) 공간 복잡도 (알고리즘이 사용하는 메모리 사이즈) 이 두 가지가 있다.
이 중에서 가장 중요한 시간 복잡도를 꼭 이해해야한다.
시간복잡도 코딩을 하다보면 &amp;lsquo;이것보다 더 좋은방법은 없을까?&amp;rsquo; 아니면 &amp;lsquo;이게 최선인가?&amp;rsquo; 라고 고민을 많이 하게된다.
이러한 고민을 하는게 시간복잡도를 고민한다는 것과 같은 말인것같다.
시간복잡도에서 가장 영향을 많이 미치는건 반복문이다.
자동차로 출근하기까지의 과정을 예시로 들어보면
자동차 문 열기 시동걸기 회사까지 이동 주차 시동끄기 자동차 문 잠그기 가장 많은 시간을 소요하는건 사람마다 다르겠지만 보통 3.</description>
    </item>
    
    <item>
      <title>[자료구조] 자료구조(Data Structure)란?</title>
      <link>https://v8.network/post/data-structure-algoithm/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/data-structure-algoithm/</guid>
      <description>자료구조 (Data Structure) 자료구조란? 대량의 데이터를 효율적으로 관리할 수 있는 데이터 구조 특정한 상황에 놓인 문제를 해결하는 데에 특화되어있다. 많은 자료구조를 알아두면, 특정 문제를 해결하는 데에 상황에 가장 적합한 자료구조를 빠르게 찾아 데이터를 정리하고 활용하여 해결할 수 있다. 문제해결에 필요한 알고리즘과 밀접한 연관이 있다. 결국은 개발자가 문제해결을 하기 위해 배우는 것이다. 쉽게 말해,
자료는 도서관의 책들
구조는 도서관의 책들을 규칙에 따라 정리한 것.
이러면 조금 이해가 쉬울것같다.
왜 자료구조를 배워야할까? 데이터는 문자, 숫자, 사진, 소리 등 실생활을 구성하고 있는 모든 값이다.</description>
    </item>
    
    <item>
      <title>[CS] 컴퓨팅 사고</title>
      <link>https://v8.network/post/cs50-computational-thinking/</link>
      <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/cs50-computational-thinking/</guid>
      <description>컴퓨터 사이언스가 왜 필요했는지? 네이버 부스트코스에서 진행하는 &amp;lsquo;CS50&amp;rsquo; 이라는 강의를 수강했다.
비전공자인 나에게는 컴퓨터 사이언스에 관한 지식이 필요했다.
2진법 (binary) 우리가 일상에서 0,1,2,3,4,5,6,7,8,9 라고 표현하는것을 10진법
컴퓨터는 오직 0, 1 단 두개만을 사용해 데이터를 표현을 한다. 이것을 우리는 2진법이라 부른다.
예들들어, 우리가 알고있는 10진법의 숫자 13 을 2진법으로 바꾸게된다면
결과는 1101 이다.
(\(2^3=8\)) = 1
(\(2^2=4\)) = 1
(\(2^1=2\)) = 0
(\(2^0=1\)) = 1
1 이라고 표시한건 True 라고 생각하면된다.</description>
    </item>
    
    <item>
      <title>[배민서바이벌] 프로젝트 완성 및 회고</title>
      <link>https://v8.network/post/baemin-survival/</link>
      <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/baemin-survival/</guid>
      <description>배민문방구 클론 프로젝트 회고록</description>
    </item>
    
    <item>
      <title>[Django] Query String 쿼리스트링</title>
      <link>https://v8.network/post/django-query-string/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/django-query-string/</guid>
      <description>Query string에 대해 알아봅시다.</description>
    </item>
    
    <item>
      <title>[Django] JsonResponse를 쓰는데 왜 request 가 필요할까</title>
      <link>https://v8.network/post/django-why-need-request/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/django-why-need-request/</guid>
      <description>HttpRequest 의 하위클래스에있는 JsonResponse</description>
    </item>
    
    <item>
      <title>[Django] QuerySet filter 제대로 알아보자</title>
      <link>https://v8.network/post/django-queryset-filter/</link>
      <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/django-queryset-filter/</guid>
      <description>혼란스러운 queryset filter</description>
    </item>
    
    <item>
      <title>[Django] raise error 메시지를 json데이터로 출력하는 방법</title>
      <link>https://v8.network/post/django-raise/</link>
      <pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/django-raise/</guid>
      <description>Validation 에러 메시지를 json 으로 못가져와서 삽질한 결과</description>
    </item>
    
    <item>
      <title>[Network] REST API란?</title>
      <link>https://v8.network/post/rest-api/</link>
      <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/rest-api/</guid>
      <description>REST 와 RESTful API 의 의미와 설계 가이드</description>
    </item>
    
    <item>
      <title>[Django] 참조(Foreign Key) 역참조(related_name)</title>
      <link>https://v8.network/post/django-related-name/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/django-related-name/</guid>
      <description>장고 모델작성시 참조 역참조에 대해</description>
    </item>
    
    <item>
      <title>[Django] ORM get(), filter() 비교</title>
      <link>https://v8.network/post/django-orm-get-filter/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/django-orm-get-filter/</guid>
      <description>헷갈리는 get() 과 filter()</description>
    </item>
    
    <item>
      <title>[Python] 데코레이터(Decorator)와 클로저(Clousure) 활용</title>
      <link>https://v8.network/post/python-decorator/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/python-decorator/</guid>
      <description>함수 앞뒤에 기능을 추가해서 손쉽게 함수를 활용할 수 있는 기법 데코레이터</description>
    </item>
    
    <item>
      <title>[Python] 클로저(Closure)</title>
      <link>https://v8.network/post/python-closure/</link>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/python-closure/</guid>
      <description>처음에는 어려운 파이썬 클로저</description>
    </item>
    
    <item>
      <title>[Git] 기초적인 사용방법</title>
      <link>https://v8.network/post/git-basic/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/git-basic/</guid>
      <description>무조건 알아야하는 git &amp;amp; github</description>
    </item>
    
    <item>
      <title>[Python] 함수 인자와 가변인수(*args), 가변 키워드 인수(**kwargs) 에 대해</title>
      <link>https://v8.network/post/python-function-parameter/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/python-function-parameter/</guid>
      <description>파이썬 가변인수(*args) 와 가변 키워드 인수 (**kwargs)</description>
    </item>
    
    <item>
      <title>[CSS] position 속성과 display 속성에 대해</title>
      <link>https://v8.network/post/css_layout/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/css_layout/</guid>
      <description>알아두면 좋은 기본적인 css 속성들</description>
    </item>
    
    <item>
      <title>[HTML] Semantic Web, Semantic Tag 이 뭔가요?</title>
      <link>https://v8.network/post/semantic-web/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/semantic-web/</guid>
      <description>Semantic Web은 의미를 정확히 부여하는 기술입니다.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://v8.network/post/consoleme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://v8.network/post/consoleme/</guid>
      <description>사전 셋팅 Python 3.8.10 설치 https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg
Node.js 설치 brew install node
AWS 설정 IAM 계정의 Access Key 와 Secret Key 를 가지고 설정합니다.
지역은 사용하시는 리전
AWS Access Key ID [None]: AKI******** AWS Secret Access Key [None]: lSrC************* Default region name [None]: ap-northeast-2 Default output format [None]: json 기타 설정 ConsoleMe 의 Makefile 에는 pip 명령어만 인식하기때문에,
맥에서 기본으로 지정되는 pip3 -&amp;gt; pip 로 변경해야됩니다.
vim ~/.bashrc
alias pip=&amp;ldquo;pip3&amp;rdquo;
입력하고</description>
    </item>
    
  </channel>
</rss>
