<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 희택 Playground</title>
        <link>https://heetaek.com/post/</link>
        <description>Recent content in Posts on 희택 Playground</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-kr</language>
        <lastBuildDate>Mon, 22 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://heetaek.com/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>[Go] Go언어로 redis pub sub 구현</title>
        <link>https://heetaek.com/p/go-go%EC%96%B8%EC%96%B4%EB%A1%9C-redis-pub-sub-%EA%B5%AC%ED%98%84/</link>
        <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/go-go%EC%96%B8%EC%96%B4%EB%A1%9C-redis-pub-sub-%EA%B5%AC%ED%98%84/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/185876174-e54c99ee-cf3c-42f4-935b-1061219949a6.png" alt="Featured image of post [Go] Go언어로 redis pub sub 구현" /&gt;&lt;h1 id=&#34;go-언어로-redis-pubsub-구현&#34;&gt;Go 언어로 Redis pubsub 구현&lt;/h1&gt;
&lt;h2 id=&#34;필수-패키지&#34;&gt;필수 패키지&lt;/h2&gt;
&lt;p&gt;Mac 기준입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install redis
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;brew 로 redis 설치하게 되면 Redis7 로 설치됩니다.&lt;/p&gt;
&lt;p&gt;저희가 사용할 go-redis 는 현재 Redis6 가 stable 버전임을 참고바랍니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; get github.com&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;redis&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;redis&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;v8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;v8 = Redis6 (stable)&lt;/p&gt;
&lt;p&gt;v9 = Redis7 (beta)&lt;/p&gt;
&lt;p&gt;하지만 테스트 해본결과 큰 문제가 없습니다.&lt;/p&gt;
&lt;p&gt;라우터의 경우 뭘 사용해도 상관없습니다. (다만 body 바인딩 부분에서 조금의 차이가 있을 수 있습니다.)&lt;/p&gt;
&lt;p&gt;저는 AWS API Gateway 와 AWS Lambda 도 같이 사용할수있는&lt;/p&gt;
&lt;p&gt;http 라우터 golam 을 사용하였습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; get github.com&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;unsafe&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;risk&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;golam
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pubsub-구현&#34;&gt;PubSub 구현&lt;/h2&gt;
&lt;p&gt;먼저 redis 의 pubsub 아키텍처가 무엇인지 확인해보자.&lt;/p&gt;
&lt;p&gt;참고링크 : &lt;a class=&#34;link&#34; href=&#34;https://medium.com/frientrip/pub-sub-%EC%9E%98-%EC%95%8C%EA%B3%A0-%EC%93%B0%EC%9E%90-de9dc1b9f739&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://medium.com/frientrip/pub-sub-%EC%9E%98-%EC%95%8C%EA%B3%A0-%EC%93%B0%EC%9E%90-de9dc1b9f739&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;kafka 와 redis 아키텍쳐에 대한 비교글도있으니 참고하면 좋을듯싶다.&lt;/p&gt;
&lt;p&gt;나중에 kafka 에 대해서도 다뤄볼 기회가 있다면 다뤄보고싶다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/185931263-d0db0458-e468-4d1d-a1d3-d06687002e90.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;redis pubsub arichitecture&#34;
	
	
&gt;&lt;/p&gt;
&lt;center&gt;Redis 의 PubSub 아키텍처&lt;/center&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── go.mod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── go.sum
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── redis
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── dump.rdb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── pub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   │   └── main.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── sub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       └── main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;publisher&lt;/strong&gt; 의 경우 golam 으로 라우팅하여 &lt;code&gt;POST&lt;/code&gt; 메소드로 메시지를 채널로 전송하였습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;subscriber&lt;/strong&gt; 는 redis 채널로 메시지를 전송받게끔 구현하였습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pub&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;main.&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; redisClient = redis.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewClient&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;redis.Options{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Addr: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;localhost:6379&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ctx = context.&lt;span style=&#34;color:#50fa7b&#34;&gt;Background&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; User &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Name  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`json:&amp;#34;name&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Email &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`json:&amp;#34;email&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	g &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; golam.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	g.&lt;span style=&#34;color:#50fa7b&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, PostString)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Start server&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; g.&lt;span style=&#34;color:#50fa7b&#34;&gt;StartWithLocalAddr&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;:3000&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Print&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;PostString&lt;/span&gt;(c golam.Context) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; user User
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	body &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; c.&lt;span style=&#34;color:#50fa7b&#34;&gt;Request&lt;/span&gt;().Body
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	data &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(body)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	json.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unmarshal&lt;/span&gt;(data, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	payload, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; json.&lt;span style=&#34;color:#50fa7b&#34;&gt;Marshal&lt;/span&gt;(user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; redisClient.&lt;span style=&#34;color:#50fa7b&#34;&gt;Publish&lt;/span&gt;(ctx, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;채널명&amp;#34;&lt;/span&gt;, payload).&lt;span style=&#34;color:#50fa7b&#34;&gt;Err&lt;/span&gt;(); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Print&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; c.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;(http.StatusOK, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;redis 의 기본 포트인 &lt;code&gt;6379&lt;/code&gt; 로 새로운 클라이언트 시작&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; redisClient = redis.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewClient&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;redis.Options{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Addr: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;localhost:6379&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Publish 메소드를 보면 채널에 메시지를 작성한다네요&lt;/p&gt;
&lt;p&gt;필요한 인자는 채널명과 메시지네요.&lt;/p&gt;
&lt;p&gt;채널명과 메시지를 적어줍시다.&lt;/p&gt;
&lt;p&gt;메시지는 payload 에 json 마샬링이 된 User 구조체가 담겨져있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/185935366-1c0fe30d-44d1-4dc8-b8e3-99a126555df5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;redis&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;이렇게 하면 publisher 는 완성이 되었습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; redisClient.&lt;span style=&#34;color:#50fa7b&#34;&gt;Publish&lt;/span&gt;(ctx, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;채널명&amp;#34;&lt;/span&gt;, payload).&lt;span style=&#34;color:#50fa7b&#34;&gt;Err&lt;/span&gt;(); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Print&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;subscriber 를 마무리 해봅시다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sub&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;main.&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ctx = context.&lt;span style=&#34;color:#50fa7b&#34;&gt;Background&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; redisClient = redis.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewClient&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;redis.Options{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Addr: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;localhost:6379&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; User &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Name  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`json:&amp;#34;name&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Email &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`json:&amp;#34;email&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	subscriber &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; redisClient.&lt;span style=&#34;color:#50fa7b&#34;&gt;Subscribe&lt;/span&gt;(ctx, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;채널명&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	user &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; User{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		msg, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; subscriber.&lt;span style=&#34;color:#50fa7b&#34;&gt;ReceiveMessage&lt;/span&gt;(ctx)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; json.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unmarshal&lt;/span&gt;([]&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(msg.Payload), &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;user); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;메시지가&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; msg.Channel &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; 채널에서 왔습니다.\n\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%+v\n\n&amp;#34;&lt;/span&gt;, user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;subscriber 는 메시지를 받는 입장이니 publisher 채널을 구독해주어야겠죠.&lt;/p&gt;
&lt;p&gt;publisher 에서 생성했던 채널을 구독해줍시다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;subscriber &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; redisClient.&lt;span style=&#34;color:#50fa7b&#34;&gt;Subscribe&lt;/span&gt;(ctx, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;채널명&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 반복문을 돌며 메시지를 수신해주도록 하면됩니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    msg, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; subscriber.&lt;span style=&#34;color:#50fa7b&#34;&gt;ReceiveMessage&lt;/span&gt;(ctx)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; json.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unmarshal&lt;/span&gt;([]&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(msg.Payload), &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;user); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;메시지가&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; msg.Channel &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; 채널에서 왔습니다.\n\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%+v\n\n&amp;#34;&lt;/span&gt;, user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;실행&#34;&gt;실행&lt;/h2&gt;
&lt;p&gt;터미널 두개로 pub 과 sub 두개를 동시에 실행하였습니다.&lt;/p&gt;
&lt;p&gt;publisher 실행&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go run main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;subscriber 실행&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; sub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go run main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heetaek.com/pubsub.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;example&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[데이터베이스] N &#43; 1 문제</title>
        <link>https://heetaek.com/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-n--1-%EB%AC%B8%EC%A0%9C/</link>
        <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-n--1-%EB%AC%B8%EC%A0%9C/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181750002-1bb8b82d-2288-4f1b-9c96-455e85db9bdf.png" alt="Featured image of post [데이터베이스] N &#43; 1 문제" /&gt;&lt;h1 id=&#34;n--1-문제란&#34;&gt;N + 1 문제란?&lt;/h1&gt;
&lt;p&gt;ORM 의 연관 관계에서 발생하는 문제다.
예를 들어 여러 개의 상품 구매 목록을 가지고 있는 쇼핑몰 유저다.&lt;/p&gt;
&lt;p&gt;User 와 Order 테이블이 1:N 관계로 설정되어있다 가정하고&lt;/p&gt;
&lt;p&gt;특정 유저를 조회했을때 SELECT 문은 1번 실행되고, 해당 유저와 관련된 상품을 N 번 더 조회하게 된다.&lt;/p&gt;
&lt;p&gt;N + 1 문제를 해결하기 전에 관련된 중요한 개념인 &lt;code&gt;Eager Loading&lt;/code&gt; 과 &lt;code&gt;Lazy Loading&lt;/code&gt; 에 대해 알아야한다.&lt;/p&gt;
&lt;h2 id=&#34;eager-loading-이란&#34;&gt;Eager Loading 이란?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Eager Loading&lt;/code&gt; 이란 즉시 로딩으로 로딩 시 참조해야 할 데이터들을 미리 전부 가져옵니다.&lt;/p&gt;
&lt;p&gt;연관되어있는 데이터들을 한 번에 가져올 수 있다는 장점이 있지만, 초기 로딩 시 속도가 느려질 수 있다는 특징이 있다.&lt;/p&gt;
&lt;h2 id=&#34;lazy-loading-이란&#34;&gt;Lazy Loading 이란?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Lazy Loading&lt;/code&gt; 이란 말 그대로 지연 로딩이라 한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eager Loading&lt;/code&gt; 과 반대로 필요한 순간에만 데이터를 가져온다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;Eager Loading&lt;/code&gt; 과 &lt;code&gt;Lazy Loading&lt;/code&gt; 에 대해 알아보았으니&lt;/p&gt;
&lt;p&gt;더 쉽게 예시를 들어보면서 자세히 알아보자.&lt;/p&gt;
&lt;p&gt;다른 ORM 은 어떤 방식으로 동작하는지 모르겠지만, 검색을 해보면 대부분 Spring 의 JPA 예제뿐이다.&lt;/p&gt;
&lt;h2 id=&#34;django-n1-예제&#34;&gt;Django N+1 예제&lt;/h2&gt;
&lt;p&gt;Place모델과 Restaurant모델&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Place&lt;/span&gt;(models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Model):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    address &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __str__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Restaurant&lt;/span&gt;(models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Model):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    place &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;OneToOneField(Place, on_delete&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CASCADE, related_name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;restaurant&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    severs_pizza &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;BooleanField(default&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __str__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Place모델과 Restaurant모델은 일대일 관계
각각 6개만 레코드를 생성합니다. 아래는 이미 생성한 결과 화면입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; place &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; Place&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;all():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(place&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;restaurant&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 때 생성되는 쿼리들은 아래와 같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; django.db &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; connection
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(connection&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;queries)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT @@SQL_AUTO_IS_NULL&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT `photo_place`.`id`, `photo_place`.`name`, `photo_place`.`address` FROM `photo_place`&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT `photo_restaurant`.`id`, `photo_restaurant`.`place_id`, `photo_restaurant`.`name`, `photo_restaurant`.`severs_pizza` FROM `photo_restaurant` WHERE `photo_restaurant`.`place_id` = 1 LIMIT 21&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT `photo_restaurant`.`id`, `photo_restaurant`.`place_id`, `photo_restaurant`.`name`, `photo_restaurant`.`severs_pizza` FROM `photo_restaurant` WHERE `photo_restaurant`.`place_id` = 2 LIMIT 21&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT `photo_restaurant`.`id`, `photo_restaurant`.`place_id`, `photo_restaurant`.`name`, `photo_restaurant`.`severs_pizza` FROM `photo_restaurant` WHERE `photo_restaurant`.`place_id` = 3 LIMIT 21&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT `photo_restaurant`.`id`, `photo_restaurant`.`place_id`, `photo_restaurant`.`name`, `photo_restaurant`.`severs_pizza` FROM `photo_restaurant` WHERE `photo_restaurant`.`place_id` = 4 LIMIT 21&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT `photo_restaurant`.`id`, `photo_restaurant`.`place_id`, `photo_restaurant`.`name`, `photo_restaurant`.`severs_pizza` FROM `photo_restaurant` WHERE `photo_restaurant`.`place_id` = 5 LIMIT 21&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.001&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT `photo_restaurant`.`id`, `photo_restaurant`.`place_id`, `photo_restaurant`.`name`, `photo_restaurant`.`severs_pizza` FROM `photo_restaurant` WHERE `photo_restaurant`.`place_id` = 6 LIMIT 21&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;}]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;쿼리셋에 담겨있는 내용을 호출하면&lt;/p&gt;
&lt;p&gt;담겨있는 N번 만큼의 수량이 호출이 되는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;만약 10만개의 데이터를 호출하면 SELECT 문도 똑같이 10만번 호출되는 문제다.&lt;/p&gt;
&lt;p&gt;이 때 &lt;code&gt;prefetch_related&lt;/code&gt; 를 사용하여 &lt;code&gt;Eager Loading&lt;/code&gt; 을 하게되면&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; place &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; Place&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;prefetch_related(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;restaurant&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;all():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;     &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(place&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;restaurant&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestRestaruant6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT @@SQL_AUTO_IS_NULL&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT `photo_place`.`id`, `photo_place`.`name`, `photo_place`.`address` FROM `photo_place`&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;sql&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SELECT `photo_restaurant`.`id`, `photo_restaurant`.`place_id`, `photo_restaurant`.`name`, `photo_restaurant`.`severs_pizza` FROM `photo_restaurant` WHERE `photo_restaurant`.`place_id` IN (1, 2, 3, 4, 5, 6)&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;time&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0.000&amp;#39;&lt;/span&gt;}]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;확실히 쿼리가 줄은것을 볼 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zetawiki.com/wiki/N%2B1_%EC%BF%BC%EB%A6%AC_%EB%AC%B8%EC%A0%9C&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zetawiki.com/wiki/N%2B1_%EC%BF%BC%EB%A6%AC_%EB%AC%B8%EC%A0%9C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://daeguowl.tistory.com/171&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://daeguowl.tistory.com/171&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://velog.io/@kim6515516/npuls&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://velog.io/@kim6515516/npuls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://choidr.tistory.com/entry/TypeORM-N-1-%EB%AC%B8%EC%A0%9C&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://choidr.tistory.com/entry/TypeORM-N-1-%EB%AC%B8%EC%A0%9C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[데이터베이스] 트랜잭션 격리 수준(Transaction isolation Level)</title>
        <link>https://heetaek.com/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B2%A9%EB%A6%AC-%EC%88%98%EC%A4%80transaction-isolation-level/</link>
        <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EA%B2%A9%EB%A6%AC-%EC%88%98%EC%A4%80transaction-isolation-level/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749234-419a017c-7eef-4373-ab51-c3464c6e490a.png" alt="Featured image of post [데이터베이스] 트랜잭션 격리 수준(Transaction isolation Level)" /&gt;&lt;h1 id=&#34;격리-수준isolation-level&#34;&gt;격리 수준(Isolation Level)&lt;/h1&gt;
&lt;p&gt;격리 수준이란 트랜잭션들끼리 일관된 데이터들을 얼마나 허용할것인지를 정하는 수준이다.&lt;/p&gt;
&lt;p&gt;쉽게 말해 동시에 데이터베이스에 접근할 때 그 접근을 어떻게 제어할지에 대한 설정이다.&lt;/p&gt;
&lt;p&gt;격리 수준에는 총 4가지의 수준이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read-Uncommitted (레벨 0)&lt;/li&gt;
&lt;li&gt;Read-Commited (레벨 1)&lt;/li&gt;
&lt;li&gt;Repeat-Read (레벨 2)&lt;/li&gt;
&lt;li&gt;Serializable (레벨 3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;밑으로 갈 수록 격리 수준은 높아지지만 성능은 떨어진다.&lt;/p&gt;
&lt;p&gt;데이터 정확성과 성능이 반비례하므로 상황에 따라 잘 선택하는것이 중요하다.&lt;/p&gt;
&lt;h2 id=&#34;isolation-level-종류&#34;&gt;Isolation Level 종류&lt;/h2&gt;
&lt;h3 id=&#34;read-uncommitted-레벨-0&#34;&gt;Read-Uncommitted (레벨 0)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SELECT 문장이 수행되는 동안 해당 데이터에 &lt;code&gt;Shared Lock이 걸리지 않는 계층&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;트랜잭션이 처리중이거나 아직 commit 되지않은 데이터를 다른 트랜잭션이 읽는 것을 허용한다.&lt;/li&gt;
&lt;li&gt;데이터베이스의 일관성을 유지하는 것이 불가능하다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dirty Read&lt;/code&gt; 발생
&lt;ul&gt;
&lt;li&gt;A 트랜잭션에서 10번 유저의 나이를 28에서 29으로 바꾸고, 아직 커밋하지않았다.&lt;/li&gt;
&lt;li&gt;B 트랜잭션에서 10번 유저의 나이를 조회 : 결과 = 28 -&amp;gt; 더티 리드(Drity Read)
&lt;ul&gt;
&lt;li&gt;이후 A 트랜잭션에서 문제가 발생해 Rollback&lt;/li&gt;
&lt;li&gt;B 트랜잭션은 10번 유저가 여전히 29살이라 생각하고 로직을 수행&lt;/li&gt;
&lt;li&gt;이런식으로 데이터 정합성에 문제가 생긴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;read-committed-레벨-1&#34;&gt;Read-Committed (레벨 1)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SELECT 문장이 수행되는 동안 해당 데이터에 &lt;code&gt;Shard Lock이 걸리는 계층&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;트랜잭션이 수행되는 동안 다른 트랜잭션이 접근할 수 없어 대기하게 된다.&lt;/li&gt;
&lt;li&gt;commit 이루어진 트랜잭션만 조회가 가능하다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Non-Repeatable Read&lt;/code&gt; 발생
&lt;ul&gt;
&lt;li&gt;B 트랜잭션에서 10번 유저의 나이를 조회: 결과 28&lt;/li&gt;
&lt;li&gt;A 트랜잭션에서 10번 유저의 나이를 28에서 29로 바꾸고 commit&lt;/li&gt;
&lt;li&gt;B 트랜잭션에서 10번 유저의 나이를 조회 : 결과 29&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;repeat-read-레벨-2&#34;&gt;Repeat-Read (레벨 2)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;트랜잭션이 완료될 때까지 &lt;code&gt;SELECT 문장이 사용되는 모든 데이터에 Shared Lock이 걸리는 계층&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;트랜잭션이 범위 내에서 조회한 데이터 내용이 항상 동일함을 보장한다.&lt;/li&gt;
&lt;li&gt;다른 사용자는 트랜잭션 영역에 해당되는 데이터를 수정이 불가능하다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Phantom Read&lt;/code&gt; 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;serializable-레벨-3&#34;&gt;Serializable (레벨 3)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;트랜잭션이 완료될 때까지 &lt;code&gt;SELECT 문장이 사용되는 모든 데이터에 Shard Lock이 걸리는 계층&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;가장 엄격한 격리 수준으로 완벽한 읽기 모드를 제공한다.&lt;/li&gt;
&lt;li&gt;다른 사용자는 트랜잭션에 영역에 해당되는 데이터를 수정 및 입력이 불가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;일반적인 온라인 서비스에서는 &lt;code&gt;Read Commited&lt;/code&gt; 나 &lt;code&gt;Repeat-Read&lt;/code&gt; 중 하나를 사용한다&lt;/p&gt;
&lt;p&gt;오라클을 포함한 대부분의 DBMS 는 &lt;code&gt;Read-Commited&lt;/code&gt; 이 기본 레벨이고,&lt;/p&gt;
&lt;p&gt;MySQL 은 기본 레벨은 &lt;code&gt;Repeat-Read&lt;/code&gt; 이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;레벨-별-허용되는-이상-현상&#34;&gt;레벨 별 허용되는 이상 현상&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Isolation Level&lt;/th&gt;
&lt;th&gt;Dirty Read&lt;/th&gt;
&lt;th&gt;Non-Repeatable Read&lt;/th&gt;
&lt;th&gt;Phantom Read&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Read Uncommitted(Level 0)&lt;/td&gt;
&lt;td&gt;허용&lt;/td&gt;
&lt;td&gt;허용&lt;/td&gt;
&lt;td&gt;허용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read Committed(Level 1)&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;허용&lt;/td&gt;
&lt;td&gt;허용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Repeat-Read(Level 2)&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;허용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Serializable(Level 3)&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;그럼 &lt;code&gt;Dirty Read&lt;/code&gt; , &lt;code&gt;Non-Repeatable Read&lt;/code&gt;, &lt;code&gt;Phantom Read&lt;/code&gt; 가 뭔지 알아보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dirty Read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어떤 트랜잭션에서 아직 실행이 끝나지 않은 다른 트랜잭션에 의한 변경사항을 보게되는 경우.&lt;/li&gt;
&lt;li&gt;커밋되지 않은 수정중인 데이터를 다른 트랜잭션에서 &lt;code&gt;읽을 수&lt;/code&gt; 있도록 허용할 때 발생하는 현상&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-Repeatable Read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 트랜잭션에서 같은 쿼리를 두 번 수행할 떄 그 사이에 다른 트랜잭션 값을 &lt;code&gt;수정 또는 삭제&lt;/code&gt;하면서 두 쿼리의 결과가 다르게 나타나는 일관성이 깨진 현상&lt;/li&gt;
&lt;li&gt;한 트랜잭션에서 똑같은 SELECT 를 수행했을 때 항상 같은 결과를 반환해야한다는 Repeatable Read 정합성에 어긋난다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Phantom Read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 트랜잭션 안에서 일정 범위의 레코드를 두 번 읽었을 때, 첫 번째 쿼리에서 없던 레코드가 두 번째 쿼리에서 나타나는 현상&lt;/li&gt;
&lt;li&gt;트랜잭션 도중 새로운 레코드 &lt;code&gt;삽입&lt;/code&gt;을 허용하기 때문에 나타난다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;이렇게 격리 수준 레벨에 대한 이론적인것을 살펴보았지만,&lt;/p&gt;
&lt;p&gt;실제 실무에서는 어떻게 다뤄질지 전혀 감이 잡히지 않는다.&lt;/p&gt;
&lt;p&gt;아직은 어려운 주제인것같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=e9PC0sroCzc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=e9PC0sroCzc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://devjem.tistory.com/27&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://devjem.tistory.com/27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wonit.tistory.com/463?category=790502&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wonit.tistory.com/463?category=790502&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[데이터베이스] 트랜잭션(Transaction) 이란?</title>
        <link>https://heetaek.com/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98transaction-%EC%9D%B4%EB%9E%80/</link>
        <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98transaction-%EC%9D%B4%EB%9E%80/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749234-419a017c-7eef-4373-ab51-c3464c6e490a.png" alt="Featured image of post [데이터베이스] 트랜잭션(Transaction) 이란?" /&gt;&lt;h1 id=&#34;트랜잭션transaction&#34;&gt;트랜잭션(Transaction)&lt;/h1&gt;
&lt;p&gt;트랜잭션은 데이터베이스 내에서 수행되는 작업의 최소 단위로, 데이터베이스의 &lt;code&gt;무결성&lt;/code&gt;을 유지하며,&lt;/p&gt;
&lt;p&gt;데이터베이스의 상태를 변화시키는 기능을 수행한다.&lt;/p&gt;
&lt;p&gt;데이터베이스의 상태를 변경시킨다는 것은 &lt;code&gt;SELECT&lt;/code&gt;,&lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; 와 같은 행동을 뜻한다.&lt;/p&gt;
&lt;p&gt;트랜잭션은 하나 이상의 query 를 포함해야하고 ACID 라 칭해지는 원자성, 일관성, 고립성, 지속성의 4가지 규칙을 만족해야한다.&lt;/p&gt;
&lt;h3 id=&#34;왜-필요한가&#34;&gt;왜 필요한가?&lt;/h3&gt;
&lt;p&gt;데이터베이스에서 트랜잭션이 필요한 이유는 데이터를 다룰 때 장애가 일어나는 경우&lt;/p&gt;
&lt;p&gt;트랜잭션은 장애 발생 시 데이터를 복구하는 작업의 단위가 되기 때문이다.&lt;/p&gt;
&lt;p&gt;또한 데이터베이스에서 여러 작업이 동시에 같은 데이터를 다룰 때 트랜잭션을 통해 작업을 분리하고, 이를 통해 오류가 발생하지 않게 한다.&lt;/p&gt;
&lt;p&gt;은행 어플에서 A가 B에게 100만원을 입금하는 상황으로 예시를 들어보면&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A 의 계좌에서 100만원을 B의 계좌로 입금을 하려했는데 &lt;/br&gt;
전산오류가 생겨 B의 계좌에는 100만원이 입금 되지 않았다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;정상적으로 처리가 됐다면 아래의 SQL 문처럼 실행되어야한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-SQL&#34; data-lang=&#34;SQL&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;START&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TRANSACTION&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; A 계좌에서 잔액 가져옴 A &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; B 계좌에서 잔액 가져옴 B &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; A 출금 A &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; A &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; B 입금 B &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; B &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; A 계좌 잔액 저장 A &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;900&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; B 계좌 잔액 저장 B &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;COMMIT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 예상치 못한 오류가 발생하여 데이터의 부정합이 발생하는 경우 다시 원상복구를 해야한다.&lt;/p&gt;
&lt;p&gt;따라서, 모든 입출금은 하나의 묶음 형태로 작동해야한다.&lt;/p&gt;
&lt;p&gt;입금과 출금은 분리될 수 없는 하나의 거래로 처리되어야하는 &lt;code&gt;단일 업무&lt;/code&gt; 다.&lt;/p&gt;
&lt;p&gt;이러한 업무 처리의 최소단위를 데이터베이스에서 트랜잭션이라한다.&lt;/p&gt;
&lt;h2 id=&#34;트랜잭션의-특징acid&#34;&gt;트랜잭션의 특징(ACID)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/175536829-07dde6aa-fd37-4440-bcab-ea56000ce103.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ACID&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;트랜잭션은 데이터베이스의 무결성을 유지하기 위해 원자성, 일관성, 고립성, 지속성 총 4가지의 특징을 가지고있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;원자성(Atomicity) : 트랜잭션에 포함된 작업은 전부 수행되거나 아니면 전부 수행되지 말아야 한다 (all or nothing)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일관성(Consistency) : 트랜잭션이 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 유지하는 것을 의미한다. ex) 송금 전 후 모두 잔액의 데이터 타입은 int 여야한다는 것이 일관성의 한 예시가 될 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;고립성(Isolation) : 여러 트랜잭션은 동시에 수행한다. 따라서 동시에 수행되는 트랜잭션이 동일한 데이터를 가지고 충돌하지 않도록 제어해줘야한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;지속성(Durability) : 성공적으로 수행된 트랜잭션은 데이터베이스에 영원히 반영되어야 한다. 트랜잭션이 완료되어 저장이 된 데이터베이스는 저장 후에 생기는 정전, 장애, 오류 등에 영향을 받지 않아야 한다.
보통 commit 이 된다면 지속성은 만족 할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;트랜잭션의-commit-과-rollback&#34;&gt;트랜잭션의 Commit 과 Rollback&lt;/h2&gt;
&lt;h4 id=&#34;commit&#34;&gt;Commit&lt;/h4&gt;
&lt;p&gt;하나의 트랜잭션이 성공적으로 끝나서 데이터베이스가 일관성있는 상태에 있음을 의미한다.&lt;/p&gt;
&lt;h4 id=&#34;rollback&#34;&gt;Rollback&lt;/h4&gt;
&lt;p&gt;트랜잭션의 원자성이 깨질 때, 즉 하나의 트랜잭션 처리가 비정상적으로 종료 되었을 때의 상태를 뜻한다.&lt;/p&gt;
&lt;p&gt;Rollback 이 이뤄진다면 트랜잭션을 다시 실행하거나 부분적으로 변경된 결과를 취소할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://devjem.tistory.com/27&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://devjem.tistory.com/27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wonit.tistory.com/462#google_vignette&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wonit.tistory.com/462#google_vignette&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.javatpoint.com/mysql-transaction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.javatpoint.com/mysql-transaction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[운영체제] 동시성(Concurrency) 과 병렬성(Parallelism) 의 차이</title>
        <link>https://heetaek.com/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EB%8F%99%EC%8B%9C%EC%84%B1concurrency-%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1parallelism-%EC%9D%98-%EC%B0%A8%EC%9D%B4/</link>
        <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EB%8F%99%EC%8B%9C%EC%84%B1concurrency-%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1parallelism-%EC%9D%98-%EC%B0%A8%EC%9D%B4/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749273-405db335-e97d-4252-9fd4-1e875d355edf.png" alt="Featured image of post [운영체제] 동시성(Concurrency) 과 병렬성(Parallelism) 의 차이" /&gt;&lt;h1 id=&#34;동시성concurrency&#34;&gt;동시성(Concurrency)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/175758325-a5dd0542-6a35-449b-b578-ec5a8adcd55c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;동시성은 동시에 실행되는 것처럼 보이는 것이다.&lt;/p&gt;
&lt;p&gt;&amp;lsquo;동시&amp;rsquo; 라고 이야기 하지만 컴퓨터(코어)는 한번에 하나의 명령어만 처리 할 수 있다.&lt;/p&gt;
&lt;p&gt;위의 사진과 같이 Thread A 와 Thread B 가 Context Switching 을 통해 여러 개의 스레드를 번갈아 가면서 실행되는 방식이다.&lt;/p&gt;
&lt;h1 id=&#34;병렬성parallelism&#34;&gt;병렬성(Parallelism)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/175758351-7a99efe4-ea42-4375-bd04-9588c5f210e1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;병렬성은 2개 이상의 코어에서 알고리즘이 동시에 정확히 실행 되는 것이다.&lt;/p&gt;
&lt;p&gt;동시성과는 다르게 여러 작업이 여러 스레드에서 각각 처리된다.&lt;/p&gt;
&lt;p&gt;결론은 한번에 여러일을 처리가 가능한것이다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;사실 위의 글을 정리하면서 와닿지 않는 부분이 있었는데&lt;/p&gt;
&lt;p&gt;그림을 보고 이해가 갔다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/175759973-b3117da2-b3c7-4a8c-818b-e09fb6708911.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;커피 머신 한 대에 2줄로 서서 가져가는 카페와&lt;/p&gt;
&lt;p&gt;커피 머신 두 대에 1줄씩 서서 가져가는 카페&lt;/p&gt;
&lt;p&gt;모두 Concurrent 하다 볼 수 있다.&lt;/p&gt;
&lt;p&gt;병렬성도 동시성에 속하기 때문이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://seamless.tistory.com/42&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://seamless.tistory.com/42&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.charlezz.com/?p=44646&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.charlezz.com/?p=44646&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://devsrkim.tistory.com/entry/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4?category=873361&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://devsrkim.tistory.com/entry/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4?category=873361&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[운영체제] 프로세스(Process)와 스레드(Thread)</title>
        <link>https://heetaek.com/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9Cthread/</link>
        <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9Cthread/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749139-eea7573e-57c9-41c4-aadb-c0624df0e139.png" alt="Featured image of post [운영체제] 프로세스(Process)와 스레드(Thread)" /&gt;&lt;h1 id=&#34;프로세스process&#34;&gt;프로세스(Process)&lt;/h1&gt;
&lt;p&gt;우리 컴퓨터에서 실행 할 수 있는것을 &lt;code&gt;프로그램&lt;/code&gt; 이라 한다.&lt;/p&gt;
&lt;p&gt;그리고 &lt;code&gt;프로그램&lt;/code&gt; 이 실행이 되어 돌아가고 있는 상태를 &lt;code&gt;프로세스&lt;/code&gt; 라 한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/175501497-a87b5841-8c84-46fa-84c7-5f0093f240a1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;process&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;글을 쓰고 있는 상태에서도 내 PC에서는 &lt;code&gt;프로세스&lt;/code&gt; 가 저렇게 많이 켜져있다.&lt;/p&gt;
&lt;p&gt;위의 사진 처럼 여러 프로세스들이 함께 돌아갈 수 있는 이유는 나중에 더 깊게 다룰 것이지만,&lt;/p&gt;
&lt;p&gt;동시적, 병렬적 이 둘의 혼합으로 이루어진다.&lt;/p&gt;
&lt;p&gt;간단히 설명하자면,&lt;/p&gt;
&lt;p&gt;동시성(Concurrency)은 &lt;code&gt;프로세서(CPU)&lt;/code&gt; 하나가 진행 중인 작업을 계속 바꿔준다.&lt;/p&gt;
&lt;p&gt;바꿔주는 작업을 &lt;code&gt;Context Switching&lt;/code&gt; 이라 한다.&lt;/p&gt;
&lt;p&gt;이 과정이 사람이 눈치 챌 수 없을만큼 빠르게 진행되다보니 동시에 진행되는것처럼 느끼는것이다.&lt;/p&gt;
&lt;p&gt;병렬성(Parallelism)은 &lt;code&gt;프로세서(CPU)&lt;/code&gt; 하나에 코어가 여러개 달려있어, 각각 동시에 작업들을 수행하는 것을 뜻한다.&lt;/p&gt;
&lt;p&gt;듀얼코어, 쿼드코어, 옥타코어 등 멀티코어 프로세서에서 할 수 있는 방식이다.&lt;/p&gt;
&lt;h1 id=&#34;스레드thread&#34;&gt;스레드(Thread)&lt;/h1&gt;
&lt;p&gt;지금까지 PC는 여러개의 프로세스를 어떻게 함께 돌리는지 방법을 알아보았다.&lt;/p&gt;
&lt;p&gt;그러면 프로그램에서의 예시를 들어보자면 크롬 브라우저도 하나의 프로세스이다.&lt;/p&gt;
&lt;p&gt;넷플릭스로 영화를 보면서 이메일도 확인해야하고 게임도 다운로드 받아야한다.&lt;/p&gt;
&lt;p&gt;이렇게 한 프로세스에서도 여러 작업이 동시에 진행되어야하는데, 그 여러 작업을 &lt;code&gt;스레드&lt;/code&gt; 라 부른다.&lt;/p&gt;
&lt;h1 id=&#34;멀티프로세스-멀티스레드&#34;&gt;멀티프로세스? 멀티스레드?&lt;/h1&gt;
&lt;p&gt;먼저 멀티프로세스와 멀티스레드의 용어의 정의를 살펴보자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;멀티 프로세스 : 하나의 응용 프로그램을 여러 개의 프로세스로 구성하여 각 프로세스가 하나의 작업을 처리하도록 하는 것.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;멀티 스레드 : 하나의 응용 프로그램을 여러 개의 스레드로 구성하고 각 스레드로 하여금 하나의 작업을 처리하도록 하는 것.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;종류&lt;/th&gt;
&lt;th&gt;장점&lt;/th&gt;
&lt;th&gt;단점&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;멀티프로세스&lt;/td&gt;
&lt;td&gt;하나의 프로세스가 죽어도 다른 프로세스에게는 영향을 끼치지 않는다.&lt;/td&gt;
&lt;td&gt;각각 독립된 메모리 영역을 갖고 있어 작업량이 많은 수록 오버헤드가 발생하고 Context Switching으로 인한 성능 저하를 유발한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;멀티스레드&lt;/td&gt;
&lt;td&gt;프로세스의 응답시간이 단축되고 시스템의 처리율이 향상된다. 또한 코드 영역을 공유하기 때문에 자원 소모가 적다.&lt;/td&gt;
&lt;td&gt;프로그램 디버깅이 어렵고 하나의 스레드에 문제가 생기면 전체적인 프로세스에 영향을 끼치게 된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=LLiV5Yz1AWg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=LLiV5Yz1AWg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=RrfASw-jfZ4&amp;amp;ab_channel=AIHolic&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=RrfASw-jfZ4&amp;ab_channel=AIHolic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.naver.com/sjc02183/221844611260&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.naver.com/sjc02183/221844611260&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[네트워크] 네트워크의 기본 규칙 (프로토콜, OSI 모델과 TCP/IP 모델)</title>
        <link>https://heetaek.com/p/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-osi-%EB%AA%A8%EB%8D%B8%EA%B3%BC-tcp/ip-%EB%AA%A8%EB%8D%B8/</link>
        <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-osi-%EB%AA%A8%EB%8D%B8%EA%B3%BC-tcp/ip-%EB%AA%A8%EB%8D%B8/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749554-a06e6898-7f00-4daa-be9e-f84323b307d0.png" alt="Featured image of post [네트워크] 네트워크의 기본 규칙 (프로토콜, OSI 모델과 TCP/IP 모델)" /&gt;&lt;h2 id=&#34;프로토콜이란&#34;&gt;프로토콜이란?&lt;/h2&gt;
&lt;p&gt;일상생활에서 지켜야 하는 규칙이 있듯이, 네트워크에서도 문제없이 통신하려면 규칙을 지켜야한다.&lt;/p&gt;
&lt;p&gt;예를 들어 프랑스어를 못하는 한국인과 한국어를 못하는 프랑스인이 만나면 대화가 불가능하다.&lt;/p&gt;
&lt;p&gt;그러면 영어로 대화한다는 규칙을 정해 놓으면 문제없이 대화가 가능하다.&lt;/p&gt;
&lt;p&gt;이와 같은 규칙을 네트워크에서는 &lt;code&gt;프로토콜&lt;/code&gt; 이라고 한다.&lt;/p&gt;
&lt;p&gt;일상생활에서 접할 수 있는 편지를 예시로 들어보면&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;편지를 써서 우체통에 넣으면 우체부가 편지를 수거한다.&lt;/li&gt;
&lt;li&gt;수거한 편지는 우체국으로 가져가 분류한다.&lt;/li&gt;
&lt;li&gt;분류된 편지들은 우체부가 가까운 우체국으로 편지를 운송하고, 수신자들은 우편함에서 찾아간다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;그러나 1 에서 편지를 쓰는 과정에서 주소를 적지 않았거나, 우표를 붙이지 않았다면 우체부는 수신처를 알 수 없으므로 가져다 줄 수 없다.&lt;/p&gt;
&lt;p&gt;이와 같이 편지가 전송되는 과정에는 &amp;lsquo;편지를 쓰는 규칙&amp;rsquo;, &amp;lsquo;편지를 보내는 규칙&amp;rsquo;, &amp;lsquo;우체국의 규칙&amp;rsquo; 등 여러가지 규칙이 있는데 서로 영향을 주지 않는다.&lt;/p&gt;
&lt;h2 id=&#34;osi-7-layers&#34;&gt;OSI 7 Layers&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/174595245-9ae55395-4e0a-4fb5-ac55-c280aac78432.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;OSI 7 계층은 위와 같이 생겼다.&lt;/p&gt;
&lt;p&gt;저 OSI 7 계층이 왜 나왔냐면 지금은 생각조차 할 수 없지만 예전에는 같은 회사의 컴퓨터 끼리만 통신이 가능했다.&lt;/p&gt;
&lt;p&gt;예를 들어, Apple 과 Microsoft 사의 컴퓨터와는 통신이 불가능 했다.&lt;/p&gt;
&lt;p&gt;이런 일들이 있어서 공통으로 사용할 수 있는 표준 규격을 정해야만 했다.&lt;/p&gt;
&lt;p&gt;ISO 라는 국제표준화 기구가 있는데 이 단체에서 &lt;code&gt;OSI 모델&lt;/code&gt; 이라는 표준 규격을 제정했다.&lt;/p&gt;
&lt;p&gt;그럼 7계층은 왜 나누어 놨을까라는 의문이 생길수있는데 통신이 일어나는 과정을 단계별로 알 수 있고 특정한 곳에 이상이 생기면 그 단계만 수정할 수 있기 때문이라한다.&lt;/p&gt;
&lt;h3 id=&#34;osi-모델-각-계층의-역할&#34;&gt;OSI 모델 각 계층의 역할&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;계층&lt;/th&gt;
&lt;th&gt;이름&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7계층&lt;/td&gt;
&lt;td&gt;애플리케이션 계층(Application Layer&lt;/td&gt;
&lt;td&gt;이메일 &amp;amp; 파일 전송, 웹 사이트 조회 등 애플리케이션에 대한 서비를 제공&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6계층&lt;/td&gt;
&lt;td&gt;프레젠테이션 계증(Presentation Layer)&lt;/td&gt;
&lt;td&gt;문자 코드, 압축, 암호화 등의 데이터를 변환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5계층&lt;/td&gt;
&lt;td&gt;세션 계층(Session Layer)&lt;/td&gt;
&lt;td&gt;세션 체결, 통신 방식을 결정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4계층&lt;/td&gt;
&lt;td&gt;전송 계층(Transport Layer)&lt;/td&gt;
&lt;td&gt;신뢰할 수 있는 통신을 구현&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3계층&lt;/td&gt;
&lt;td&gt;네트워크 계층(Network Layer)&lt;/td&gt;
&lt;td&gt;다른 네트워크와 통신하기 위한 경로 설정 및 논리 주소를 결정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2계층&lt;/td&gt;
&lt;td&gt;데이터 링크 계층(Data Link Layer)&lt;/td&gt;
&lt;td&gt;네트워크 기기 간의 데이터 전송 및 물리 주소를 결정&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1계층&lt;/td&gt;
&lt;td&gt;물리 계층(Physical Layer)&lt;/td&gt;
&lt;td&gt;시스템 간의 물리적인 연결과 전기 신호를 변환 및 제어&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;서로 데이터를 주고 받을 때는&lt;/p&gt;
&lt;p&gt;데이터를 송신 할 때는 7계층에서부터 1계층까지 하위 계층으로 데이터를 전달 하고&lt;/p&gt;
&lt;p&gt;데이터를 수신 받을 때는 1계층에서부터 7계층까지 상위 계층으로 데이터를 전달한다.&lt;/p&gt;
&lt;p&gt;가끔 로드밸런싱에 관한 글을 보면 L4 , L7 이라는게 나오는데 4 와 7 이 네트워크 계층이라는걸 OSI7 을 보고 알았다.&lt;/p&gt;
&lt;h2 id=&#34;tcpip-모델&#34;&gt;TCP/IP 모델&lt;/h2&gt;
&lt;p&gt;TCP/IP 모델이란 7계층을 4계층으로 바꿔서 생각하면 이해하기 쉽다.&lt;/p&gt;
&lt;p&gt;아래 그림과 같이 4계층으로 이루어져있다.
&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/174601775-dfaeed06-c49f-4d94-b0cc-059820233526.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;OSI 모델의 응용 계층, 표현 계층, 세션 계층이 TCP/IP 모델에서는 응용 계층으로 합쳐져 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;모두의 네트워크&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gyoogle.dev/blog/computer-science/network/OSI%207%EA%B3%84%EC%B8%B5.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gyoogle.dev/blog/computer-science/network/OSI%207%EA%B3%84%EC%B8%B5.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[자료구조] 스택(Stack) 과 큐(Queue)</title>
        <link>https://heetaek.com/p/stack-queue/</link>
        <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/stack-queue/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181748733-7a45d5ed-1ed3-454f-808f-19f470c19353.png" alt="Featured image of post [자료구조] 스택(Stack) 과 큐(Queue)" /&gt;&lt;h1 id=&#34;스택-stack&#34;&gt;스택 (Stack)&lt;/h1&gt;
&lt;p&gt;스택(Stack)은 &amp;lsquo;쌓다&amp;rsquo; 라는 의미로, 데이터를 쌓아 올린 형태의 자료구조이다.&lt;/p&gt;
&lt;p&gt;접근 방법은 LIFO(Last In First Out) 라고 부르며, 마지막에 넣은 요소가 먼저 나온다는 의미다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/168406214-2bc7bf49-33b0-41fe-b294-7671812fac71.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;아래가 막혀있고 위가 뚫린 형태로 차곡차곡 쌓인다.&lt;/p&gt;
&lt;p&gt;이러한 구조이기때문에 마지막에 삽입한 요소는 처음으로 삭제할 수 있다.&lt;/p&gt;
&lt;p&gt;스택에서 삽입은 &lt;code&gt;PUSH&lt;/code&gt;, 삭제는 &lt;code&gt;POP&lt;/code&gt; 이라는 용어로 사용하고 있다.&lt;/p&gt;
&lt;h3 id=&#34;실사용-예제&#34;&gt;실사용 예제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브라우저에서 뒤로 가기&lt;/li&gt;
&lt;li&gt;문서작업에서 Ctrl + Z&lt;/li&gt;
&lt;li&gt;실행취소 (undo)&lt;/li&gt;
&lt;li&gt;후위 표기법 (컴퓨터가 어떤식으로 사칙 연산을 하는지 이해하는 용도)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;큐queue&#34;&gt;큐(Queue)&lt;/h1&gt;
&lt;p&gt;큐는 단순히 스택의 반대 개념이다.&lt;/p&gt;
&lt;p&gt;접근 방법은 FIFO (First In First Out)라고 부르며, 먼저 들어간 데이터가 먼저 나오는 구조다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/168406982-c526f22d-e271-4e42-a5e2-1df59e1a27b6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;은행업무를 보기 위해 줄을 선 모습을 상상해 볼 수 있다.&lt;/p&gt;
&lt;p&gt;번호표를 먼저 뽑은 사람이 먼저 업무를 처리하고 나가고, 말 그대로 &amp;lsquo;FIFO&amp;rsquo; 다.&lt;/p&gt;
&lt;p&gt;또 다른 예시로 CPU 는 하나의 task 가 처리가 완료되어야 다음 task 로 넘어가 처리하는것처럼 실행 순서대로 처리한다.&lt;/p&gt;
&lt;h3 id=&#34;실사용-예제-1&#34;&gt;실사용 예제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;은행 업무&lt;/li&gt;
&lt;li&gt;프린터에서 여러 문서를 순서대로 인쇄&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.fun-coding.org/Chapter06-stack-live.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.fun-coding.org/Chapter06-stack-live.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.fun-coding.org/Chapter05-queue-live.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.fun-coding.org/Chapter05-queue-live.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hanamon.kr/%ec%9e%90%eb%a3%8c%ea%b5%ac%ec%a1%b0-queue-%ed%81%90-feat-buffering/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hanamon.kr/%ec%9e%90%eb%a3%8c%ea%b5%ac%ec%a1%b0-queue-%ed%81%90-feat-buffering/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[자료구조] 배열(Array) 과 리스트(List)</title>
        <link>https://heetaek.com/p/array-list/</link>
        <pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/array-list/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181748733-7a45d5ed-1ed3-454f-808f-19f470c19353.png" alt="Featured image of post [자료구조] 배열(Array) 과 리스트(List)" /&gt;&lt;h1 id=&#34;array-배열&#34;&gt;Array (배열)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;데이터가 많아지면 그룹 관리의 필요성이 생긴다. 이럴 때 사용하는 것이 배열이다.&lt;/li&gt;
&lt;li&gt;하나의 변수에 여러 데이터를 담을 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;파이썬에서는 배열이라는게 없고 리스트가 배열 기능을 제공한다.&lt;/p&gt;
&lt;p&gt;그래서 C로 예시를 들어보자면&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; Array[&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#bd93f9&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;28&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Index&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Element&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;95&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;위의 표와 같이 Index 는 0 부터 시작하고 배열의 사이즈에 맞게 들어가는것을 볼 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;배열의-특징&#34;&gt;배열의 특징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;미리 최대 크기를 지정해야 한다.&lt;/li&gt;
&lt;li&gt;엘리먼트의 인덱스는 변하지 않는다. (예를들면 주민번호)&lt;/li&gt;
&lt;li&gt;인덱스를 활용하여 빠르게 조회가 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;list-리스트&#34;&gt;List (리스트)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;리스트와 배열은 같은 다중 자료형이지만 다른 속성을 가지고있다.&lt;/li&gt;
&lt;li&gt;리스트는 배열이 가지고있는 인덱스라는 장점을 버리고 &lt;strong&gt;빈틈없는 데이터의 적재&lt;/strong&gt; 라는 장점을 가진 자료구조이다.&lt;/li&gt;
&lt;li&gt;데이터 갯수가 확실하게 정해져 있고, 자주 사용된다면 배열이 더 효율적이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;파이썬 리스트 예시&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;array &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#bd93f9&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;42&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;33&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;95&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;28&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; li &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; array:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(li) &lt;span style=&#34;color:#6272a4&#34;&gt;# 13, 42, 33, 95, 11, 28&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;평소에 사용하던 리스트가 파이썬에서는 배열이다.
파이썬의 리스트는 크기가 가변적이고 어떤 타입이던지 저장할 수 있는 장점을 가지고있다.&lt;/p&gt;
&lt;p&gt;배열 연산자를 통해 일반적인 연산이나 추가 삭제 등이 가능하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b) &lt;span style=&#34;color:#6272a4&#34;&gt;# [1, 2, 3, 4, 5, 6]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(a&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;# 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(a&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;# [1, 2, 3, 4]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다만  C의 array 보다는 메모리를 더 많이 필요로 한다는 단점이 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://opentutorials.org/module/1335/8677&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://opentutorials.org/module/1335/8677&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://opentutorials.org/module/1335/8636&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://opentutorials.org/module/1335/8636&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://studyingych.tistory.com/35&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://studyingych.tistory.com/35&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>TDD 는 왜 필요한가?</title>
        <link>https://heetaek.com/p/tdd/</link>
        <pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/tdd/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181748994-a7779896-1bc3-496b-aba2-b25d196e7e53.png" alt="Featured image of post TDD 는 왜 필요한가?" /&gt;&lt;h1 id=&#34;tddtest-driven-development-란&#34;&gt;TDD(Test Driven Development) 란?&lt;/h1&gt;
&lt;p&gt;실패하는 테스트를 만들고, 그 테스트가 통과하는 제품을 만들면 결국은 원하는 기능이 동작하게 된다는 개발방법론이다.&lt;/p&gt;
&lt;p&gt;보통은 개발을 끝내고 난 후 테스트를 한다.&lt;/p&gt;
&lt;p&gt;이것의 순서를 바꾸는 것이 TDD 를 적용하는 것이다.&lt;/p&gt;
&lt;p&gt;특히, Python 같은 동적타입언어는 TDD 가 필수다.&lt;/p&gt;
&lt;h2 id=&#34;tdd-개발-주기&#34;&gt;TDD 개발 주기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/167654057-23204e61-5876-43c7-9dd0-411de11caab1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tdd&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color: red&#34;&gt;Red&lt;/span&gt; : 단계에서는 실패하는 테스트 코드를 먼저 작성한다.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color: green&#34;&gt;Green&lt;/span&gt; : 단계에서는 테스트 코드를 성공시키기 위한 실제 코드를 작성한다.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color: blue&#34;&gt;Blue&lt;/span&gt; : 단계에서는 중복 코드 제거, 일반화 등의 리팩토링을 수행한다&lt;/p&gt;
&lt;p&gt;중요한 것은 실패하는 테스트 코드를 작성할 때까지 실제 코드를 작성하지 않는 것과, 실패하는 테스트를 통과할 정도의 최소 실제 코드를 작성해야하는 것이다.&lt;/p&gt;
&lt;p&gt;이를 통해 실제 코드에 대해 기대되는 바를 보다 명확하게 정의 함으로써 불필요한 설계를 피할 수 있고, 정확한 요구 사항에 집중할 수 있다.&lt;/p&gt;
&lt;h1 id=&#34;일반-개발-방식과-tdd-개발-방식의-비교&#34;&gt;일반 개발 방식과 TDD 개발 방식의 비교&lt;/h1&gt;
&lt;h2 id=&#34;일반-개발-방식&#34;&gt;일반 개발 방식&lt;/h2&gt;
&lt;p&gt;보통 개발 방식은 ‘요구사항 분석 → 설계 → 개발 → 테스트 → 배포’의 형태의 개발 주기를 갖는다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/167656932-f3a39a73-0a9a-4ca2-985e-c91255d5e642.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;이러한 방식은 소프트웨어 개발을 느리게 하는 잠재적 위험이 존재한다.&lt;/p&gt;
&lt;p&gt;그 이유는 아래와 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;소비자의 요구사항이 처음부터 명확하지 않을 수 있다.&lt;/li&gt;
&lt;li&gt;따라서 처음부터 완벽한 설계는 어렵다.&lt;/li&gt;
&lt;li&gt;자체 버그 검출 능력 저하 또는 소스코드의 품질이 저하될 수 있다.&lt;/li&gt;
&lt;li&gt;자체 테스트 비용이 증가할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이러한 문제점이 발생되는 이유는 어느 프로젝트든 초기 설계가 완벽하다고 말할 수 없기 때문이다.&lt;/p&gt;
&lt;p&gt;고객의 요구사항 또는 디자인의 오류 등 많은 외부 또는 내부 조건에 의해 재설계하여 점진적으로 완벽한 설계로 나아간다.&lt;/p&gt;
&lt;p&gt;재설계로 인해 개발자는 코드를 삽입, 수정, 삭제하는 과정에서 불필요한 코드가 남거나 중복처 될 가능성이 크다.&lt;/p&gt;
&lt;p&gt;결론적으로 이러한 코드들은 재사용이 어렵고 관리가 어려워서 유지보수를 어렵게 만든다.&lt;/p&gt;
&lt;h2 id=&#34;tdd-개발-방식&#34;&gt;TDD 개발 방식&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/167657312-05c2a4e9-46ae-4009-8091-0d343484cc16.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;TDD와 일반적인 개발 방식의 가장 큰 차이점은 테스트 코드를 작성한 뒤에 실제 코드를 작성한다는 것이다.&lt;/p&gt;
&lt;p&gt;디자인(설계) 단계에서 프로그래밍 목적을 반드시 미리 정의해야만 하고, 무엇보다 테스트해야 할지 미리 정의(테스트 케이스 작성)해야만 한다.&lt;/p&gt;
&lt;p&gt;테스트 코드를 작성하는 도중 발생하는 예외 사항(버그 및 수정사항)은 테스트 케이스에 추가하고 설계를 개선한다.&lt;/p&gt;
&lt;p&gt;이후 테스트가 통과된 코드만을 코드 개발 단계에서 실제 코드로 작성한다.&lt;/p&gt;
&lt;p&gt;이러한 반복적인 단계가 진행되면서 자연스럽게 코드의 버그가 줄어들고 소스코드는 간결해진다.&lt;/p&gt;
&lt;p&gt;또한 테스트 케이스 작성으로 인해 자연스럽게 설계가 개선됨으로 재설계 시간이 절감된다.&lt;/p&gt;
&lt;h1 id=&#34;tdd-개발방법론에-대한-결론&#34;&gt;TDD 개발방법론에 대한 결론&lt;/h1&gt;
&lt;h3 id=&#34;장점&#34;&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;개발시간이 줄어든다. 보통 처음부터 2개의 코드를 짜야한다 생각하지만 테스트 코드를 거치지 않을시 대략 10 ~ 30% 의 개발시간이 늘어난다.&lt;/li&gt;
&lt;li&gt;결함이 줄어든다. 예상치 못했던 상황들에서 벗어날수있다.&lt;/li&gt;
&lt;li&gt;유지보수 비용이 낮아진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 세가지만봐도 실무에서는 꼭 필요하다는 생각이 든다.&lt;/p&gt;
&lt;h3 id=&#34;단점&#34;&gt;단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;자신이 개발하던 방식을 많이 바꿔야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하지만 개발에 대해 아직은 적응?을 하는 단계라 적용을 빨리하고 습득할 수 있을 것 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://iwannafullstack.tistory.com/entry/TDD-%EB%9E%80&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://iwannafullstack.tistory.com/entry/TDD-%EB%9E%80&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gmlwjd9405.github.io/2018/06/03/agile-tdd.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gmlwjd9405.github.io/2018/06/03/agile-tdd.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://inpa.tistory.com/entry/QA-%F0%9F%93%9A-TDD-%EB%B0%A9%EB%B2%95%EB%A1%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://inpa.tistory.com/entry/QA-%F0%9F%93%9A-TDD-%EB%B0%A9%EB%B2%95%EB%A1%A0-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A3%BC%EB%8F%84-%EA%B0%9C%EB%B0%9C&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[알고리즘] 시간 복잡도</title>
        <link>https://heetaek.com/p/algorithm-complexity/</link>
        <pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/algorithm-complexity/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181748733-7a45d5ed-1ed3-454f-808f-19f470c19353.png" alt="Featured image of post [알고리즘] 시간 복잡도" /&gt;&lt;h1 id=&#34;알고리즘-복잡도&#34;&gt;알고리즘 복잡도&lt;/h1&gt;
&lt;p&gt;알고리즘 복잡도에는&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시간 복잡도 (알고리즘 실행 속도)&lt;/li&gt;
&lt;li&gt;공간 복잡도 (알고리즘이 사용하는 메모리 사이즈)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 두 가지가 있다.&lt;/p&gt;
&lt;p&gt;이 중에서 가장 중요한 시간 복잡도를 꼭 이해해야한다.&lt;/p&gt;
&lt;h2 id=&#34;시간복잡도&#34;&gt;시간복잡도&lt;/h2&gt;
&lt;p&gt;코딩을 하다보면 &amp;lsquo;이것보다 더 좋은방법은 없을까?&amp;rsquo; 아니면 &amp;lsquo;이게 최선인가?&amp;rsquo; 라고 고민을 많이 하게된다.&lt;/p&gt;
&lt;p&gt;이러한 고민을 하는게 &lt;strong&gt;시간복잡도&lt;/strong&gt;를 고민한다는 것과 같은 말인것같다.&lt;/p&gt;
&lt;p&gt;시간복잡도에서 가장 영향을 많이 미치는건 반복문이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;자동차로 출근하기까지의 과정을 예시로 들어보면&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;자동차 문 열기&lt;/li&gt;
&lt;li&gt;시동걸기&lt;/li&gt;
&lt;li&gt;회사까지 이동&lt;/li&gt;
&lt;li&gt;주차&lt;/li&gt;
&lt;li&gt;시동끄기&lt;/li&gt;
&lt;li&gt;자동차 문 잠그기&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;가장 많은 시간을 소요하는건 사람마다 다르겠지만 보통 &lt;code&gt;3. 회사까지 이동&lt;/code&gt; 일것이다.&lt;/p&gt;
&lt;p&gt;3번과 같이 input 이 커지면 반복문이 알고리즘 수행 시간을 지배하게된다.&lt;/p&gt;
&lt;p&gt;저런 알고리즘을 프로그램화시켜서 만들게 된다면 하드웨어나 운영체제의 영향을 받아 어떤 사람은 결과가 빠르게 나올것이고 어떤 사람은 느리게 나오는 결과가 나온다.&lt;/p&gt;
&lt;p&gt;그래서 알고리즘의 실행 시간을 알 수 있는방법이&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;빅오(Big-O)&lt;/strong&gt; 표기법이다.&lt;/p&gt;
&lt;h2 id=&#34;big-o-표기법&#34;&gt;Big-O 표기법&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Big-O(빅-오) ⇒ 점근적 상한&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;알고리즘 최악의 실행시간을 표시&lt;/li&gt;
&lt;li&gt;가장 많이, 일반적으로 사용함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Big-Ω(빅-오메가) ⇒ 점근적 하한&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Big-θ(빅-세타) ⇒ 그 둘의 평균&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;시간복잡도는 반복문이 핵심이므로 계산 표기 중 &lt;code&gt;최상&lt;/code&gt;, &lt;code&gt;평균&lt;/code&gt;, &lt;code&gt;최악&lt;/code&gt; 중
최악의 시간인 Big-O 를 중점적으로 생각하면 될 것같다.&lt;/li&gt;
&lt;li&gt;Big-O 는 &lt;code&gt;이 정도의 시간이 걸린다&lt;/code&gt; 보단 &lt;code&gt;이 정도 시간까지 걸릴 수 있다&lt;/code&gt; 를 고려해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;최선의-경우를-고려했을시&#34;&gt;최선의 경우를 고려했을시&lt;/h3&gt;
&lt;p&gt;예를 들어 최선의 경우는 1초, 평균적으로 1분 , 최악일 경우 1시간이 걸리는 알고리즘을 구현했고, 최선의 경우를 생각해 알고리즘을 100번 실행했다면 100초가 걸려야 정상인데, 1시간이 걸린다면 어디에서 문제가 발생했는지 로직의 많은 부분을 파악해야하므로 문제를 해결하는데 많은 시간이 소요된다.&lt;/p&gt;
&lt;h3 id=&#34;평균의-경우를-고려했을시&#34;&gt;평균의 경우를 고려했을시&lt;/h3&gt;
&lt;p&gt;평균의 경우는 1분이 걸리는 알고리즘이므로 100번 실행했을시 100분의 시간이 소요될거라 생각했는데,
최악의 경우가 발생하여 더 오래걸린다면 최선의 경우와 같은 고민을 하고 문제 해결에 시간이 소요된다.&lt;/p&gt;
&lt;h3 id=&#34;최악의-경우를-고려했을시&#34;&gt;최악의 경우를 고려했을시&lt;/h3&gt;
&lt;p&gt;위의 &lt;code&gt;최선&lt;/code&gt; 과 &lt;code&gt;평균&lt;/code&gt; 의 예시를 보다시피 &lt;code&gt;최악&lt;/code&gt; 의 경우가 발생하지 않기를 바라면서 코딩을 하는것보다
&lt;strong&gt;최악의 경우를 대비&lt;/strong&gt; 하며 코딩하는것이 맞다고 생각한다.
쉽게 말해 Big-O 는 &lt;strong&gt;최악의 경우에도 이 정도의 퍼포먼스는 보장&lt;/strong&gt;한다라는 것이다.&lt;/p&gt;
&lt;h2 id=&#34;big-o-표기법-종류&#34;&gt;Big-O 표기법 종류&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;O(1)&lt;/li&gt;
&lt;li&gt;O(log n)&lt;/li&gt;
&lt;li&gt;O(n)&lt;/li&gt;
&lt;li&gt;O(n2)&lt;/li&gt;
&lt;li&gt;O(2n)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/167562741-8cce73c6-78e8-4872-ab9f-9a4aed581f0a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;빅오표기법&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;o1&#34;&gt;O(1)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/167563841-a90782fb-c76b-41f6-9a74-7ddc19daf249.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;O(1)&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;O(1) 은 입력 값이 증가하더라도 시간이 늘어나지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ex)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;test&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(n &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; (n &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;결과&lt;/p&gt;
&lt;p&gt;&lt;code&gt;6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;입력 n이 어떻든 간에 반복문이 없기때문에 시간복잡도는 &lt;code&gt;1&lt;/code&gt; 이다.&lt;/p&gt;
&lt;p&gt;빅오 표기법으로는 O(1) 입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;olog-n&#34;&gt;O(log n)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/167571650-f4e9c109-6f3b-433d-ad6c-706b4ed691dc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;O(log n)&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Big-O표기법중 O(1) 다음으로 빠른 시간 복잡도를 가집니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;n 개의 크기 순으로 정렬된 배열에서 특정 값을 찾기 위해 이진 탐색&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이해하기 쉬운 게임으로 비유해 보자면 업다운을 예로 들 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;1~100 중 하나의 숫자를 플레이어1이 고른다 (30을 골랐다고 가정)&lt;/li&gt;
&lt;li&gt;50(가운데) 숫자를 제시하면 50보다 작으므로 down을 외친다&lt;/li&gt;
&lt;li&gt;1~50중의 하나의 숫자이므로 또다시 경우의 수를 절반으로 줄이기 위해 25를 제시한다&lt;/li&gt;
&lt;li&gt;25보다 크므로 up을 외친다&lt;/li&gt;
&lt;li&gt;경우의 수를 계속 절반으로 줄여나가며 정답을 찾는다&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;on&#34;&gt;O(n)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/167566439-60c0d8ba-0d95-4936-b8bf-32cf7d2d942b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;O(n)&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;O(n) 은 입력 값이 증가함에 따라 시간도 같이 증가하는 것을 의미합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;test&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    total &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, n &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; num
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; total
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;결과&lt;/p&gt;
&lt;p&gt;&lt;code&gt;6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;입력 n 에 따라 n 번을 반복문을 사용해 더해야합니다.&lt;/p&gt;
&lt;p&gt;따라서, 시간복잡도는 &lt;code&gt;1&lt;/code&gt; 빅오 표기법은 O(n) 입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;on2&#34;&gt;O(n2)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/167600859-19c920de-78ab-473d-bdff-d23264e89275.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;O(n2)&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;입력 값이 증가함에 따라 시간이 n의 제곱수의 비율로 증가하는 것을 의미합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;test&lt;/span&gt;(li):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; li:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; li:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; n,m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;반복문이 두 번 있으면 O(n2)&lt;/p&gt;
&lt;p&gt;반복문이 세 번 있으면 O(n3)&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;반복문 백 번 있으면 O(n100) 이지만, n 이 커질수록 지수가 주는 영향력이 없어지기 때문에,&lt;/p&gt;
&lt;p&gt;그냥 n2 라고 표기합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;o2n&#34;&gt;O(2n)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/167605731-f6d50fc3-4dc9-47ac-a829-4d1d57fba8b1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;O(2n)&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Big-O 표기법 중 가장 느린 시간 복잡도를 가지고있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;test&lt;/span&gt;(n):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;elif&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; fib(n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; fib(n &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;재귀 함수를 통해 구현한 피보나치 수열은 O(2n) 의 시간 복잡도를 가지고있습니다.&lt;/p&gt;
&lt;p&gt;위의 사진을 보면 차트가 가파르게 올라가는데 n 의 값이 커지면 시간 복잡도도 같이 증가하기 때문입니다.&lt;/p&gt;
&lt;p&gt;간단한 예시를 들면, 종이를 42번 접으면 두께가 지구에서 달까지 갈 만큼 커진다는 이야기가 있는데 그만한 두께를 가질 수 있는 이유는 매번 접을 때마다 2배로 늘어나기 때문입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://psychoria.tistory.com/770&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://psychoria.tistory.com/770&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.chulgil.me/algorithm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.chulgil.me/algorithm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://data-marketing-bk.tistory.com/27&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://data-marketing-bk.tistory.com/27&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[자료구조] 자료구조(Data Structure)란?</title>
        <link>https://heetaek.com/p/data-structure-algoithm/</link>
        <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/data-structure-algoithm/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181748733-7a45d5ed-1ed3-454f-808f-19f470c19353.png" alt="Featured image of post [자료구조] 자료구조(Data Structure)란?" /&gt;&lt;h1 id=&#34;자료구조-data-structure&#34;&gt;자료구조 (Data Structure)&lt;/h1&gt;
&lt;h2 id=&#34;자료구조란&#34;&gt;자료구조란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;대량의 데이터를 효율적으로 관리할 수 있는 데이터 구조&lt;/li&gt;
&lt;li&gt;특정한 상황에 놓인 문제를 해결하는 데에 특화되어있다.&lt;/li&gt;
&lt;li&gt;많은 자료구조를 알아두면, 특정 문제를 해결하는 데에 상황에 가장 적합한 자료구조를 빠르게 찾아 데이터를 정리하고 활용하여 해결할 수 있다.&lt;/li&gt;
&lt;li&gt;문제해결에 필요한 알고리즘과 밀접한 연관이 있다.&lt;/li&gt;
&lt;li&gt;결국은 개발자가 문제해결을 하기 위해 배우는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;쉽게 말해,&lt;/p&gt;
&lt;p&gt;자료는 도서관의 책들&lt;/p&gt;
&lt;p&gt;구조는 도서관의 책들을 규칙에 따라 정리한 것.&lt;/p&gt;
&lt;p&gt;이러면 조금 이해가 쉬울것같다.&lt;/p&gt;
&lt;h2 id=&#34;왜-자료구조를-배워야할까&#34;&gt;왜 자료구조를 배워야할까?&lt;/h2&gt;
&lt;p&gt;데이터는 문자, 숫자, 사진, 소리 등 실생활을 구성하고 있는 모든 값이다.
이 데이터을 이용해 컴퓨터 메모리를 어떻게 효율적으로 사용하며, 실행속도를 빠르고 정확하게 처리를 할 수 있을까에 대해 궁극적인 목표를 두고있다.&lt;/p&gt;
&lt;h2 id=&#34;데이터-관리-예시&#34;&gt;데이터 관리 예시&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;우편번호 예시&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우편번호의 5자리중 앞 3자리는 시,군, 자치구를 표기, 뒤 2자리는 일련번호로 구성&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;군대에서의 예시&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;군대에서의 XX사단, XX연대, XX연대, XX대대 ~ X소대 XXX 병사&lt;/li&gt;
&lt;li&gt;만약 위 처럼 관리가 되지않는다면 군대에있는 모든 병사를 훑어야 할 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;자료구조-분류&#34;&gt;자료구조 분류&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/167242332-27fb3394-51d7-41d5-a2a5-ebadfdf7f2fa.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;자료구조&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[CS] 컴퓨팅 사고</title>
        <link>https://heetaek.com/p/cs50-computational-thinking/</link>
        <pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/cs50-computational-thinking/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749747-9f7c5bbb-4690-44ac-8e96-15e052779094.png" alt="Featured image of post [CS] 컴퓨팅 사고" /&gt;&lt;h2 id=&#34;컴퓨터-사이언스가-왜-필요했는지&#34;&gt;컴퓨터 사이언스가 왜 필요했는지?&lt;/h2&gt;
&lt;p&gt;네이버 부스트코스에서 진행하는 &amp;lsquo;&lt;a class=&#34;link&#34; href=&#34;https://www.boostcourse.org/cs112/joinLectures/41307&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CS50&lt;/a&gt;&amp;rsquo; 이라는 강의를 수강했다.&lt;/p&gt;
&lt;p&gt;비전공자인 나에게는 컴퓨터 사이언스에 관한 지식이 필요했다.&lt;/p&gt;
&lt;h2 id=&#34;2진법-binary&#34;&gt;2진법 (binary)&lt;/h2&gt;
&lt;p&gt;우리가 일상에서 0,1,2,3,4,5,6,7,8,9 라고 표현하는것을 10진법&lt;/p&gt;
&lt;p&gt;컴퓨터는 오직 0, 1 단 두개만을 사용해 데이터를 표현을 한다.
이것을 우리는 2진법이라 부른다.&lt;/p&gt;
&lt;p&gt;예들들어, 우리가 알고있는 10진법의 숫자 &lt;code&gt;13&lt;/code&gt; 을 2진법으로 바꾸게된다면&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/162679377-9e44e9e0-d274-4e71-8b79-1d7f29214826.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;2진법&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;결과는 &lt;code&gt;1101&lt;/code&gt; 이다.&lt;/p&gt;
&lt;p&gt;(\(2^3=8\)) = 1&lt;/p&gt;
&lt;p&gt;(\(2^2=4\)) = 1&lt;/p&gt;
&lt;p&gt;(\(2^1=2\)) = 0&lt;/p&gt;
&lt;p&gt;(\(2^0=1\)) = 1&lt;/p&gt;
&lt;p&gt;1 이라고 표시한건 &lt;code&gt;True&lt;/code&gt; 라고 생각하면된다.&lt;/p&gt;
&lt;p&gt;고로 \(8 + 4 + 1 = 13\) 이 된다.&lt;/p&gt;
&lt;p&gt;여기서 궁금점이 컴퓨터는 엄청난 발전을 이뤄왔는데 지금까지도 2진법을 이용할까?&lt;/p&gt;
&lt;p&gt;2진수를 이용한 컴퓨터가 정확성이 높고, 효율적이기 때문이다.&lt;/p&gt;
&lt;p&gt;3이상의 n 진수를 사용할 경우 전기적 신호는 n가지의 경우로 구분 된다.&lt;/p&gt;
&lt;p&gt;그렇게 되면, 오류 발생량과 소요 시간 및 비용은 증가하게된다.&lt;/p&gt;
&lt;p&gt;따라서, 2진수를 기반으로 컴퓨터를 운영할때 오류를 최소화하고 효율적인 시스템 구축이 가능하다.&lt;/p&gt;
&lt;h2 id=&#34;트랜지스터&#34;&gt;트랜지스터&lt;/h2&gt;
&lt;p&gt;우리가 현재 쓰고있는 컴퓨터의 CPU 는 트랜지스터로 이루어진 반도체로 만들어졌다.
&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/162677909-0e184a2a-60f2-4298-abd1-f7623cf5a072.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;트랜지스터&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;이 트랜지스터는 0과 1이라는 전기신호로 작동을 한다.&lt;/p&gt;
&lt;p&gt;전압이 높으면 &lt;code&gt;1&lt;/code&gt;, 전압이 낮으면 &lt;code&gt;0&lt;/code&gt; 이런식으로 열고 닫히고
우리가 흔히아는 &lt;code&gt;Yes&lt;/code&gt; or &lt;code&gt;No&lt;/code&gt; 혹은 &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; 이다.&lt;/p&gt;
&lt;p&gt;물론 &lt;code&gt;AND&lt;/code&gt; 나 &lt;code&gt;OR&lt;/code&gt; 같은 논리는 CPU 에 &lt;code&gt;ALU&lt;/code&gt; 라는 산술논리장치가 있기에 가능하다.&lt;/p&gt;
&lt;h2 id=&#34;아스키코드-ascii&#34;&gt;아스키코드 (ASCII)&lt;/h2&gt;
&lt;p&gt;트랜지스터가 on/off 되면서 숫자를 표현했는데,&lt;/p&gt;
&lt;p&gt;그 숫자를 이용해 아스키코드를 통해 문자도 표현이 가능합니다.&lt;/p&gt;
&lt;p&gt;10진수를 통해 표현이 되는데
예시로 A는 &lt;code&gt;65&lt;/code&gt; , B는 &lt;code&gt;66&lt;/code&gt; 로 되어있습니다.&lt;/p&gt;
&lt;p&gt;&amp;lt;참고&amp;gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/162682569-20b36776-0ddd-4a29-b34e-43c77af4f253.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ascii&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;이 ASCII 코드로 내 이름인 &lt;code&gt;HEETAEK&lt;/code&gt;을 표현해보자면&lt;/p&gt;
&lt;p&gt;\(H = 72 = 1001000\)&lt;/p&gt;
&lt;p&gt;\(E = 69 = 1000101\)&lt;/p&gt;
&lt;p&gt;\(E = 69 = 1000101\)&lt;/p&gt;
&lt;p&gt;\(T = 84 = 1010100\)&lt;/p&gt;
&lt;p&gt;\(A = 65 = 1000001\)&lt;/p&gt;
&lt;p&gt;\(E = 69 = 1000101\)&lt;/p&gt;
&lt;p&gt;\(K = 75 = 1001011\)&lt;/p&gt;
&lt;p&gt;위와 같이 표현된다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Python] &#39;is&#39; 와 &#39;==&#39; 의 차이점</title>
        <link>https://heetaek.com/p/python-is/</link>
        <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/python-is/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151964846-19a947e0-45be-421d-9515-84a921077aeb.png" alt="Featured image of post [Python] &#39;is&#39; 와 &#39;==&#39; 의 차이점" /&gt;&lt;p&gt;기존에 무언가를 비교할때 &lt;code&gt;is&lt;/code&gt; 나 &lt;code&gt;==&lt;/code&gt; 을 똑같다 생각하고 많이 쓰고는 했다.&lt;/p&gt;
&lt;p&gt;하지만 똑같지 않았다.&lt;/p&gt;
&lt;p&gt;먼저 결론은,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is&lt;/code&gt; 는 객체를 확인&lt;/p&gt;
&lt;p&gt;&lt;code&gt;==&lt;/code&gt; 는 값을 확인&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위의 결과는 당연하다 &lt;code&gt;1&lt;/code&gt; 은 boolean 값으로 &lt;code&gt;True&lt;/code&gt; 이다.&lt;/p&gt;
&lt;p&gt;반면,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1995&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1995&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1995&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;a&lt;/code&gt; 라는 변수에 &lt;code&gt;1995&lt;/code&gt; 를 넣었을떄는 &lt;code&gt;False&lt;/code&gt; 를 반환한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is&lt;/code&gt; 는 객체를 비교하고 &lt;code&gt;==&lt;/code&gt; 는 값을 비교하기 때문이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;140307053806736&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;257&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;140307053806576&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위와 같이 서로의 메모리 주소도 다른것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;기본중에 기본인것을 모르고 지금까지 하고있었다.
이와같이 &lt;code&gt;is&lt;/code&gt; 와 &lt;code&gt;==&lt;/code&gt; 을 헷갈리지말자.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[배민서바이벌] 프로젝트 완성 및 회고</title>
        <link>https://heetaek.com/p/baemin-survival/</link>
        <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/baemin-survival/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749668-f22414d5-b252-49d0-b9b3-c24b256f57bc.png" alt="Featured image of post [배민서바이벌] 프로젝트 완성 및 회고" /&gt;&lt;h1 id=&#34;1-프로젝트&#34;&gt;1. 프로젝트&lt;/h1&gt;
&lt;h2 id=&#34;1-1-프로젝트-설명&#34;&gt;1-1. 프로젝트 설명&lt;/h2&gt;
&lt;p&gt;부트캠프를 시작하고 백엔드에 대한 전반적인 flow 가 다 그려지기도 전에 프로젝트를 시작하게 되었다.
프로젝트명은 &amp;lsquo;배민서바이벌&amp;rsquo; 이다. 기존 &lt;a class=&#34;link&#34; href=&#34;store.baemin.com&#34; &gt;배민문방구&lt;/a&gt;의 사이트를 클론하며 컨셉을 바꿔서 진행하게 되었다.&lt;/p&gt;
&lt;h2 id=&#34;1-2-팀원-설명&#34;&gt;1-2. 팀원 설명&lt;/h2&gt;
&lt;h3 id=&#34;프론트엔드&#34;&gt;프론트엔드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;한신웅 : 네비바 , 장바구니&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주지홍 : 메인페이지, 상품상세페이지&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;임채현 : 로그인/회원가입, 마이페이지&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;백엔드&#34;&gt;백엔드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;최희택 : 로그인 / 회원가입 , 상품관련, 장바구니&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-3-사용기술&#34;&gt;1-3. 사용기술&lt;/h2&gt;
&lt;h3 id=&#34;프론트엔드-1&#34;&gt;프론트엔드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HTML/CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;백엔드-1&#34;&gt;백엔드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;bcrypt&lt;/li&gt;
&lt;li&gt;JWT&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;AWS EC2&lt;/li&gt;
&lt;li&gt;AWS RDS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;협업툴&#34;&gt;협업툴&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;li&gt;Trello&lt;/li&gt;
&lt;li&gt;Slack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/154804265-c84b61cd-c29f-4ba4-81a7-090623262df6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Trello&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;프론트개발자에게 API 정의서를 전달하기 위해 Postman 이나 Gitbook 이 있는지 모르고, 구글스프레드 시트로 정리해서 전달했다. 정말 아쉬운 부분이다.
API 기능 정의가 제대로 전달 안되어 소통에 어려움이 있어 정말 아쉬운 부분이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/154804380-4316f08a-410f-432b-ab88-e78c3e8bc811.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;구글스프레드시트&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-완성물&#34;&gt;2. 완성물&lt;/h1&gt;
&lt;h2 id=&#34;2-1-nav&#34;&gt;2-1. Nav&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;로그인 완료 후 유저 닉네임, 포인트, 장바구니 수량 상단에 적용&lt;/li&gt;
&lt;li&gt;스크롤 이벤트&lt;/li&gt;
&lt;li&gt;선택 된 카테고리 CSS 적용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/0Z6xQZM/ezgif-com-gif-maker-1.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;네비바&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-회원가입로그인페이지&#34;&gt;2-2. 회원가입/로그인페이지&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;회원가입시 다양한 유효성 검사 (양식검사, 중복검사, 비밀번호 불일치 검사)&lt;/li&gt;
&lt;li&gt;검사를 통과하지 못할 경우 입력칸 아래에 경고 문구 출력&lt;/li&gt;
&lt;li&gt;양식검사, 중복검사를 모두 통과할 경우 사용가능&lt;/li&gt;
&lt;li&gt;출력 경고 문구가 남아있을 시 회원가입 불가&lt;/li&gt;
&lt;li&gt;출력 경고 문구가 사라졌을시 회원가입 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/KhVx7K8/Hnet-image.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://i.ibb.co/XxNtX9b/Hnet-image-1.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://i.ibb.co/SymVwr9/Hnet-image-2.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://i.ibb.co/FgSTNWN/ezgif-com-gif-maker-4.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-3-메인페이지&#34;&gt;2-3. 메인페이지&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메인페이지 상단 이미지슬라이드 구현&lt;/li&gt;
&lt;li&gt;분류 기준 (최신순 / 높은가격순 / 낮은가격순 )에 따른 제품 리스트 렌더링&lt;/li&gt;
&lt;li&gt;쿼리스트링을 활용하여 카테고리 페이지 구현 및 페이지네이션 기능 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/Q82y4vy/image.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://i.ibb.co/KNRcfwm/ezgif-com-gif-maker-7.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-4-상세페이지&#34;&gt;2-4. 상세페이지&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;인풋창 조건에 따른 수량입력&lt;/li&gt;
&lt;li&gt;로그인 상태일 때 장바구니로 구매버튼을 눌렀을때 장바구니로 넘어가도록 구현&lt;/li&gt;
&lt;li&gt;비 로그인 상태일 때 장바구니로 구매버튼을 눌렀을때 장바구니로 넘어가도록 구현&lt;/li&gt;
&lt;li&gt;제품 상태에 따른 상세페이지 렌더링 화면 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/yhBQNfq/image.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://i.ibb.co/6WFfM16/ezgif-com-gif-maker.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://i.ibb.co/tDCbcjt/image.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://i.ibb.co/6WFfM16/ezgif-com-gif-maker.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-5-장바구니&#34;&gt;2-5. 장바구니&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상세페이지에서 유저가 옵션과 수량을 결정한 아이템을 장바구니에 렌더링&lt;/li&gt;
&lt;li&gt;‘옵션 / 수량 변경’ 버튼 클릭시 모달 창이 뜨고 원하는 조건 변경 가능&lt;/li&gt;
&lt;li&gt;리스트에서 체크를 통해 아이템 선택 삭제 및 구매 가능&lt;/li&gt;
&lt;li&gt;구매 후 구매 완료 페이지로 이동&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/DpGsGqr/ezgif-com-gif-maker-8.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-6-프로젝트-발표&#34;&gt;2-6. 프로젝트 발표&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/154804656-3b1b0781-ba6a-437d-b305-72a1640af04e.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;발표1&#34;
	
	
&gt;
&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/154804666-5288a44e-e1ac-4cbd-b552-b772068489e3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;발표2&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;프로젝트 기간동안 정말 즐거웠지만, 마지막 발표날에는 정말 폐인이 된 모습이다.&lt;/p&gt;
&lt;h1 id=&#34;3-회고&#34;&gt;3. 회고&lt;/h1&gt;
&lt;p&gt;백엔드 개발자인 나는 나만 잘하면돼~ 라는 생각을 솔직히 어느정도는 갖고있었다.
막상 프로젝트를 시작하고나니, 나만 잘하면되는게 절대아니였다.&lt;br&gt;
소통, 협업 등 모든게 합이 잘 맞아야하는게 개발이다.&lt;br&gt;
내가 이 길이 맞나? 라는 생각이 수백번들었고, 그 순간마다 &amp;lsquo;나는 아직 20살이야 더 잘 할 수있어&amp;rsquo; 긍정적인 생각만하며, 부족한 부분을 공부하며 적용시키고 희열을 느끼고 &amp;lsquo;내가 정말 이 길이 맞구나&amp;rsquo; 라는 생각이 들게끔하였다.
그 결과는 &amp;lsquo;나는 개발자구나&amp;rsquo; 이다.&lt;br&gt;
이 결과가 나오게끔 도와준건 팀원덕도있다.
백엔드가 혼자였기에 API 를 개발하기에 정말 턱없이 부족한 시간이였지만, 항상 응원해준 우리 프론트 팀원들 덕에 더욱더 긍정적일 수 있었다.&lt;br&gt;
항구에 정박한 배는 안전하다. 그러나 배는 묶어두려고 만든게 아니다.
아무것도 안하면 실패는 없지만, 개발자는 도전하고 개척하는 존재라 생각한다.&lt;br&gt;
그런 백엔드 개발자가 되려한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/154804747-515323df-21be-495e-b0cc-929f63fd5260.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;고마운팀원&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Django] Query String 쿼리스트링</title>
        <link>https://heetaek.com/p/django-query-string/</link>
        <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/django-query-string/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/152298321-8698e3ad-b0d5-4ebb-b892-b8969f517540.png" alt="Featured image of post [Django] Query String 쿼리스트링" /&gt;&lt;h1 id=&#34;query-string&#34;&gt;Query String&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/152666203-2279cc57-d5dc-4a03-b54d-568e228bd25f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;query string&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;기존에 저는 뷰를 작성하고 특정 URL로 접속해 body에 데이터를 담아 JSON 타입으로 인코딩을 해서 통신을 했습니다.
그러나 클라이언트의 기능이 점점 추가될수록 서버 측에서는 조건에 따라 모든 API를 작성하는 것이 반복적이고 불필요한 작업이 될 수 있습니다.&lt;/p&gt;
&lt;p&gt;이러한 문제점을 해결해주는게 RESTful한 API 작성을 도와주는 &lt;code&gt;Query String&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cidk.xyz/p/restful-api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RESTfulAPI 란??&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Query String&lt;/code&gt; 은 &lt;code&gt;?&lt;/code&gt;로 시작해서 &lt;code&gt;&amp;amp;&lt;/code&gt;를 통해 여러 데이터를 동시에 전달 가능합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;views.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ProductDetailView&lt;/span&gt;(View):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;get&lt;/span&gt;(self, request, product_id):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            product &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; product_id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;             : product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;id,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;           : product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;shipping&amp;#39;&lt;/span&gt;       : product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;shipping,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;price&amp;#39;&lt;/span&gt;          : product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;price,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;is_green&amp;#39;&lt;/span&gt;       : product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;is_green,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;is_sale&amp;#39;&lt;/span&gt;        : product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;is_sale,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;category_id&amp;#39;&lt;/span&gt;    : product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;category_id,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;stock&amp;#39;&lt;/span&gt;          : product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;stock,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;discount_price&amp;#39;&lt;/span&gt; : product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;discount_price,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;          : product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;image_set&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;all()[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;img_url
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: result}, status &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;urls.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlpatterns &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/&amp;lt;int:product_id&amp;gt;&amp;#34;&lt;/span&gt;,ProductDetailView&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;as_view())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위의 코드는 기존의 상품을 가져오는 뷰&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://127.0.0.1/products/7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;라고 입력을 하면 &lt;code&gt;product_id&lt;/code&gt; 의 7번 상품을 조회해서 정보를 JSON 타입으로 주었습니다.&lt;/p&gt;
&lt;p&gt;이번에는 쿼리스트링을 적용해 볼까요?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;views.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ProductDetailView&lt;/span&gt;(View):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;get&lt;/span&gt;(self, request):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            product_id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GET&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            products &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;filter(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; product_id)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;values()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            products &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;list&lt;/span&gt;(products)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; JsonResponse({&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: products}, status &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;urls.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlpatterns &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,ProductDetailView&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;as_view())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;request.GET.get&lt;/code&gt; 으로 &lt;code&gt;id&lt;/code&gt; 7번 아이템을 가져와서 모든 정보를 가져오라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;그래서 입력을 &lt;code&gt;http://127.0.0.1:8000/products?id=7&lt;/code&gt; 이렇게 했더니&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/152666763-2c6ed01b-1f6b-4f6e-a683-ae34edd266ab.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;똑같이 정상적으로 출력이 되는 것을 확인하실 수 있습니다.&lt;/p&gt;
&lt;p&gt;아직까지도 난해한 부분이라 계속 응용을 해봐야할것같습니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Django] JsonResponse를 쓰는데 왜 request 가 필요할까</title>
        <link>https://heetaek.com/p/django-why-need-request/</link>
        <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/django-why-need-request/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/152298321-8698e3ad-b0d5-4ebb-b892-b8969f517540.png" alt="Featured image of post [Django] JsonResponse를 쓰는데 왜 request 가 필요할까" /&gt;&lt;p&gt;view 를 작성하다 클라이언트에 json 데이터를 반환을 해주다보니
&lt;code&gt;from django.http  import JsonResponse&lt;/code&gt;
JsonResponse 객체를 끌어다와서 쓰기도합니다.&lt;/p&gt;
&lt;p&gt;근데 반환을 해주는 함수의 인자에는 필요하지도 않은 &lt;code&gt;request&lt;/code&gt; 인자를 다들 포함시키길래 저도 지금껏 계속 쓰긴했습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/152293479-1ce8b1d6-7b37-4ce4-a225-d2c3ac1ca417.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;request 인자&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;그래서 지우고 테스트해보니&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/152294244-64f1378d-5cc6-47e2-a119-9561edd57728.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypeError : get() takes 1 positional argument but 2 were given&lt;/code&gt;
과 함께 500 에러를 주네요.&lt;/p&gt;
&lt;p&gt;그럼 &lt;code&gt;request&lt;/code&gt; 가 필요하다는거겠죠.&lt;/p&gt;
&lt;p&gt;알아보기위해 django 최상위 제네릭 뷰 클래스에서 알아보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generic View 란 반복적으로 사용되는 공통 부분을 패턴화해서 쉽게 추상화 해둔 것입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;View&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    Intentionally simple parent class for all views. Only implements
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    dispatch-by-method and simple sanity checking.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http_method_names &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;get&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;put&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;patch&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;head&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;options&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;trace&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        Constructor. Called in the URLconf; can contain helpful extra
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        keyword arguments, and other things.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# Go through keyword arguments, and either save their values to our&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# instance, or raise an error.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; key, value &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; kwargs&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;items():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;setattr&lt;/span&gt;(self, key, value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @classonlymethod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;as_view&lt;/span&gt;(cls, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;initkwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Main entry point for a request-response process.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; initkwargs:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; cls&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;http_method_names:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;raise&lt;/span&gt; TypeError(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;The method name &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; is not accepted as a keyword argument &amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;to &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;().&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; (key, cls&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__name__)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;hasattr&lt;/span&gt;(cls, key):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;raise&lt;/span&gt; TypeError(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;() received an invalid keyword &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;%r&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;. as_view &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;only accepts arguments that are already &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;attributes of the class.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; (cls&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__name__, key))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;dispatch&lt;/span&gt;(self, request, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# Try to dispatch to the right method; if a method doesn&amp;#39;t exist,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# defer to the error handler. Also defer to the error handler if the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# request method isn&amp;#39;t on the approved list.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;method&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;http_method_names:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            handler &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;getattr&lt;/span&gt;(self, request&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;method&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;lower(), self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;http_method_not_allowed)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            handler &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;http_method_not_allowed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; handler(request, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;as_view&lt;/code&gt; 는 뷰를 하나 만들어서 이것을 return 해주는 역할입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;문제의 &lt;code&gt;dispatch&lt;/code&gt; 는 &lt;code&gt;as_view&lt;/code&gt; 메소드 내부에서 호출됩니다.
request 메소드가 정의된 http_method_names 에 해당되면 request 에서 가져오게됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;%28https://docs.djangoproject.com/en/4.0/ref/request-response/%29&#34; &gt;공식문서&lt;/a&gt; 를 참고해봐도 JsonResponse 는 HttpRequest 의 하위 클래스네요&lt;/p&gt;
&lt;p&gt;이래서 인자에 &lt;code&gt;request&lt;/code&gt; 가 포함되어있나봅니다.&lt;/p&gt;
&lt;p&gt;Generic View 를 보다보니 공부가 많이되네요.&lt;/p&gt;
&lt;p&gt;앞으로 Generic View 에 대해 더 깊이 다뤄보고 블로그 글 작성하겠습니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Python] 리스트 컴프리헨션(List Comprehension)</title>
        <link>https://heetaek.com/p/python-list-comprehension/</link>
        <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/python-list-comprehension/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151964846-19a947e0-45be-421d-9515-84a921077aeb.png" alt="Featured image of post [Python] 리스트 컴프리헨션(List Comprehension)" /&gt;&lt;h2 id=&#34;컴프리헨션-comprehension-이란&#34;&gt;컴프리헨션 (Comprehension) 이란?&lt;/h2&gt;
&lt;p&gt;컴프리헨션이란 뭔가를 내포 , 압축의 뜻을 담고있습니다.
직관적으로 리스트를 생성하는 방법입니다.
컴프리헨션은 파이썬의 자료형 (list,dict,set) 에 대해 사용 할 수 있기 때문에 기본적인 자료형에 대해서는 공부를 하셔야합니다.
이번 블로그는 대표적인 리스트 컴프리헨션에 대해 써볼겁니다.&lt;/p&gt;
&lt;h2 id=&#34;리스트-컴프리헨션-list-comprehension&#34;&gt;리스트 컴프리헨션 (List Comprehension)&lt;/h2&gt;
&lt;h3 id=&#34;반복문&#34;&gt;반복문&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;일반적인 반복문으로 리스트 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(i)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;리스트 컴프리헨션&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[i &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;같은 결과가 출력됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;좀 더 응용해볼까요? 재밌네요&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[i &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;기존의 &lt;code&gt;i&lt;/code&gt; 에 5가 곱해져서&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[0, 5, 10, 15, 20, 25, 30, 35, 40, 45]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;라는 결과가 출력됐습니다.&lt;/p&gt;
&lt;p&gt;조금만 생각하면 정말 쉽다는겁니다.&lt;/p&gt;
&lt;p&gt;일반적인 리스트 생성할때와 리스트 컴프리헨션을 참고 해보시면&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/152177738-42e11729-60e5-4816-a0b7-6a727ef4baae.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;code&gt;a&lt;/code&gt; 의 빈 리스트가 컴프리헨션 양 옆에 달라 붙었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/152178298-74a386e4-7a9d-4940-9d66-7b0a00bcef57.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
반복문은 위의 이미지와 같이 리스트 내부에 작성합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/152178840-2ef3d10c-4361-433b-a31b-560d3f09b861.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;쉽죠? 직접 에디터 키고 해보시는걸 추천드립니다.&lt;/p&gt;
&lt;h3 id=&#34;if-조건문&#34;&gt;if 조건문&lt;/h3&gt;
&lt;p&gt;위에서 살펴본것은 반복문을 사용한 컴프리헨션입니다.
반복문 이외에도 조건문을 활용해볼수있습니다.
컴프리헨션을 쓰다 보면 이 조건문을 쓰는 게 매우 편리합니다.
if문만 쓸 때는 오른쪽에, if else문을 쓸때는 왼쪽에 씁니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[i &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;결과
&lt;code&gt;[0, 2, 4, 6, 8]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;if-else-조건문&#34;&gt;if else 조건문&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[i &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;odd&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;결과
&lt;code&gt;[0, &#39;odd&#39;, 2, &#39;odd&#39;, 4, &#39;odd&#39;, 6, &#39;odd&#39;, 8, &#39;odd&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;위의 반복문에 조건문만 들어간거라 생각하시면 간단합니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Django] QuerySet filter 제대로 알아보자</title>
        <link>https://heetaek.com/p/django-queryset-filter/</link>
        <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/django-queryset-filter/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151730971-5125d3b2-552d-4673-9d52-839d685f2593.png" alt="Featured image of post [Django] QuerySet filter 제대로 알아보자" /&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/151730971-5125d3b2-552d-4673-9d52-839d685f2593.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;filter&#34;&gt;filter&lt;/h1&gt;
&lt;p&gt;뷰를 작성하다보면 filter 를 사용해 데이터를 조회해야할때가 많습니다.&lt;/p&gt;
&lt;p&gt;전에 썻던 get() 과 filter() &lt;a class=&#34;link&#34; href=&#34;https://cidk.xyz/2022/01/20/django_orm_get_filter/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;비교글&lt;/a&gt; 을 보셨으면 조금 더 이해가 잘 되실겁니다.&lt;/p&gt;
&lt;p&gt;계속 filter 에 대해 쓰는 이유는 중요하기도 하고 저도 배워야하기 때문에..&lt;/p&gt;
&lt;h2 id=&#34;exact&#34;&gt;exact&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;exact&lt;/code&gt; 는 정확히 일치하는 데이터를 찾습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(id__exact &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;14&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Product 라는 객체에 id 가 14번인 친구를 찾으라는 거겠죠?&lt;/p&gt;
&lt;h3 id=&#34;iexact&#34;&gt;iexact&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;iexact&lt;/code&gt; 는 대소문자를 구분하지않고 정확히 일치하는 데이터를 찾습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Product&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(name__iexact &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;k9 tank&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;마찬가지로 Product 라는 객체에 name 이 &lt;code&gt;k9 tank&lt;/code&gt; 라는 친구를 찾아오라는 겁니다.&lt;/p&gt;
&lt;h2 id=&#34;contains&#34;&gt;contains&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;contains&lt;/code&gt; 는 포함하고있는 문자열을 찾습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Users&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;filter(name__contains &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;희택&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위의 코드는 &lt;code&gt;희택&lt;/code&gt; 이라는 친구를 가져오라는 겁니다.&lt;/p&gt;
&lt;h3 id=&#34;icontains&#34;&gt;icontains&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;icontains&lt;/code&gt; 는 대소문자를 구분하지않고 포함하고있는 문자열을 찾습니다.
사실 왠만하면 저는 &lt;code&gt;icontains&lt;/code&gt; 를 쓸텐데..나중에 써보고 어떤게 더 좋은지 블로그에 또 써보겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;User&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;filter(job__icontains &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;bus Driver&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 하면 버스 기사님의 정보를 다 가져올수있겠죠.&lt;/p&gt;
&lt;h2 id=&#34;in&#34;&gt;in&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;in&lt;/code&gt; 은 여러 조건을 포함할 경우 사용합니다.
list , tuple 등 iterable 한 객체를 가져올수있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Users&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;filter(id__in&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Users&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;filter(name__in&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;최희택&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;이정재&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;공유&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;gt--lt--gte--lte&#34;&gt;gt , lt , gte , lte&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;gt : &amp;gt;&lt;/li&gt;
&lt;li&gt;lt : &amp;lt;&lt;/li&gt;
&lt;li&gt;gte : &amp;gt;=&lt;/li&gt;
&lt;li&gt;lte : &amp;lt;=&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;부등호를 사용할수있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Users&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;filter(id__gt&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;startswith--istartswith&#34;&gt;startswith , istartswith&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;startswith : 조건으로 시작하는 문자열 검색&lt;/li&gt;
&lt;li&gt;istartswith: startswith 을 대소문자 구분없이 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Products&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;filter(name__startswith&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gun&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;endswith--iendswith&#34;&gt;endswith , iendswith&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;endswith : 조건으로 끝나는 문자열 검색&lt;/li&gt;
&lt;li&gt;iendswith : endswith 를 대소문자 구분없이 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Products&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;filter(name__startswith&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tank&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;range&#34;&gt;range&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;range&lt;/code&gt; 는 범위에 해당하는 object를 찾습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; datetime
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start_date &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;date(&lt;span style=&#34;color:#bd93f9&#34;&gt;2022&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end_date &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; datetime&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;date(&lt;span style=&#34;color:#bd93f9&#34;&gt;2022&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;31&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Products&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;filter(created_date__range&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(start_date, end_date))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>[Django] raise error 메시지를 json데이터로 출력하는 방법</title>
        <link>https://heetaek.com/p/django-raise/</link>
        <pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/django-raise/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151670116-ea498b04-6e79-4bd1-aaae-ad54eeb7eb5b.png" alt="Featured image of post [Django] raise error 메시지를 json데이터로 출력하는 방법" /&gt;&lt;p&gt;정규식으로 이메일과 패스워드 유효성 검증 후 , 매치가 되지않으면 &lt;code&gt;ValidationError&lt;/code&gt; 를 출력하게끔 해놓았습니다.
&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/151670116-ea498b04-6e79-4bd1-aaae-ad54eeb7eb5b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;근데 프론트에서 일부러 틀리게 집어넣어봐도 오류내용도 안뜬다고 해서 직접 포스트맨으로 테스트를 해보았는데 역시나 &lt;code&gt;ValidationError&lt;/code&gt; 를 처리를 못 해주고있었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/151670258-c8e7a23f-2724-4ace-9b0b-a115fce62b5d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;터미널에서도 &lt;code&gt;ValidationError&lt;/code&gt; 와 내부서버오류인 500코드만 띄워주네요.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/151670307-75646248-46d2-43fe-9964-6ea98be42527.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;처음에는 raise 로 에러를 주면 그게 콘솔에 찍히는 줄 알았습니다.&lt;/p&gt;
&lt;p&gt;바로 구글링을 하여 찾아보고,
참고 : &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/10307996/python-how-to-print-the-message-inside-validationerror&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/10307996/python-how-to-print-the-message-inside-validationerror&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/151670381-022dd7da-0b8b-40d9-86d9-a7d36ee4455c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValidationError&lt;/code&gt; 의 메시지를 출력해주게끔 똑같이 코드를 넣어보니 정상적으로 프론트에서도 콘솔에 찍히는걸 확인할수있었습니다.
 
 
포스트맨에서도 정상적으로 json 데이터를 받아오는걸 확인할수있습니다.
 
&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/151670455-36a55b06-2a33-43b4-b218-a38bcc8f1b5f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;이제 터미널에서도 이쁘게 에러코드가 확인됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/151670448-93297e41-2966-43e3-8fb3-91020da1e474.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;저만 몰랐던 에러처리방법..이렇게 배우고 알아갑니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Network] REST API란?</title>
        <link>https://heetaek.com/p/rest-api/</link>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/rest-api/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151964947-48b18c99-efb0-44fc-b442-ada8801e7a96.png" alt="Featured image of post [Network] REST API란?" /&gt;&lt;h1 id=&#34;rest&#34;&gt;REST?&lt;/h1&gt;
&lt;p&gt;우선 REST 에 대해서 알아야 합니다.
REST 란 웹에 존재하는 자원에 대해 고유한 URI 부여하는 방법입니다.
현재 가장 널리 알려져 사용되고있는 기술이기도 합니다.&lt;/p&gt;
&lt;p&gt;RESTfulAPI 는 앞서말한 REST의 규칙을 지키며 API 를 개발하는걸 뜻합니다.&lt;/p&gt;
&lt;p&gt;간단한 예시를 들어드리자면,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/151666397-8a8421b6-3542-4109-b299-2b259d53b898.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;구글이나 네이버를 잠깐 검색해봐도 주소창에는 뭔가의 규칙에 의해 나와있습니다.
규칙성은 없지만 구글검색엔진의 백엔드 API 네이밍 룰을 따르겠죠?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;장점 : RESTful API는 그 자체만으로도 API의 목적이 쉽게 이해가 됩니다.
&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;단점 : 위의 구글 예시와같이 표준규약이 없어서 안티패턴으로 작성되는 경우가 흔합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;h1 id=&#34;restfulapi&#34;&gt;RESTfulAPI&lt;/h1&gt;
&lt;p&gt;위에서 REST 에 대해 배워보았으니 RESTfulAPI 가 뭔지 알아야겠죠
REST 라는 원리를 이용하여 API 를 제작하는것을 RESTfulAPI 라 합니다.
모든 CRUD 기능을 POST로 처리 하는 API 혹은 URI 규칙을 올바르게 지키지 않은 API는 REST API를 사용하였지만 RESTful 하지 못한 시스템이라고 할 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;rest-api-설계-가이드&#34;&gt;REST API 설계 가이드&lt;/h1&gt;
&lt;p&gt;이제 REST 와 RESTfulAPI 가 뭔지 알았으니, REST API 작성 규칙을 알아보고 RESTful 한 API 설계 방법을 알아봅시다.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;rest-api-설계-가이드---1&#34;&gt;REST API 설계 가이드 - 1&lt;/h2&gt;
&lt;p&gt;REST API 설계 시 가장 중요한 항목은 다음의 2가지로 요약할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;URI는 정보의 자원을 표현해야 한다.&lt;/li&gt;
&lt;li&gt;자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE)로 표현한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HTTP Method&lt;/th&gt;
&lt;th&gt;역할&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;GET를 통해 해당 리소스를 조회합니다. 리소스를 조회하고 해당 도큐먼트에 대한 자세한 정보를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;POST를 통해 해당 URI를 요청하면 리소스를 생성합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;PUT를 통해 해당 리소스를 수정합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;DELETE를 통해 리소스를 삭제합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;rest-api-설계-가이드---2&#34;&gt;REST API 설계 가이드 - 2&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;URI는 동사보다는 명사를, 대문자보다는 소문자를 사용하여야 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bad Example : https://heetaek.com/Learning
Good Example : https://heetaek.com/learn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 
2. 마지막에 슬래시 ( / )를 포함하지 않습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bad Example : https://heetaek.com/post/
Good Example : https://heetaek.com/post
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 
3. 언더바( _ ) 대신 하이폰( - )을 사용합니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bad Example : https://heetaek.com/handsome_heetaek
Good Example : https://heetaek.com/handsome-heetaek
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 
4. 파일확장자는 URI에 포함하지 않습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bad Example : https://heetaek.com/heetaek.png
Good Example : https://cidk.xyz/photo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 
5. 행위를 포함하지 않습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bad Example : https://heetaek.com/delete-post/3
Good Example : https://heetaek.com/post/3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference: &lt;a class=&#34;link&#34; href=&#34;https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>[Django] 참조(Foreign Key) 역참조(related_name)</title>
        <link>https://heetaek.com/p/django-related-name/</link>
        <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/django-related-name/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/150625177-c20926d0-c57a-4ebd-81ef-ae67694fc94b.png" alt="Featured image of post [Django] 참조(Foreign Key) 역참조(related_name)" /&gt;&lt;h1 id=&#34;참조-foreign-key&#34;&gt;참조 (Foreign Key)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;정참조라하기도 하고 &lt;code&gt;Foreign Key&lt;/code&gt; 를 가지고있는 테이블을 가져올 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/150625177-c20926d0-c57a-4ebd-81ef-ae67694fc94b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 모델이 있다고 가정할때&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Movie&lt;/span&gt;(models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Model): &lt;span style=&#34;color:#6272a4&#34;&gt;# 영화&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    actor [&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ForeignKey(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;, on_delete &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; CASCADE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    title &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Actor&lt;/span&gt;(models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Model): &lt;span style=&#34;color:#6272a4&#34;&gt;# 영화배우&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name [&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;영화(Movie) 라는 모델에서 영화배우(Actor)를 불러들이는 것을 &amp;lsquo;참조&amp;rsquo; 라 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Movie&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) [&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;] [&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]  [&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;actor&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;이정재&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;반대로 Actor 객체는 Movie 를 역참조 하고 있으므로 바로 접근이 불가능합니다.&lt;/p&gt;
&lt;p&gt;역참조 관계에 있을때는 아래의 역참조 세션에서 확인해봅시다.&lt;/p&gt;
&lt;h1 id=&#34;역참조-related_name&#34;&gt;역참조 (related_name)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;정참조하고있는 클래스에서 어떤 명칭으로 거꾸로 호출당할지를 정해주는 이름입니다,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;정참조했을때와 같은 모델인데 Movie 클래스의 actor 에 &lt;code&gt;related_name = &#39;my_related&#39;&lt;/code&gt; 가 생겼습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Movie&lt;/span&gt;(models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Model): &lt;span style=&#34;color:#6272a4&#34;&gt;# 영화&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    actor &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ForeignKey(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;, on_delete &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; CASCADE, related_name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;my_related&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    title &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Actor&lt;/span&gt;(models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Model): &lt;span style=&#34;color:#6272a4&#34;&gt;# 영화배우&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;CharField(max_length&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Actor 객체의 인스턴스와 연결되어있는 Movie 객체를 불러올때 &lt;code&gt;my_related&lt;/code&gt; 라는 이름을 부르기 위해서입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Actor&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;objects&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;my_related&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;all()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;QuerySet[&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Object Movie Object(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Object Movie Object(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런식으로 진행됩니다.&lt;/p&gt;
&lt;h2 id=&#34;역참조가-꼭-필요할때&#34;&gt;역참조가 꼭 필요할때&lt;/h2&gt;
&lt;p&gt;눈치채셨을분들도 계시겠지만&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Movie&lt;/span&gt;(models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Model): &lt;span style=&#34;color:#6272a4&#34;&gt;# 영화&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    actor  &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ForeignKey(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;, on_delete &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; CASCADE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    actor2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ForeignKey(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;, on_delete &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; CASCADE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;한 클래스에서 서로 다른 두 컬럼이 같은 테이블을 참조하는 경우&lt;/p&gt;
&lt;p&gt;&lt;code&gt;related_name&lt;/code&gt; 으로 구분해서 호출할 수 있게끔 작성해줍니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Movie&lt;/span&gt;(models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Model): &lt;span style=&#34;color:#6272a4&#34;&gt;# 영화&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    actor  &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ForeignKey(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;, on_delete &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; CASCADE, related_name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;my_related&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    actor2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ForeignKey(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;, on_delete &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; CASCADE, related_name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;your_related&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;머리가 나빠서 이해하는데 꽤 오래걸렸습니다 .&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Django] ORM get(), filter() 비교</title>
        <link>https://heetaek.com/p/django-orm-get-filter/</link>
        <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/django-orm-get-filter/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151730971-5125d3b2-552d-4673-9d52-839d685f2593.png" alt="Featured image of post [Django] ORM get(), filter() 비교" /&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/151730971-5125d3b2-552d-4673-9d52-839d685f2593.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;시작&#34;&gt;시작&lt;/h1&gt;
&lt;p&gt;먼저 python console 을 실행해줍니다.
프로젝트 manage.py 가 있는 디렉토리에서
&lt;code&gt;python manage.py shell&lt;/code&gt; 을 입력해주면 콘솔이 실행됩니다.
저는 models 에 User 라는 클래스를 만들어주어서&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/150283502-e9aafe94-75e6-42e3-9e1a-57ce4ef8ed60.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;임포트 해주겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;get&#34;&gt;get()&lt;/h2&gt;
&lt;p&gt;get() 은 객체 하나만 반환을 해줍니다.
그래서 get() 의 경우는 unique 한 값을 가지고 검색을 하는것이 좋습니다.&lt;/p&gt;
&lt;p&gt;예를들어 id 가 1번값을 가지고있는 데이터를 가지고오고싶을때는 아래의 사진처럼
&lt;code&gt;User.objects.get(id=1)&lt;/code&gt; 이런식으로 가져오시면 됩니다.
&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/150283114-1b1add6e-2ff6-48f1-8a4e-d2002385afba.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;get()&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;쿼리에 맞는 결과가 없을시에는&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/150283762-b21cc87a-a220-46c4-ad83-8d742e185907.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DoesNotExist&lt;/code&gt; 라는 오류가 발생하게됩니다.&lt;/p&gt;
&lt;p&gt;왜냐하면 제 데이터베이스에는 id가 1번인 데이터가 없기때문입니다.&lt;/p&gt;
&lt;p&gt;정상적으로 데이터를 가져오면&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/150293731-113682a3-a668-4e12-ae81-58ef2e7fdb91.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;output 으로 어떠한 객체를 가져왔는지 &lt;code&gt;&amp;lt;User: User object (53)&amp;gt;&lt;/code&gt; 이라고 표시됩니다.&lt;/p&gt;
&lt;h2 id=&#34;filter&#34;&gt;filter()&lt;/h2&gt;
&lt;p&gt;filter() 를 이용해 검색을 하면 여러개의 객체를 포함하는 QuerySet 을 반환해줍니다.
filter()의 특징은 특정 조건을 만족하는 객체를 검색할때 사용합니다.
QuerySet 이란 DB 에서 전달받은 객체들의 모음(List) 입니다.
DB에서는 row 에 해당합니다.&lt;/p&gt;
&lt;p&gt;예를 들어,
&lt;code&gt;asdasd&lt;/code&gt; 라는 이름을 가진 사람을 찾고싶어서&lt;/p&gt;
&lt;p&gt;&lt;code&gt;User.objects.filter(name=&amp;quot;asdasd&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;filter 를 사용해 찾아보았습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/150294830-9ac1b9ca-d0eb-45b4-8285-b3833f517ac0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;QuerySet 으로 59번과 61번 객체를 가져왔습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/150294657-dc314fba-a745-4d37-a118-19feccfa078c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;제 테이블에는 59, 61번에 asdasd 라는 동명이인이 있기에 두개의 객체가 반환이 됐던겁니다.&lt;/p&gt;
&lt;p&gt;이런식으로 shell 을 직접 두드려보면서 확인하시면 훨씬 쉽게 접근할수있습니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Python] 데코레이터(Decorator)와 클로저(Clousure) 활용</title>
        <link>https://heetaek.com/p/python-decorator/</link>
        <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/python-decorator/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151964846-19a947e0-45be-421d-9515-84a921077aeb.png" alt="Featured image of post [Python] 데코레이터(Decorator)와 클로저(Clousure) 활용" /&gt;&lt;h2 id=&#34;데코레이터decorator란&#34;&gt;데코레이터(decorator)란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;함수 앞뒤에 기능을 추가해서 손쉽게 함수를 활용할 수 있는 기법&lt;/li&gt;
&lt;li&gt;클로저 (clousure)를 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;함수 위에 @ 붙어있는 모습이 데코레이터입니다.
특이하죠? 그래도 알아두어야 나중에 이러한 코드를 볼때 이해할수있습니다.&lt;/p&gt;
&lt;h3 id=&#34;데코레이터-활용&#34;&gt;데코레이터 활용&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@decorator_func
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;function&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@붙은게 데코레이터&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ex) 일반적인 함수&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;login&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;희택님이 로그인하셨습니다.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;login()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;희택님이 로그인하셨습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이게 일반적인 함수입니다.&lt;/p&gt;
&lt;p&gt;ex) 데코레이터를 붙인 함수&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 데코레이터 함수&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;decorator_func&lt;/span&gt;(func):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;wrapper&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;나는 데코레이터&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; wrapper
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 일반함수에 데코레이터를 붙힌 함수&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@decorator_func
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;login&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;희택님이 로그인하셨습니다.&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;login()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;나는 데코레이터
희택님이 로그인하셨습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;클로저를-이용한-데코레이터&#34;&gt;클로저를 이용한 데코레이터&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 데코레이터 함수 정의&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;decorator_func&lt;/span&gt;(func):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;wrapper&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;나는 데코레이터&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    func()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; wrapper
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# 데코레이터를 줄 함수&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;login&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;희택님이 로그인하셨습니다.&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;login()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;희택님이 로그인하셨습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;클로저 활용&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deco_func &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; decorator_func(login)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deco_func()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;나는 데코레이터
희택님이 로그인하셨습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;간단하죠?&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Python] 세트(Set) 와 딕셔너리(Dictonary) 차이, 리스트(List) 와 튜플(Tuple) 의 차이</title>
        <link>https://heetaek.com/p/python-list-set-dict/</link>
        <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/python-list-set-dict/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151964846-19a947e0-45be-421d-9515-84a921077aeb.png" alt="Featured image of post [Python] 세트(Set) 와 딕셔너리(Dictonary) 차이, 리스트(List) 와 튜플(Tuple) 의 차이" /&gt;&lt;h2 id=&#34;세트set-와-딕셔너리dictonary의-차이&#34;&gt;세트(Set) 와 딕셔너리(Dictonary)의 차이&lt;/h2&gt;
&lt;p&gt;딕셔너리는 짧게 dict 라 칭하겠습니다.&lt;/p&gt;
&lt;p&gt;먼저 set 와 dict 의 공통점은 &lt;code&gt;{}&lt;/code&gt; 중괄호를 쓴다는 점 입니다.&lt;/p&gt;
&lt;p&gt;비슷하다고 생각하실수도있는데&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;제일 큰 차이는 dict 는 &lt;code&gt;{&amp;quot;key&amp;quot; : &amp;quot;value&amp;quot; , &amp;quot;이름&amp;quot; : &amp;quot;최희택&amp;quot;, &amp;quot;나이&amp;quot; : 28}&lt;/code&gt; 이런식으로 key 와 value 값을 가질수있고, set 는 key 와 value 가 없이 &lt;code&gt;{&amp;quot;최희택&amp;quot;,&amp;quot;바보&amp;quot;,28,23}&lt;/code&gt; 이렇게 값만 가질수있습니다.
&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;dict 는 key 값은 변경할수없고, value값만 변경이 가능합니다.
&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;set는 변경이 가능한 리스트형입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;리스트list-와-튜플tuple의-차이&#34;&gt;리스트(List) 와 튜플(Tuple)의 차이&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;list 는 대괄호 &lt;code&gt;[]&lt;/code&gt; tuple 은 소괄호를 사용 &lt;code&gt;()&lt;/code&gt;
&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;list 는 값을 변경 ,추가, 삭제가 가능하고 tuple 은 불가능 (다만 간단하게 수정하지않아도 되는 데이터는 메모리를 적게 사용하는 tuple 을 사용하는게 유리)&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>[Python] 클로저(Closure)</title>
        <link>https://heetaek.com/p/python-closure/</link>
        <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/python-closure/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151964846-19a947e0-45be-421d-9515-84a921077aeb.png" alt="Featured image of post [Python] 클로저(Closure)" /&gt;&lt;h1 id=&#34;클로저에-대해&#34;&gt;클로저에 대해.&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;함수와 해당 함수가 가지고있는 데이터를 복사, 저장해서 별도 함수로 사용&lt;/li&gt;
&lt;li&gt;처음에 보면 이해하기가 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;p&gt;제곱(power)로 예시&lt;/br&gt;
중간에 있는 &lt;code&gt;closure_power1&lt;/code&gt; , &lt;code&gt;closure_power2&lt;/code&gt; , &lt;code&gt;closure_power3&lt;/code&gt; 가 closure 입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;calc_power&lt;/span&gt;(x):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;power&lt;/span&gt;(y):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; power
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;closure_power1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; calc_power(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;closure_power2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; calc_power(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;closure_power3 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; calc_power(&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(closure_power1(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(closure_power2(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(closure_power3(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;결과&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;사실 봐도 이해가 안되니 다른 쉬운 예시로 이해해봅시다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;outer_func&lt;/span&gt;(num):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;inner_func&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(num)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; inner_func
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;closure_func &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; outer_func(&lt;span style=&#34;color:#bd93f9&#34;&gt;58&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;closure_func()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;결과는? &lt;code&gt;58&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;closure_func = outer_func(58) 에서 outer_func 함수는 호출 종료&lt;/li&gt;
&lt;li&gt;closure_func() 은 결국 inner_func 함수를 호출&lt;/li&gt;
&lt;li&gt;outer_func(58) 호출 종료시 num 값은 없어졌으나, closure_func()에서 inner_func이 호출되면서 이전의 num값(58)을 사용함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그럼 closure 는 언제 사용하나요?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;제공해야할 기능이 적은경우 , closure 를 사용&lt;/li&gt;
&lt;li&gt;반대로 제공해야할 기능이 많은 경우 , class 를 사용하여 구현&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[Git] 기초적인 사용방법</title>
        <link>https://heetaek.com/p/git-basic/</link>
        <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/git-basic/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151965003-3811163e-5f5d-4f16-a634-e617c786e345.png" alt="Featured image of post [Git] 기초적인 사용방법" /&gt;&lt;h1 id=&#34;git-이-왜-필요한가요&#34;&gt;Git 이 왜 필요한가요?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;예를 들어 자동차를 만든다할때 &amp;lsquo;바퀴&amp;rsquo;, &amp;lsquo;엔진&amp;rsquo; , &amp;lsquo;문짝&amp;rsquo; , &amp;lsquo;시트&amp;rsquo; 등등 세분화하여 어떻게 제작이 되었는지 세세하게 기록을 할 수 있는 프로그램입니다. 치명적인 실수를 했을시에 과거로 되돌아가서 수정을 할 수도 있습니다.
 &lt;/li&gt;
&lt;li&gt;VCS(Version Control System) 버전 관리 시스템으로 역할을 나눠 협업을 할 수 있습니다.
 &lt;/li&gt;
&lt;li&gt;처음에는 난해하지만 이해하려하지말고 개인 레파지토리를 생성후 아무 파일이나 올려보시면서 연습하시는걸 추천드립니다.
 &lt;/li&gt;
&lt;li&gt;특히나 개발자에게는 필수인 git 입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-시작하기&#34;&gt;Git 시작하기&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;작업중인 폴더에 &lt;code&gt;git init&lt;/code&gt; 명령어를 입력하면 &lt;code&gt;.git&lt;/code&gt; 이라는 숨겨진폴더가 생성되고, CCTV 가 하나 설치되서 그 폴더에서 무엇을 하는지 지켜본다고 보시면 편하다다.&lt;/p&gt;
&lt;h2 id=&#34;git-branch-생성&#34;&gt;Git branch 생성&lt;/h2&gt;
&lt;p&gt;branch는 나뭇가지입니다.
그럼 기둥은 뭔가요?
처음 생성될때 &lt;code&gt;master&lt;/code&gt; 브랜치가 기둥이라 생각하시면됩니다.
요즘은 &lt;code&gt;master&lt;/code&gt; 대신 &lt;code&gt;main&lt;/code&gt; 이라고 많이 생성합니다.
그 이유는 &lt;code&gt;master&lt;/code&gt; 가 노예제도의 주인님을 연상케 한다해서 &lt;code&gt;main&lt;/code&gt; 을 사용한다하니
그렇게 사용해주도록 합시다.
&lt;img src=&#34;https://wac-cdn.atlassian.com/dam/jcr:389059a7-214c-46a3-bc52-7781b4730301/hero.svg?cdnVersion=167&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;git branch&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;git-branch-생성방법&#34;&gt;Git branch 생성방법&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git branch -M main&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-M&lt;/code&gt; 옵션은 브랜치를 rename 하는 옵션입니다.
위에도 설명드렸다시피 &lt;code&gt;master&lt;/code&gt; 를 안쓴다했으니 저희는 &lt;code&gt;main&lt;/code&gt; 으로 변경하겠습니다.&lt;/p&gt;
&lt;p&gt;생성이 완료되면 &lt;code&gt;git branch&lt;/code&gt; 라는 명령어로 확인할수있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; 에서 &lt;code&gt;main&lt;/code&gt; 으로 변경된걸 확인할수있습니다.&lt;/p&gt;
&lt;h4 id=&#34;feature-branch-생성방법&#34;&gt;Feature branch 생성방법&lt;/h4&gt;
&lt;p&gt;Feature branch 란 게임에서 많이 보셨을것같은데
베타 , 얼리액세스 , ver1 , ver2 등등의 네이밍으로 버전을 관리합니다.
&lt;code&gt;main&lt;/code&gt; branch는 실제 서비스 되고있는 branch 이고 지금 만들 feature branch 는 기능을 업데이트하는
버전관리 branch 라 생각하시면 편합니다.
방금 저희는 &lt;code&gt;main&lt;/code&gt; 이란 기둥을 만들었습니다.
feature branch 만드는법도 간단합니다.&lt;/p&gt;
&lt;p&gt;예를들어 로그인 기능을 개발하고싶으면
&lt;code&gt;git branch feature/login&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;회원가입 기능을 개발하고싶으면
&lt;code&gt;git branch feature/signup&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이런식으로 branch 를 생성하시면 됩니다.&lt;/p&gt;
&lt;h3 id=&#34;branch-이동-및-삭제&#34;&gt;branch 이동 및 삭제&lt;/h3&gt;
&lt;p&gt;branch 를 이동하고싶을땐
&lt;code&gt;git checkout {이동하고싶은 branch 명}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ex) &lt;code&gt;main&lt;/code&gt; &amp;ndash;&amp;gt; &lt;code&gt;feature/login&lt;/code&gt;
&lt;code&gt;git check feature/login&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;branch 를 삭제하고싶을땐&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git branch -d {삭제하고싶은 branch 명}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ex) login branch 를 삭제하고싶을때&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git branch -d feature/login&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;삭제가 잘되었는지 확인&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-commit&#34;&gt;Git commit&lt;/h2&gt;
&lt;p&gt;commit 이란?
자신이 한 작업의 기록을 남기고 그 기록물에 메시지를 남기는 작업입니다.
다만 주의하실점은 commit 메시지를 작성할때는 일관성있게 작성해야합니다.&lt;/p&gt;
&lt;h4 id=&#34;1-commit-type&#34;&gt;1. Commit Type&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;feat : 새로운 기능 추가&lt;/li&gt;
&lt;li&gt;fix : 버그 수정, 기능 수정&lt;/li&gt;
&lt;li&gt;docs : 문서 수정&lt;/li&gt;
&lt;li&gt;refactor : 코드 리팩토링 (변수명 수정 등)&lt;/li&gt;
&lt;li&gt;test : 테스트 코드, 리팩토링 테스트 코드 추가&lt;/li&gt;
&lt;li&gt;style : 코드 스타일 변경, 코드 자체 변경이 없는 경우&lt;/li&gt;
&lt;li&gt;remove : 파일 또는 코드, 리소스 제거&lt;/li&gt;
&lt;li&gt;resource : 이미지 리소스, prefab 등의 코드와 상관없는 리소스 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2commit-주제&#34;&gt;2.Commit 주제&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;제목은 50자를 넘기지 않고, 대문자로 작성하고 마침표를 붙이지 않습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex) 이런식으로 커밋 메시지를 작성하시면됩니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;feat : Add bcrypt feature
feat : Add user models
fix : Fix type in models
remove : Remove white space
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;나쁜 예시&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;test
수정1
수정2
fix error
다시
다시 push
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;메시지를 보고 무엇을 했는지 알 수 없게 메시지를 작성하면 적절하지않습니다.&lt;/p&gt;
&lt;h4 id=&#34;3-commit-내용변경&#34;&gt;3. Commit 내용변경&lt;/h4&gt;
&lt;p&gt;예를들어 commit 을 했는데
&lt;code&gt;feat : Add my featuressss&lt;/code&gt;
오타가 나있다면? 당황스럽겠죠&lt;/p&gt;
&lt;p&gt;그럴때 commit 내용을 수정할수있는 명령어인
&lt;code&gt;git commit --amend&lt;/code&gt; 를 입력하면 수정할수있습니다.
참고로 터미널로 git 을 사용하신다면 vim 에디터로 수정해야합니다. (제 맥북은 그렇게 합니다.)&lt;/p&gt;
&lt;h2 id=&#34;github원격저장소-에-push&#34;&gt;Github(원격저장소) 에 push&lt;/h2&gt;
&lt;p&gt;로컬(Local) 에서 작업을 끝내셨으면 원격(Remote) 저장소에 올려야겠죠
&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/149868998-cbab5f7a-0749-46de-863b-795587fdf17a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;github repository&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;github 에 접속하셔서 레파지토리를 생성하시면 위의 이미지처럼 나옵니다.
하나하나 따라하셔도 상관없지만
저희는 README.md 파일만 추가하는게 아니라
작업한 모든 파일을 추가할거기에
&lt;code&gt;git add -A&lt;/code&gt; 나 &lt;code&gt;git add .&lt;/code&gt; 명령어로 프로젝트 폴더에 수정한 파일이나 추가한 파일들을 추가해줍니다.&lt;/p&gt;
&lt;p&gt;이후 , 배웠던 commit 메시지를 남겨주시고&lt;/p&gt;
&lt;p&gt;브랜치를 생성해줍니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote add origin https://github.com/sosolyht/test.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;origin 은 origin 이라는 이름으로 원격저장소가 등록되었다는 의미입니다.&lt;/p&gt;
&lt;p&gt;이후 &lt;code&gt;git push -u origin main&lt;/code&gt; 명령어를 입력하시면&lt;/p&gt;
&lt;p&gt;github 에 push 가 된걸 확인하실수있습니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Python] 함수 인자와 가변인수(*args), 가변 키워드 인수(**kwargs) 에 대해</title>
        <link>https://heetaek.com/p/python-function-parameter/</link>
        <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/python-function-parameter/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151964846-19a947e0-45be-421d-9515-84a921077aeb.png" alt="Featured image of post [Python] 함수 인자와 가변인수(*args), 가변 키워드 인수(**kwargs) 에 대해" /&gt;&lt;h2 id=&#34;default-value-parameter를-non-default-value-parameter-앞에-정의-하면-안-되는-이유&#34;&gt;default value parameter를 non-default value parameter 앞에 정의 하면 안 되는 이유&lt;/h2&gt;
&lt;p&gt;non-default value parameter 는 정해져있지않은 인자 타입입니다.
가장 흔하게 쓰는 타입입니다.
함수를 호출할때 인자를 순서대로 넣어주어야합니다.&lt;/p&gt;
&lt;p&gt;아래의 예시로 &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;age&lt;/code&gt; 를 호출하기 위해선 heetaek 이란 함수에 순차적으로 &lt;code&gt;name = &amp;quot;최희택&amp;quot;&lt;/code&gt; , &lt;code&gt;age = 28&lt;/code&gt; 이 될 수 있도록 집어넣어주니&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;heetaek&lt;/span&gt;(name,age):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(name,age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; name, age
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;heetaek(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;최희택&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;28&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;결과는&lt;/p&gt;
&lt;p&gt;&lt;code&gt;최희택 28&lt;/code&gt; 이라고 출력 됩니다.&lt;/p&gt;
&lt;p&gt;그에 반해 deault value parameter 는 미리 정해진 인자값을 넣어줍니다,&lt;/p&gt;
&lt;p&gt;예시&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;heetaek&lt;/span&gt;(name, age&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;28&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(name, age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; name, age
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;heetaek(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;최희택&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;미리 &lt;code&gt;age&lt;/code&gt; 라는 인자에 제 나이인 &lt;code&gt;28&lt;/code&gt; 을 넣어주고
함수호출할때 &lt;code&gt;name&lt;/code&gt; 만 넣어주니
정상적으로 &lt;code&gt;최희택 28&lt;/code&gt; 을 반환해주는것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;앞에 제목을 보셨다시피 defaut value 를 왜 앞에 정의하면 안되는지 느낌이 오시지않나요?&lt;/p&gt;
&lt;p&gt;만약 &lt;code&gt;age&lt;/code&gt; 에 있는 &lt;code&gt;28&lt;/code&gt; 을 빼고 &lt;code&gt;name = &amp;quot;최희택&amp;quot;&lt;/code&gt; 이라고 써져있었으면&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SyntaxError: non-default argument follows default argument&lt;/code&gt; 라고 오류가 발생하게 됩니다.&lt;/p&gt;
&lt;p&gt;앞에 기본값을 정해버리면 뒤에있는 인자는 아무런 값을 할당받지 못해서 오류가 발생하는겁니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  File &amp;#34;/Users/ht/Desktop/Python/test.py&amp;#34;, line 1
    def heetaek(name=&amp;#34;최희택&amp;#34;, age):
                                  ^^^
SyntaxError: non-default argument follows default argument
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;!-- toc --&gt;
&lt;h2 id=&#34;가변인수args-와-위치인수&#34;&gt;가변인수(*args) 와 위치인수&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*args&lt;/code&gt; 란 언제 변할지 모르는 가변 인자입니다
아래의 예시는 틀린 예시입니다.
아래의 예시 그대로 실행하게되면 &lt;code&gt;TypeError: func_param_with_var_args() missing 1 required keyword-only argument: &#39;age&#39;&lt;/code&gt; 라는 에러가 발생하게됩니다.
&lt;code&gt;age&lt;/code&gt; 라는 인자를 찾지 못했다는겁니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;func_param_with_var_args&lt;/span&gt;(name, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args, age):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;args=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func_param_with_var_args(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;정우성&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;01012341234&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;seoul&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러면 &lt;code&gt;*args&lt;/code&gt; 를 &lt;code&gt;age&lt;/code&gt; 뒤로 넣고 실행해보겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;func_param_with_var_args&lt;/span&gt;(name, age, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;args=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func_param_with_var_args(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;정우성&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;01012341234&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;seoul&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;인자의 순서에 맞게 &lt;code&gt;name = &amp;quot;정우성&amp;quot;&lt;/code&gt; , &lt;code&gt;age = 20&lt;/code&gt; , 나머지 args 에는 &lt;code&gt;args = &amp;quot;01012341234&amp;quot;, &amp;quot;seoul&amp;quot;&lt;/code&gt; 가 제대로 호출할수있도록 수정해주었습니다.&lt;/p&gt;
&lt;p&gt;결과는&lt;/p&gt;
&lt;p&gt;&lt;code&gt;name=정우성 args=(&#39;01012341234&#39;, &#39;seoul&#39;) age=20&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;정상적으로 원하던 값이 출력되었네요.&lt;/p&gt;
&lt;p&gt;이와 같이 가변인수는 기존의 인자가 먼저 출력될수있게끔 하고 이후 가변인자가 출력할수있게 순서를 정확히 배치하는것이 중요합니다.&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;h2 id=&#34;가변-키워드-인수kwargs&#34;&gt;가변 키워드 인수(**kwargs)&lt;/h2&gt;
&lt;p&gt;아래의 예시를 그대로 실행하면 &lt;code&gt;def func_param_with_kwargs(name, age, **kwargs, address=0): ^ SyntaxError: invalid syntax&lt;/code&gt; 이와 같은 오류가 발생하게됩니다.&lt;/p&gt;
&lt;p&gt;가변인수(*args) 와 위치인수를 보셨으면 아시겠지만 의도와 위치 선정이 중요합니다.&lt;/p&gt;
&lt;p&gt;아래의 코드의 의도는 &lt;code&gt;mobile&lt;/code&gt; 에다가 &lt;code&gt;01012341234&lt;/code&gt; 를 넣고 &lt;code&gt;address&lt;/code&gt; 에는 &lt;code&gt;seoul&lt;/code&gt; 을 넣고싶은 의도가 보입니다.&lt;/p&gt;
&lt;p&gt;하지만 &lt;code&gt;name&lt;/code&gt;,&lt;code&gt;age&lt;/code&gt; 이후에는 가변 키워드 인수가 &lt;code&gt;address&lt;/code&gt; 앞에 있어 &lt;/br&gt;
호출 시 &lt;code&gt;mobile&lt;/code&gt; 이 들어가야 하는지 &lt;code&gt;address=&amp;quot;seoul&lt;/code&gt; 이 들어가야하는지 모르기때문에 오류가 발생합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;func_param_with_kwargs&lt;/span&gt;(name, age, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs, address&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;kwargs=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;address=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(address)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func_param_with_kwargs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;정우성&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;, mobile&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;01012341234&amp;#34;&lt;/span&gt;, address&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;seoul&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;원하는 의도로 수정해보면&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;func_param_with_kwargs&lt;/span&gt;(name, age, address&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;kwargs=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;address=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(address)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func_param_with_kwargs(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;정우성&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;, mobile&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;01012341234&amp;#34;&lt;/span&gt;, address&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;seoul&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;name=정우성 age=20 kwargs={&#39;mobile&#39;: &#39;01012341234&#39;} address=seoul&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이렇게 정상적으로 호출이 되어 출력되는것을 확인하실수있습니다.&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;h2 id=&#34;위치-인수와-키워드-가변-키워드-인수-kwargs&#34;&gt;위치 인수와 키워드 가변 키워드 인수 (**kwargs)&lt;/h2&gt;
&lt;p&gt;아래의 코드를 실행해봅시다.
&lt;code&gt;def mixed_params(name=&amp;quot;아이유&amp;quot;, *args, age, **kwargs, address): ^ SyntaxError: invalid syntax&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;address&lt;/code&gt; 부분에서 &lt;code&gt;SyntaxError: invalid syntax&lt;/code&gt; 라는 오류가 발생합니다.
문법상 오류가 난겁니다.&lt;/p&gt;
&lt;p&gt;위의 예시들과같이 위치인수를 정확히 이해하셨다면 해결하실수있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;mixed_params&lt;/span&gt;(name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;아이유&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args, age, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs, address):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;args=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;kwargs=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;address=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(address)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mixed_params(&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;정우성&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;01012341234&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;male&amp;#34;&lt;/span&gt; ,mobile&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;01012341234&amp;#34;&lt;/span&gt;, address&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;seoul&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;저의 해결방법은 &lt;code&gt;address&lt;/code&gt; 를 가변 키워드 인수에 집어넣고 출력하는 부분을 삭제하였습니다.
그리고, &lt;code&gt;age&lt;/code&gt; 를 정상적으로 호출받을수있게 인자를 맨 앞으로 당겨놓고 마지막 부분에 &lt;code&gt;*args&lt;/code&gt; , &lt;code&gt;**kwargs&lt;/code&gt; 를 넣었더니&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;mixed_params&lt;/span&gt;(age , name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;아이유&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;args=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(age)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;kwargs=&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mixed_params(&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;정우성&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;01012341234&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;male&amp;#34;&lt;/span&gt; ,mobile&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;01012341234&amp;#34;&lt;/span&gt;, address&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;seoul&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;name=정우성 args=(&#39;01012341234&#39;, &#39;male&#39;) age=20 kwargs={&#39;mobile&#39;: &#39;01012341234&#39;, &#39;address&#39;: &#39;seoul&#39;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;정상적으로 출력이 되었습니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[CSS] position 속성과 display 속성에 대해</title>
        <link>https://heetaek.com/p/css-position-%EC%86%8D%EC%84%B1%EA%B3%BC-display-%EC%86%8D%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%B4/</link>
        <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/css-position-%EC%86%8D%EC%84%B1%EA%B3%BC-display-%EC%86%8D%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%B4/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749810-2ae81f03-b6f1-4c2f-b393-98079352d76d.png" alt="Featured image of post [CSS] position 속성과 display 속성에 대해" /&gt;&lt;h2 id=&#34;css-position-요약&#34;&gt;CSS position 요약&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; 속성을 통해 문서 상에 요소를 배치하는 방법
&lt;/br&gt;
&lt;code&gt;top&lt;/code&gt;,&lt;code&gt;right&lt;/code&gt;,&lt;code&gt;bottom&lt;/code&gt;,&lt;code&gt;left&lt;/code&gt; 속성을 통해 요소의 최종 위치를 결정&lt;/br&gt;* top : 요소의 position 기준에 맞는 위쪽에서의 거리(위치)를 설정&lt;/br&gt;* bottom : 요소의 position 기준에 맞는 아래쪽에서의 거리(위치)를 설정&lt;/br&gt;* left : 요소의 position 기준에 맞는 왼쪽에서의 거리(위치)를 설정&lt;/br&gt;* right : 요소의 position 기준에 맞는 오른쪽에서의 거리(위치)를 설정&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;position-속성&#34;&gt;position 속성&lt;/h2&gt;
&lt;h3 id=&#34;position-relative&#34;&gt;position: relative&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;position&lt;/code&gt; 속성을 &lt;code&gt;relative&lt;/code&gt; 로 설정하게 되면, 요소를 원래 위치에서 벗어나게 배치할 수 있습니다.
위치 지정은 &lt;code&gt;top&lt;/code&gt;,&lt;code&gt;bottom&lt;/code&gt;,&lt;code&gt;left&lt;/code&gt;,&lt;code&gt;right&lt;/code&gt; 를 이용해 정할 수 있습니다.&lt;/p&gt;
&lt;p&gt;아래의 예시를 보시면 &lt;code&gt;position&lt;/code&gt;은 &lt;code&gt;relative&lt;/code&gt; 위치는 &lt;code&gt;top: 28px;&lt;/code&gt; , &lt;code&gt;left: 48px&lt;/code&gt; 로 이동하여 겹쳐있는것을 볼 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#relative {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;relative&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;48&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;
&lt;p class=&#34;codepen&#34; data-height=&#34;300&#34; data-default-tab=&#34;html,result&#34; data-slug-hash=&#34;wvrywgj&#34; data-user=&#34;sosolyht&#34; style=&#34;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&#34;&gt;
  &lt;span&gt;See the Pen &lt;a href=&#34;https://codepen.io/sosolyht/pen/wvrywgj&#34;&gt;
  Untitled&lt;/a&gt; by Bridge (&lt;a href=&#34;https://codepen.io/sosolyht&#34;&gt;@sosolyht&lt;/a&gt;)
  on &lt;a href=&#34;https://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async src=&#34;https://cpwebassets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;
&amp;nbsp;
&amp;nbsp;
&lt;h3 id=&#34;position-absolute&#34;&gt;position: absolute&lt;/h3&gt;
&lt;p&gt;position은 어렵게 생각할것없이
원래의 위치와 상관없이 위치를 지정할 수 있습니다.
absolute 는 절대적이다라는 뜻때문에 마음껏 바꿀수있다고 오해하시는 경우가 있습니다. 하지만 absolute 는 부모 요소의 기준으로 위치가 결정 됩니다.&lt;/p&gt;
&lt;p&gt;아래의 예제를 보시면 &lt;code&gt;top: 80px;&lt;/code&gt; , &lt;code&gt;right: 16px;&lt;/code&gt; 의 값을 주게 되면 &lt;code&gt;relative&lt;/code&gt; 기준으로 떨어져있는 것을 보실 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;relative&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;sample&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#absloute {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;absolute&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;
&lt;p class=&#34;codepen&#34; data-height=&#34;300&#34; data-default-tab=&#34;html,result&#34; data-slug-hash=&#34;yLzvyvK&#34; data-user=&#34;sosolyht&#34; style=&#34;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&#34;&gt;
  &lt;span&gt;See the Pen &lt;a href=&#34;https://codepen.io/sosolyht/pen/yLzvyvK&#34;&gt;
  absloute&lt;/a&gt; by Bridge (&lt;a href=&#34;https://codepen.io/sosolyht&#34;&gt;@sosolyht&lt;/a&gt;)
  on &lt;a href=&#34;https://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async src=&#34;https://cpwebassets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;
&amp;nbsp;
참고로 `absolute` 의 요소는 HTML 문서상에서 독립되어 앞뒤에 나온 요소와 상호작용을 하지않습니다
&amp;nbsp;
&amp;nbsp;
&lt;h3 id=&#34;position-fixed&#34;&gt;position: fixed&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fixed&lt;/code&gt; 는 화면을 위아래로 스크롤하더라도 브라우저 화면의 특정 부분이 고정되어 움직이지 않습니다.
쉽게 예를들어 웹사이트들어가면 귀찮게 따라다니는 사이드 광고를 생각하시면 될것 같습니다.&lt;/p&gt;
&lt;p&gt;아래의 예시를 참고하시면 될것같습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#fixed {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;fixed&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;bottom&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p class=&#34;codepen&#34; data-height=&#34;300&#34; data-default-tab=&#34;html,result&#34; data-slug-hash=&#34;yLzvyjj&#34; data-user=&#34;sosolyht&#34; style=&#34;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&#34;&gt;
  &lt;span&gt;See the Pen &lt;a href=&#34;https://codepen.io/sosolyht/pen/yLzvyjj&#34;&gt;
  fixed&lt;/a&gt; by Bridge (&lt;a href=&#34;https://codepen.io/sosolyht&#34;&gt;@sosolyht&lt;/a&gt;)
  on &lt;a href=&#34;https://codepen.io&#34;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async src=&#34;https://cpwebassets.codepen.io/assets/embed/ei.js&#34;&gt;&lt;/script&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;h2 id=&#34;display-속성&#34;&gt;display 속성&lt;/h2&gt;
&lt;h3 id=&#34;inline&#34;&gt;inline&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;inline&lt;/code&gt; 특징으로는 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; 태그를 예로 들 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;A&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;SPAN&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;em&lt;/span&gt;&amp;gt;EM&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;em&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;을 작성해보시면
띄어쓰기가 되지않고 한 줄로 보이게됩니다.
그리고 &lt;code&gt;width&lt;/code&gt; 와 &lt;code&gt;height&lt;/code&gt; 속성을 지정해도 무시되는걸 참고하시길 바랍니다.
 &lt;/p&gt;
&lt;h3 id=&#34;inline-block&#34;&gt;inline-block&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;inline-block&lt;/code&gt; 은 말 그대로 &lt;code&gt;inline&lt;/code&gt; 의 특징과 &lt;code&gt;block&lt;/code&gt; 의 특징을 모두 가진 요소를 뜻합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;줄바꿈이 이루어지지않습니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; 와 &lt;code&gt;height&lt;/code&gt; 를 지정 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;만약 &lt;code&gt;width&lt;/code&gt; 와 &lt;code&gt;height&lt;/code&gt; 지정하지 않을 경우, inline 과 같이 컨텐츠만큼 영역이 잡힌다.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;block&#34;&gt;block&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;block&lt;/code&gt; 특징으로는 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 태그를 예로 들 수 있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;DIV&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;P&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;H1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;을 작성해보시면 태그마다 줄바꿈되어 보여지실겁니다.
&lt;code&gt;block&lt;/code&gt; 은 &lt;code&gt;inline&lt;/code&gt; 과는 달리 &lt;code&gt;width&lt;/code&gt;,&lt;code&gt;height&lt;/code&gt; 등 속성이 모두 반영이 됩니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Python] 기초 문법</title>
        <link>https://heetaek.com/p/python-syntax/</link>
        <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/python-syntax/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151964846-19a947e0-45be-421d-9515-84a921077aeb.png" alt="Featured image of post [Python] 기초 문법" /&gt;&lt;h1 id=&#34;python-기초-문법&#34;&gt;python 기초 문법&lt;/h1&gt;
&lt;h2 id=&#34;print&#34;&gt;print&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt; 는 무언가를 출력할때 사용됩니다.
예를 들어,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;코알못 블로그&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;라고 쓰면 &lt;code&gt;코알못 블로그&lt;/code&gt; 라고 출력이 됩니다.&lt;/p&gt;
&lt;p&gt;이와 같이 뭔가를 출력할때 사용되고, 결과값을 확인하기 위한 용도로도 사용됩니다.
 
 &lt;/p&gt;
&lt;h2 id=&#34;변수-variable&#34;&gt;변수 (variable)&lt;/h2&gt;
&lt;p&gt;변수(variable)란 데이터를 저장하기 위해 할당받은 하나의 공간이라 생각하시면됩니다.&lt;/p&gt;
&lt;p&gt;변수는 자신이 원하는 역할을 부여할수있습니다&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;앙모띠&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;32&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my_car &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Tico&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;live &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Seoul&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;name&lt;/code&gt; 은 이름인 &amp;lsquo;앙모띠&amp;rsquo;, &lt;code&gt;age&lt;/code&gt;는 나이인 &amp;lsquo;32&amp;rsquo;, &lt;code&gt;my_car&lt;/code&gt; 는 자동차인 &amp;lsquo;Tico&amp;rsquo;, &lt;code&gt;live&lt;/code&gt;는 사는 곳인 &amp;lsquo;Seoul&amp;rsquo; &lt;/br&gt; 이런식으로 원하는 변수명으로 지정할수있습니다.&lt;/p&gt;
&lt;p&gt;다만, 변수명을 지정할때는 조심하셔야할게있습니다.&lt;/br&gt;
올바른 변수 이름 : &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;_name&lt;/code&gt;, &lt;code&gt;my_name&lt;/code&gt;, &lt;code&gt;myName&lt;/code&gt;&lt;/br&gt;
잘못된 변수 이름: &lt;code&gt;7name&lt;/code&gt;, &lt;code&gt;my name&lt;/code&gt;&lt;/br&gt;
참고하시면 됩니다.
 
 &lt;/p&gt;
&lt;h2 id=&#34;데이터-타입&#34;&gt;데이터 타입&lt;/h2&gt;
&lt;h3 id=&#34;string-문자열&#34;&gt;string (문자열)&lt;/h3&gt;
&lt;p&gt;큰따움표(&amp;quot;&amp;quot;) 혹은 작은따움표(&amp;rsquo;&amp;rsquo;) 안에 있는 글자들은 &lt;code&gt;string&lt;/code&gt; 입니다.
예) &amp;ldquo;안녕하세요&amp;rdquo; , &amp;ldquo;1995&amp;rdquo; , &amp;lsquo;반갑습니다&amp;rsquo; , &amp;lsquo;1128&amp;rsquo;&lt;/p&gt;
&lt;h3 id=&#34;integer-정수&#34;&gt;integer (정수)&lt;/h3&gt;
&lt;p&gt;정수형(Integer)이란 말 그대로 정수를 뜻하는 자료형을 말합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;float-실수&#34;&gt;float (실수)&lt;/h3&gt;
&lt;p&gt;실수형(Floating-point)은 소수점이 포함된 숫자를 말합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3.56&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;boolean&#34;&gt;boolean&lt;/h3&gt;
&lt;p&gt;boolean은 참(True)과 거짓(False)을 나타내는 자료형입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위의 예시와 같이 참(True)과 거짓(False) 를 판별합니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[HTML] Semantic Web, Semantic Tag 이 뭔가요?</title>
        <link>https://heetaek.com/p/semantic-web/</link>
        <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/semantic-web/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151965048-eba453c3-ecf3-43b5-a8e6-1a260ce5ba61.png" alt="Featured image of post [HTML] Semantic Web, Semantic Tag 이 뭔가요?" /&gt;&lt;h2 id=&#34;semantic-web-이란&#34;&gt;Semantic Web 이란?&lt;/h2&gt;
&lt;p&gt;Semantic Web은 HTML4 에서 HTML5 올라가면서
생기게 되었습니다.&lt;/p&gt;
&lt;p&gt;의미를 정확히 부여하는 기술입니다.&lt;/p&gt;
&lt;p&gt;기존에는 컴퓨터가 메타데이터를 해석하기만 했다면&lt;/p&gt;
&lt;p&gt;Semantic Web은 사람의 눈으로 보기에 용이한 메타데이터와 자연어로 구성되어있습니다.&lt;/p&gt;
&lt;p&gt;예를 들면,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;header&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 이 &lt;code&gt;div&lt;/code&gt; 는 &lt;code&gt;header&lt;/code&gt; 라고 나타내었던것을&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;태그에 &lt;code&gt;header&lt;/code&gt; 라고 의미를 부여해 더 효율적으로 작성할수있습니다.&lt;/p&gt;
&lt;p&gt; 
 
 &lt;/p&gt;
&lt;h2 id=&#34;semantic-tag-란&#34;&gt;Semantic Tag 란?&lt;/h2&gt;
&lt;p&gt;Semantic Tag 도 Semantic Web 과 마찬가지로 &amp;lsquo;의미가 있는&amp;rsquo; 태그를 뜻합니다.&lt;/p&gt;
&lt;p&gt;이걸 언제써야하는지는&lt;/p&gt;
&lt;p&gt;&lt;code&gt;img&lt;/code&gt; 태그와 css의 &lt;code&gt;background-image&lt;/code&gt; 를 예시로 들면&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;my-img&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;내 얼굴&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/img/profile.png&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;만약 /img/profile.png 의 사진의 경로가 잘못되어 브라우저가 불러오지 못하는 상황이 있을때 &lt;code&gt;alt&lt;/code&gt; 태그로 이 사진은 얼굴 사진이라는것을 알 수 있습니다.&lt;/p&gt;
&lt;p&gt;허나 css 에 &lt;code&gt;background-image&lt;/code&gt; 를 사용하게되면&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;my-img&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#my-img {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;background-image&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;img&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;profile&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;png
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;단지 &lt;code&gt;div&lt;/code&gt; 에 이미지를 추가 한 것일뿐 어떠한 정보나 메타데이터가 없습니다.&lt;/p&gt;
&lt;p&gt;웹의 SEO 측면에서 봤을때도 메타데이터가 없는 후자의 CSS 방식은 불리할수밖에없습니다.&lt;/p&gt;
&lt;p&gt;참고로 &lt;code&gt;img&lt;/code&gt; 와 같은 Semantic Tag를 조금 소개해드리자면&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;nav&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;section&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;article&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;등이 있습니다.&lt;/p&gt;
&lt;p&gt;더 많은 정보는 &lt;a class=&#34;link&#34; href=&#34;https://www.w3schools.com/html/html5_semantic_elements.asp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;W3C&lt;/a&gt; 를 참고 바랍니다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[알고리즘] 회문 판별 시퀀스 뒤집기(Palindrome)</title>
        <link>https://heetaek.com/p/palindrome/</link>
        <pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/palindrome/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/151965127-16588fd3-4c13-422d-aedf-3b9a8b0d37dd.png" alt="Featured image of post [알고리즘] 회문 판별 시퀀스 뒤집기(Palindrome)" /&gt;&lt;h1 id=&#34;파이썬-회문판별&#34;&gt;파이썬 회문판별&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;word &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;123454321&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(word &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; word[::&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;파이썬 array 를 이용해&lt;/p&gt;
&lt;p&gt;ex)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;arr = [0,1,2,3,4,5,6,7,8,9]

arr[::2] # 처음부터 끝까지 두 칸 간격으로
[0,2,4,6,8]

arr[1::2] # index 1 부터 끝까지 두 칸 간격으로
[1,3,5,7,9]

arr[::-1] # 처음부터 끝까지 -1칸 간격으로 ( == 역순으로)
[9,8,7,6,5,4,3,2,1,0]

arr[::-2] # 처음부터 끝까지 -2칸 간격으로 ( == 역순, 두 칸 간격으로)
[9,7,5,3,1]

arr[3::-1] # index 3 부터 끝까지 -1칸 간격으로 ( == 역순으로)
[3,2,1,0]

arr[1:6:2] # index 1 부터 index 6 까지 두 칸 간격으로
[1,3,5]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;word 와 word[::-1] 정방향과 역방향으로 검사 후&lt;/p&gt;
&lt;p&gt;회문이면 True 아니면 False&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Node.js] 개념 이해하기</title>
        <link>https://heetaek.com/p/about-nodejs/</link>
        <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/about-nodejs/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749612-780dfc50-1e97-4e26-b1ef-f27591c55ec1.png" alt="Featured image of post [Node.js] 개념 이해하기" /&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/169650902-a4db4fbc-128a-459c-b734-8bf1981ececb.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;nodejs-란&#34;&gt;Node.js 란?&lt;/h1&gt;
&lt;p&gt;먼저 Node.js 를 알고싶으면 JavaScript 에 대해 알아야한다.&lt;/p&gt;
&lt;p&gt;(그래서 현재 JavaScript 에 대해 공부중이다. 2022.05.21)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node.js는 Chrome V8 JavaScript 엔진으로 빌드 된 JavaScript 런타임(환경)이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://v8.dev/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;V8&lt;/a&gt;이 어떠한건지 대충 둘러보셔도 좋습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Node.js 를 통해 다양한 자바스크립트 애플리케이션을 실행할 수 있지만 보통 서버 사이드에서 많이 사용된다. 그렇다고 서버사이드 스크립트 언어가 아닌 자바스크립트로 동작하는 프로그램이다.&lt;/p&gt;
&lt;p&gt;Non-blocking I/O와 단일 스레드 이벤트 루프를 통한 높은 처리 성능을 가지고 있는 것이 특징이다.&lt;/p&gt;
&lt;p&gt;내장 HTTP 서버 라이브러리를 포함하고 있어 웹 서버에서 아파치 등의 별도 소프트웨어 없이 동작하는 것이 가능하며, 이를 통한 웹 서버의 동작에 있어 더 많은 통제에서 벗어나 여러 가지 기능을 가능하게 한다.&lt;/p&gt;
&lt;p&gt;즉, Node.js를 통해 웹어플리케이션이 더욱 발전하게 되었으며, 정적인 홈페이지 뿐만 아니라 쇼핑몰, 티켓 예매사이트, 블로그 등 데이터가 변해가는 사이트를 만들 수 있으며, 여러 개발자가 만든 프로그램과 게임을 웹상에서 구동시켜 안드로이드폰, 아이폰, 윈도우PC, 맥 등 플랫폼의 제약에서 벗어나 어디든 상관없이 실행 가능하게 해준다.&lt;/p&gt;
&lt;p&gt;물론 단순히 웹에서 실행 가능한 게임을 만들려면 JavaScript 만으로도 가능하지만 좀 더 진화 된 프로그램으로 실시간 온라인 채팅, 실시간 온라인 게임 등 실시간 기능을 넣거나, 로그인 기능을 넣어 유저를 관리하고 점수를 관리하는 데이터베이스 기능을 Node.js를 통해 만들 수가 있다.&lt;/p&gt;
&lt;h1 id=&#34;nodejs-특징&#34;&gt;Node.js 특징&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;위에 보면, Non-blocking I/O와 단일 스레드 이벤트 루프를 통한 높은 처리 성능을 가지고 있는 것이 특징이라 했는데 정확히 어떤 것인지 알아보자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예를 들어, 휴게소의 푸트코트를 상상해보면 키오스크에서 모두 주문을 받고 음식은 각 입점된 식당에서 조리를 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;음식이 완성된 순서대로 호출을 하고 손님은 음식을 픽업한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 계산을 담당하는 키오스크가 &lt;code&gt;단일스레드&lt;/code&gt; 이고, 각 요리를 완성해서 호출하는 식당들은 &lt;code&gt;비동기 방식&lt;/code&gt; 이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;입력은 하나의 스레드에서 받지만 순서대로 처리하지 않고 먼저 처리된 결과 값을 이벤트로 반환해주는 방식이 Node.js 가 사용하는 단일스레드 비동기 방식이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://sblog.netraweb.com/node-js-%EA%B0%95%EC%A2%8C-node-js-%EB%9E%80-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%86%8C%EA%B0%9C/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://sblog.netraweb.com/node-js-%EA%B0%95%EC%A2%8C-node-js-%EB%9E%80-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%86%8C%EA%B0%9C/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://medium.com/sjk5766/javascript-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%95%B5%EC%8B%AC-event-loop-%EC%A0%95%EB%A6%AC-422eb29231a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://medium.com/sjk5766/javascript-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%95%B5%EC%8B%AC-event-loop-%EC%A0%95%EB%A6%AC-422eb29231a8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://jongminfire.dev/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%86%B5%EC%8B%A0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://jongminfire.dev/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84%EC%99%80-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%86%B5%EC%8B%A0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title></title>
        <link>https://heetaek.com/p/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/</guid>
        <description>&lt;h2 id=&#34;사전-셋팅&#34;&gt;사전 셋팅&lt;/h2&gt;
&lt;h3 id=&#34;python-3810-설치&#34;&gt;Python 3.8.10 설치&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;nodejs-설치&#34;&gt;Node.js 설치&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;brew install node&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;aws-설정&#34;&gt;AWS 설정&lt;/h3&gt;
&lt;p&gt;IAM 계정의 &lt;code&gt;Access Key&lt;/code&gt; 와 &lt;code&gt;Secret Key&lt;/code&gt; 를 가지고 설정합니다.&lt;/p&gt;
&lt;p&gt;지역은 사용하시는 리전&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;AWS Access Key ID [None]: AKI********
AWS Secret Access Key [None]: lSrC*************
Default region name [None]: ap-northeast-2
Default output format [None]: json
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;기타-설정&#34;&gt;기타 설정&lt;/h3&gt;
&lt;p&gt;ConsoleMe 의 Makefile 에는 pip 명령어만 인식하기때문에,&lt;/p&gt;
&lt;p&gt;맥에서 기본으로 지정되는 pip3 -&amp;gt; pip 로 변경해야됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vim ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;alias pip=&amp;ldquo;pip3&amp;rdquo;&lt;/p&gt;
&lt;p&gt;입력하고&lt;/p&gt;
&lt;p&gt;저장 후 종료&lt;/p&gt;
&lt;p&gt;&lt;code&gt;source ~/.bashrc&lt;/code&gt; 로 초기화&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m pip install --upgrade pip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;로 pip 업그레이드&lt;/p&gt;
&lt;h2 id=&#34;파이썬-가상환경-설정&#34;&gt;파이썬 가상환경 설정&lt;/h2&gt;
&lt;p&gt;venv 라는 가상화 패키지로 env 라는 이름의 가상환경 설정&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python -m venv env&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;가상환경 활성화
&lt;code&gt;. env/bin/activate&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;consoleme-설치&#34;&gt;ConsoleMe 설치&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
