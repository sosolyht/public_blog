<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JsonResponse on 코딩 잘 몰라요</title>
    <link>https://cidk.xyz/tags/jsonresponse/</link>
    <description>Recent content in JsonResponse on 코딩 잘 몰라요</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>©2022 cidk.</copyright>
    <lastBuildDate>Thu, 03 Feb 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://cidk.xyz/tags/jsonresponse/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django Query String 쿼리스트링</title>
      <link>https://cidk.xyz/post/django-query-string/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cidk.xyz/post/django-query-string/</guid>
      <description>&lt;h1 id=&#34;query-string&#34;&gt;Query String&lt;/h1&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/152666203-2279cc57-d5dc-4a03-b54d-568e228bd25f.png&#34;
        alt=&#34;query string&#34;/&gt;&lt;/p&gt;
&lt;p&gt;기존에 저는 뷰를 작성하고 특정 URL로 접속해 body에 데이터를 담아 JSON 타입으로 인코딩을 해서 통신을 했습니다.
그러나 클라이언트의 기능이 점점 추가될수록 서버 측에서는 조건에 따라 모든 API를 작성하는 것이 반복적이고 불필요한 작업이 될 수 있습니다.&lt;/p&gt;
&lt;p&gt;이러한 문제점을 해결해주는게 RESTful한 API 작성을 도와주는 &lt;code&gt;Query String&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cidk.xyz/p/restful-api/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;RESTfulAPI 란??&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Query String&lt;/code&gt; 은 &lt;code&gt;?&lt;/code&gt;로 시작해서 &lt;code&gt;&amp;amp;&lt;/code&gt;를 통해 여러 데이터를 동시에 전달 가능합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;views.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ProductDetailView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;View&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;             &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;           &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;shipping&amp;#39;&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shipping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;price&amp;#39;&lt;/span&gt;          &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;is_green&amp;#39;&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;is_sale&amp;#39;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_sale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;category_id&amp;#39;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;category_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;stock&amp;#39;&lt;/span&gt;          &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;discount_price&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;discount_price&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
                &lt;span class=&#34;s1&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;          &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image_set&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_url&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;urls.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;urlpatterns&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;lt;int:product_id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ProductDetailView&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위의 코드는 기존의 상품을 가져오는 뷰&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://127.0.0.1/products/7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;라고 입력을 하면 &lt;code&gt;product_id&lt;/code&gt; 의 7번 상품을 조회해서 정보를 JSON 타입으로 주었습니다.&lt;/p&gt;
&lt;p&gt;이번에는 쿼리스트링을 적용해 볼까요?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;views.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ProductDetailView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;View&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;product_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GET&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;products&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;product_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;products&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;products&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;products&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;urls.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;urlpatterns&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ProductDetailView&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;request.GET.get&lt;/code&gt; 으로 &lt;code&gt;id&lt;/code&gt; 7번 아이템을 가져와서 모든 정보를 가져오라는 뜻입니다.&lt;/p&gt;
&lt;p&gt;그래서 입력을 &lt;code&gt;http://127.0.0.1:8000/products?id=7&lt;/code&gt; 이렇게 했더니&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/152666763-2c6ed01b-1f6b-4f6e-a683-ae34edd266ab.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;똑같이 정상적으로 출력이 되는 것을 확인하실 수 있습니다.&lt;/p&gt;
&lt;p&gt;아직까지도 난해한 부분이라 계속 응용을 해봐야할것같습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django JsonResponse를 쓰는데 왜 request 가 필요할까</title>
      <link>https://cidk.xyz/post/django-why-need-request/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cidk.xyz/post/django-why-need-request/</guid>
      <description>&lt;p&gt;view 를 작성하다 클라이언트에 json 데이터를 반환을 해주다보니
&lt;code&gt;from django.http  import JsonResponse&lt;/code&gt;
JsonResponse 객체를 끌어다와서 쓰기도합니다.&lt;/p&gt;
&lt;p&gt;근데 반환을 해주는 함수의 인자에는 필요하지도 않은 &lt;code&gt;request&lt;/code&gt; 인자를 다들 포함시키길래 저도 지금껏 계속 쓰긴했습니다.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/152293479-1ce8b1d6-7b37-4ce4-a225-d2c3ac1ca417.png&#34;
        alt=&#34;request 인자&#34;/&gt;&lt;/p&gt;
&lt;p&gt;그래서 지우고 테스트해보니&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/152294244-64f1378d-5cc6-47e2-a119-9561edd57728.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypeError : get() takes 1 positional argument but 2 were given&lt;/code&gt;
과 함께 500 에러를 주네요.&lt;/p&gt;
&lt;p&gt;그럼 &lt;code&gt;request&lt;/code&gt; 가 필요하다는거겠죠.&lt;/p&gt;
&lt;p&gt;알아보기위해 django 최상위 제네릭 뷰 클래스에서 알아보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generic View 란 반복적으로 사용되는 공통 부분을 패턴화해서 쉽게 추상화 해둔 것입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;View&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    Intentionally simple parent class for all views. Only implements
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    dispatch-by-method and simple sanity checking.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;http_method_names&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;put&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;patch&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;options&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;trace&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        Constructor. Called in the URLconf; can contain helpful extra
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        keyword arguments, and other things.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# Go through keyword arguments, and either save their values to our&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# instance, or raise an error.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;setattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;nd&#34;&gt;@classonlymethod&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;as_view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initkwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Main entry point for a request-response process.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initkwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;http_method_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;TypeError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
                    &lt;span class=&#34;s1&#34;&gt;&amp;#39;The method name &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; is not accepted as a keyword argument &amp;#39;&lt;/span&gt;
                    &lt;span class=&#34;s1&#34;&gt;&amp;#39;to &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;().&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hasattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;TypeError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;() received an invalid keyword &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%r&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;. as_view &amp;#34;&lt;/span&gt;
                                &lt;span class=&#34;s2&#34;&gt;&amp;#34;only accepts arguments that are already &amp;#34;&lt;/span&gt;
                                &lt;span class=&#34;s2&#34;&gt;&amp;#34;attributes of the class.&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;


    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dispatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# Try to dispatch to the right method; if a method doesn&amp;#39;t exist,&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# defer to the error handler. Also defer to the error handler if the&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# request method isn&amp;#39;t on the approved list.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;http_method_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;getattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;http_method_not_allowed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;http_method_not_allowed&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kwargs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;as_view&lt;/code&gt; 는 뷰를 하나 만들어서 이것을 return 해주는 역할입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;문제의 &lt;code&gt;dispatch&lt;/code&gt; 는 &lt;code&gt;as_view&lt;/code&gt; 메소드 내부에서 호출됩니다.
request 메소드가 정의된 http_method_names 에 해당되면 request 에서 가져오게됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;%28https://docs.djangoproject.com/en/4.0/ref/request-response/%29&#34;&gt;공식문서&lt;/a&gt;
 를 참고해봐도 JsonResponse 는 HttpRequest 의 하위 클래스네요&lt;/p&gt;
&lt;p&gt;이래서 인자에 &lt;code&gt;request&lt;/code&gt; 가 포함되어있나봅니다.&lt;/p&gt;
&lt;p&gt;Generic View 를 보다보니 공부가 많이되네요.&lt;/p&gt;
&lt;p&gt;앞으로 Generic View 에 대해 더 깊이 다뤄보고 블로그 글 작성하겠습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python 리스트 컴프리헨션(List Comprehension)</title>
      <link>https://cidk.xyz/post/python-list-comprehension/</link>
      <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cidk.xyz/post/python-list-comprehension/</guid>
      <description>&lt;h2 id=&#34;컴프리헨션-comprehension-이란&#34;&gt;컴프리헨션 (Comprehension) 이란?&lt;/h2&gt;
&lt;p&gt;컴프리헨션이란 뭔가를 내포 , 압축의 뜻을 담고있습니다.
직관적으로 리스트를 생성하는 방법입니다.
컴프리헨션은 파이썬의 자료형 (list,dict,set) 에 대해 사용 할 수 있기 때문에 기본적인 자료형에 대해서는 공부를 하셔야합니다.
이번 블로그는 대표적인 리스트 컴프리헨션에 대해 써볼겁니다.&lt;/p&gt;
&lt;h2 id=&#34;리스트-컴프리헨션-list-comprehension&#34;&gt;리스트 컴프리헨션 (List Comprehension)&lt;/h2&gt;
&lt;h3 id=&#34;반복문&#34;&gt;반복문&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;일반적인 반복문으로 리스트 생성&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;리스트 컴프리헨션&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;같은 결과가 출력됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;좀 더 응용해볼까요? 재밌네요&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;기존의 &lt;code&gt;i&lt;/code&gt; 에 5가 곱해져서&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[0, 5, 10, 15, 20, 25, 30, 35, 40, 45]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;라는 결과가 출력됐습니다.&lt;/p&gt;
&lt;p&gt;조금만 생각하면 정말 쉽다는겁니다.&lt;/p&gt;
&lt;p&gt;일반적인 리스트 생성할때와 리스트 컴프리헨션을 참고 해보시면&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/152177738-42e11729-60e5-4816-a0b7-6a727ef4baae.png&#34;
        alt=&#34;image&#34;/&gt;
&lt;code&gt;a&lt;/code&gt; 의 빈 리스트가 컴프리헨션 양 옆에 달라 붙었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/152178298-74a386e4-7a9d-4940-9d66-7b0a00bcef57.png&#34;
        alt=&#34;image&#34;/&gt;
반복문은 위의 이미지와 같이 리스트 내부에 작성합니다.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/152178840-2ef3d10c-4361-433b-a31b-560d3f09b861.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;쉽죠? 직접 에디터 키고 해보시는걸 추천드립니다.&lt;/p&gt;
&lt;h3 id=&#34;if-조건문&#34;&gt;if 조건문&lt;/h3&gt;
&lt;p&gt;위에서 살펴본것은 반복문을 사용한 컴프리헨션입니다.
반복문 이외에도 조건문을 활용해볼수있습니다.
컴프리헨션을 쓰다 보면 이 조건문을 쓰는 게 매우 편리합니다.
if문만 쓸 때는 오른쪽에, if else문을 쓸때는 왼쪽에 씁니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;결과
&lt;code&gt;[0, 2, 4, 6, 8]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;if-else-조건문&#34;&gt;if else 조건문&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;odd&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;결과
&lt;code&gt;[0, &#39;odd&#39;, 2, &#39;odd&#39;, 4, &#39;odd&#39;, 6, &#39;odd&#39;, 8, &#39;odd&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;위의 반복문에 조건문만 들어간거라 생각하시면 간단합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django QuerySet filter 제대로 알아보자</title>
      <link>https://cidk.xyz/post/django-queryset-filter/</link>
      <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cidk.xyz/post/django-queryset-filter/</guid>
      <description>&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/151730971-5125d3b2-552d-4673-9d52-839d685f2593.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;h1 id=&#34;filter&#34;&gt;filter&lt;/h1&gt;
&lt;p&gt;뷰를 작성하다보면 filter 를 사용해 데이터를 조회해야할때가 많습니다.&lt;/p&gt;
&lt;p&gt;전에 썻던 get() 과 filter() &lt;a href=&#34;https://cidk.xyz/2022/01/20/django_orm_get_filter/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;비교글&lt;/a&gt;
 을 보셨으면 조금 더 이해가 잘 되실겁니다.&lt;/p&gt;
&lt;p&gt;계속 filter 에 대해 쓰는 이유는 중요하기도 하고 저도 배워야하기 때문에..&lt;/p&gt;
&lt;h2 id=&#34;exact&#34;&gt;exact&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;exact&lt;/code&gt; 는 정확히 일치하는 데이터를 찾습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id__exact&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Product 라는 객체에 id 가 14번인 친구를 찾으라는 거겠죠?&lt;/p&gt;
&lt;h3 id=&#34;iexact&#34;&gt;iexact&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;iexact&lt;/code&gt; 는 대소문자를 구분하지않고 정확히 일치하는 데이터를 찾습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Product&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name__iexact&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;k9 tank&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;마찬가지로 Product 라는 객체에 name 이 &lt;code&gt;k9 tank&lt;/code&gt; 라는 친구를 찾아오라는 겁니다.&lt;/p&gt;
&lt;h2 id=&#34;contains&#34;&gt;contains&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;contains&lt;/code&gt; 는 포함하고있는 문자열을 찾습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name__contains&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;희택&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위의 코드는 &lt;code&gt;희택&lt;/code&gt; 이라는 친구를 가져오라는 겁니다.&lt;/p&gt;
&lt;h3 id=&#34;icontains&#34;&gt;icontains&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;icontains&lt;/code&gt; 는 대소문자를 구분하지않고 포함하고있는 문자열을 찾습니다.
사실 왠만하면 저는 &lt;code&gt;icontains&lt;/code&gt; 를 쓸텐데..나중에 써보고 어떤게 더 좋은지 블로그에 또 써보겠습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;job__icontains&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;bus Driver&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 하면 버스 기사님의 정보를 다 가져올수있겠죠.&lt;/p&gt;
&lt;h2 id=&#34;in&#34;&gt;in&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;in&lt;/code&gt; 은 여러 조건을 포함할 경우 사용합니다.
list , tuple 등 iterable 한 객체를 가져올수있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id__in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name__in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;최희택&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;이정재&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;공유&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;gt--lt--gte--lte&#34;&gt;gt , lt , gte , lte&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;gt : &amp;gt;&lt;/li&gt;
&lt;li&gt;lt : &amp;lt;&lt;/li&gt;
&lt;li&gt;gte : &amp;gt;=&lt;/li&gt;
&lt;li&gt;lte : &amp;lt;=&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;부등호를 사용할수있습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id__gt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;startswith--istartswith&#34;&gt;startswith , istartswith&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;startswith : 조건으로 시작하는 문자열 검색&lt;/li&gt;
&lt;li&gt;istartswith: startswith 을 대소문자 구분없이 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Products&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name__startswith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gun&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;endswith--iendswith&#34;&gt;endswith , iendswith&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;endswith : 조건으로 끝나는 문자열 검색&lt;/li&gt;
&lt;li&gt;iendswith : endswith 를 대소문자 구분없이 검색&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;Products&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name__startswith&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tank&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;range&#34;&gt;range&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;range&lt;/code&gt; 는 범위에 해당하는 object를 찾습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;datetime&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2022&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2022&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Products&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;created_date__range&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Django raise error 메시지를 json데이터로 출력하는 방법</title>
      <link>https://cidk.xyz/post/django-raise/</link>
      <pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cidk.xyz/post/django-raise/</guid>
      <description>&lt;p&gt;정규식으로 이메일과 패스워드 유효성 검증 후 , 매치가 되지않으면 &lt;code&gt;ValidationError&lt;/code&gt; 를 출력하게끔 해놓았습니다.
&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/151670116-ea498b04-6e79-4bd1-aaae-ad54eeb7eb5b.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;근데 프론트에서 일부러 틀리게 집어넣어봐도 오류내용도 안뜬다고 해서 직접 포스트맨으로 테스트를 해보았는데 역시나 &lt;code&gt;ValidationError&lt;/code&gt; 를 처리를 못 해주고있었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/151670258-c8e7a23f-2724-4ace-9b0b-a115fce62b5d.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;터미널에서도 &lt;code&gt;ValidationError&lt;/code&gt; 와 내부서버오류인 500코드만 띄워주네요.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/151670307-75646248-46d2-43fe-9964-6ea98be42527.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;처음에는 raise 로 에러를 주면 그게 콘솔에 찍히는 줄 알았습니다.&lt;/p&gt;
&lt;p&gt;바로 구글링을 하여 찾아보고,
참고 : &lt;a href=&#34;https://stackoverflow.com/questions/10307996/python-how-to-print-the-message-inside-validationerror&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://stackoverflow.com/questions/10307996/python-how-to-print-the-message-inside-validationerror&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/151670381-022dd7da-0b8b-40d9-86d9-a7d36ee4455c.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValidationError&lt;/code&gt; 의 메시지를 출력해주게끔 똑같이 코드를 넣어보니 정상적으로 프론트에서도 콘솔에 찍히는걸 확인할수있었습니다.
 
 
포스트맨에서도 정상적으로 json 데이터를 받아오는걸 확인할수있습니다.
 
&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/151670455-36a55b06-2a33-43b4-b218-a38bcc8f1b5f.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;이제 터미널에서도 이쁘게 에러코드가 확인됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/151670448-93297e41-2966-43e3-8fb3-91020da1e474.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;저만 몰랐던 에러처리방법..이렇게 배우고 알아갑니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RESTful API</title>
      <link>https://cidk.xyz/post/restful-api/</link>
      <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cidk.xyz/post/restful-api/</guid>
      <description>&lt;h1 id=&#34;rest-하다&#34;&gt;REST 하다?&lt;/h1&gt;
&lt;p&gt;우선 REST 에 대해서 알아야 합니다.
REST 란 웹에 존재하는 자원에 대해 고유한 URI 부여하는 방법입니다.
현재 가장 널리 알려져 사용되고있는 기술이기도 합니다.&lt;/p&gt;
&lt;p&gt;RESTfulAPI 는 앞서말한 REST의 규칙을 지키며 API 를 개발하는걸 뜻합니다.&lt;/p&gt;
&lt;p&gt;간단한 예시를 들어드리자면,&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/151666397-8a8421b6-3542-4109-b299-2b259d53b898.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;p&gt;구글이나 네이버를 잠깐 검색해봐도 주소창에는 뭔가의 규칙에 의해 나와있습니다.
규칙성은 없지만 구글검색엔진의 백엔드 API 네이밍 룰을 따르겠죠?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;장점 : RESTful API는 그 자체만으로도 API의 목적이 쉽게 이해가 됩니다.
&lt;/br&gt;&lt;/li&gt;
&lt;li&gt;단점 : 위의 구글 예시와같이 표준규약이 없어서 안티패턴으로 작성되는 경우가 흔합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt; 
 &lt;/p&gt;
&lt;h1 id=&#34;restfulapi&#34;&gt;RESTfulAPI&lt;/h1&gt;
&lt;p&gt;위에서 REST 에 대해 배워보았으니 RESTfulAPI 가 뭔지 알아야겠죠
REST 라는 원리를 이용하여 API 를 제작하는것을 RESTfulAPI 라 합니다.
모든 CRUD 기능을 POST로 처리 하는 API 혹은 URI 규칙을 올바르게 지키지 않은 API는 REST API를 사용하였지만 RESTful 하지 못한 시스템이라고 할 수 있습니다.&lt;/p&gt;
&lt;h1 id=&#34;rest-api-설계-가이드&#34;&gt;REST API 설계 가이드&lt;/h1&gt;
&lt;p&gt;이제 REST 와 RESTfulAPI 가 뭔지 알았으니, REST API 작성 규칙을 알아보고 RESTful 한 API 설계 방법을 알아봅시다.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;rest-api-설계-가이드---1&#34;&gt;REST API 설계 가이드 - 1&lt;/h2&gt;
&lt;p&gt;REST API 설계 시 가장 중요한 항목은 다음의 2가지로 요약할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;URI는 정보의 자원을 표현해야 한다.&lt;/li&gt;
&lt;li&gt;자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE)로 표현한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HTTP Method&lt;/th&gt;
&lt;th&gt;역할&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;POST를 통해 해당 URI를 요청하면 리소스를 생성합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;GET를 통해 해당 리소스를 조회합니다. 리소스를 조회하고 해당 도큐먼트에 대한 자세한 정보를 가져온다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;PUT를 통해 해당 리소스를 수정합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;DELETE를 통해 리소스를 삭제합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;rest-api-설계-가이드---2&#34;&gt;REST API 설계 가이드 - 2&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;URI는 동사보다는 명사를, 대문자보다는 소문자를 사용하여야 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bad Example : https://cidk.xyz/Learning
Good Example : https://cidk.xyz/learn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 
2. 마지막에 슬래시 ( / )를 포함하지 않습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bad Example : https://cidk.xyz/post/
Good Example : https://cidk.xyz/post
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 
3. 언더바( _ ) 대신 하이폰( - )을 사용합니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bad Example : https://cidk.xyz/handsome_heetaek
Good Example : https://cidk.xyz/handsome-heetaek
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 
4. 파일확장자는 URI에 포함하지 않습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bad Example : https://cidk.xyz/heetaek.png
Good Example : https://cidk.xyz/photo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 
5. 행위를 포함하지 않습니다.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Bad Example : https://cidk.xyz/delete-post/3
Good Example : https://cidk.xyz/post/3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;공부많이해야겠다 !&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;참고: &lt;a href=&#34;https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Django 참조(Foreign Key) 역참조(related_name)</title>
      <link>https://cidk.xyz/post/django-related-name/</link>
      <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cidk.xyz/post/django-related-name/</guid>
      <description>&lt;h1 id=&#34;참조-foreign-key&#34;&gt;참조 (Foreign Key)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;정참조라하기도 하고 &lt;code&gt;Foreign Key&lt;/code&gt; 를 가지고있는 테이블을 가져올 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/150625177-c20926d0-c57a-4ebd-81ef-ae67694fc94b.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;위와 같은 모델이 있다고 가정할때&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Movie&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 영화&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;actor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ForeignKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on_delete&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CASCADE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Actor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 영화배우&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;영화(Movie) 라는 모델에서 영화배우(Actor)를 불러들이는 것을 &amp;lsquo;참조&amp;rsquo; 라 합니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Movie&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;이정재&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;반대로 Actor 객체는 Movie 를 역참조 하고 있으므로 바로 접근이 불가능합니다.&lt;/p&gt;
&lt;p&gt;역참조 관계에 있을때는 아래의 역참조 세션에서 확인해봅시다.&lt;/p&gt;
&lt;h1 id=&#34;역참조-related_name&#34;&gt;역참조 (related_name)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;정참조하고있는 클래스에서 어떤 명칭으로 거꾸로 호출당할지를 정해주는 이름입니다,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;정참조했을때와 같은 모델인데 Movie 클래스의 actor 에 &lt;code&gt;related_name = &#39;my_related&#39;&lt;/code&gt; 가 생겼습니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Movie&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 영화&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;actor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ForeignKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on_delete&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CASCADE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;related_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;my_related&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Actor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 영화배우&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CharField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Actor 객체의 인스턴스와 연결되어있는 Movie 객체를 불러올때 &lt;code&gt;my_related&lt;/code&gt; 라는 이름을 부르기 위해서입니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Actor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_related&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QuerySet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Movie&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Movie&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런식으로 진행됩니다.&lt;/p&gt;
&lt;h2 id=&#34;역참조가-꼭-필요할때&#34;&gt;역참조가 꼭 필요할때&lt;/h2&gt;
&lt;p&gt;눈치채셨을분들도 계시겠지만&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Movie&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 영화&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;actor&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ForeignKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on_delete&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CASCADE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;actor2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ForeignKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on_delete&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CASCADE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;한 클래스에서 서로 다른 두 컬럼이 같은 테이블을 참조하는 경우&lt;/p&gt;
&lt;p&gt;&lt;code&gt;related_name&lt;/code&gt; 으로 구분해서 호출할 수 있게끔 작성해줍니다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Movie&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 영화&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;actor&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ForeignKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on_delete&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CASCADE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;related_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;my_related&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;actor2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;models&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ForeignKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Actor&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on_delete&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CASCADE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;related_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;your_related&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;머리가 나빠서 이해하는데 꽤 오래걸렸습니다 .&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django ORM get(), filter() 비교</title>
      <link>https://cidk.xyz/post/django-orm-get-filter/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cidk.xyz/post/django-orm-get-filter/</guid>
      <description>&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/151730971-5125d3b2-552d-4673-9d52-839d685f2593.png&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;h1 id=&#34;시작&#34;&gt;시작&lt;/h1&gt;
&lt;p&gt;먼저 python console 을 실행해줍니다.
프로젝트 manage.py 가 있는 디렉토리에서
&lt;code&gt;python manage.py shell&lt;/code&gt; 을 입력해주면 콘솔이 실행됩니다.
저는 models 에 User 라는 클래스를 만들어주어서&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/150283502-e9aafe94-75e6-42e3-9e1a-57ce4ef8ed60.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;임포트 해주겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;get&#34;&gt;get()&lt;/h2&gt;
&lt;p&gt;get() 은 객체 하나만 반환을 해줍니다.
그래서 get() 의 경우는 unique 한 값을 가지고 검색을 하는것이 좋습니다.&lt;/p&gt;
&lt;p&gt;예를들어 id 가 1번값을 가지고있는 데이터를 가지고오고싶을때는 아래의 사진처럼
&lt;code&gt;User.objects.get(id=1)&lt;/code&gt; 이런식으로 가져오시면 됩니다.
&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/150283114-1b1add6e-2ff6-48f1-8a4e-d2002385afba.png&#34;
        alt=&#34;get()&#34;/&gt;&lt;/p&gt;
&lt;p&gt;쿼리에 맞는 결과가 없을시에는&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/150283762-b21cc87a-a220-46c4-ad83-8d742e185907.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DoesNotExist&lt;/code&gt; 라는 오류가 발생하게됩니다.&lt;/p&gt;
&lt;p&gt;왜냐하면 제 데이터베이스에는 id가 1번인 데이터가 없기때문입니다.&lt;/p&gt;
&lt;p&gt;정상적으로 데이터를 가져오면&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/150293731-113682a3-a668-4e12-ae81-58ef2e7fdb91.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;output 으로 어떠한 객체를 가져왔는지 &lt;code&gt;&amp;lt;User: User object (53)&amp;gt;&lt;/code&gt; 이라고 표시됩니다.&lt;/p&gt;
&lt;h2 id=&#34;filter&#34;&gt;filter()&lt;/h2&gt;
&lt;p&gt;filter() 를 이용해 검색을 하면 여러개의 객체를 포함하는 QuerySet 을 반환해줍니다.
filter()의 특징은 특정 조건을 만족하는 객체를 검색할때 사용합니다.
QuerySet 이란 DB 에서 전달받은 객체들의 모음(List) 입니다.
DB에서는 row 에 해당합니다.&lt;/p&gt;
&lt;p&gt;예를 들어,
&lt;code&gt;asdasd&lt;/code&gt; 라는 이름을 가진 사람을 찾고싶어서&lt;/p&gt;
&lt;p&gt;&lt;code&gt;User.objects.filter(name=&amp;quot;asdasd&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;filter 를 사용해 찾아보았습니다.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/150294830-9ac1b9ca-d0eb-45b4-8285-b3833f517ac0.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;QuerySet 으로 59번과 61번 객체를 가져왔습니다.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://user-images.githubusercontent.com/2377807/150294657-dc314fba-a745-4d37-a118-19feccfa078c.png&#34;
        alt/&gt;&lt;/p&gt;
&lt;p&gt;제 테이블에는 59, 61번에 asdasd 라는 동명이인이 있기에 두개의 객체가 반환이 됐던겁니다.&lt;/p&gt;
&lt;p&gt;이런식으로 shell 을 직접 두드려보면서 확인하시면 훨씬 쉽게 접근할수있습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python 데코레이터(Decorator)와 클로저(Clousure) 활용</title>
      <link>https://cidk.xyz/post/python-decorator/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cidk.xyz/post/python-decorator/</guid>
      <description>&lt;h2 id=&#34;데코레이터decorator란&#34;&gt;데코레이터(decorator)란?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;함수 앞뒤에 기능을 추가해서 손쉽게 함수를 활용할 수 있는 기법&lt;/li&gt;
&lt;li&gt;클로저 (clousure)를 활용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;함수 위에 @ 붙어있는 모습이 데코레이터입니다.
특이하죠? 그래도 알아두어야 나중에 이러한 코드를 볼때 이해할수있습니다.&lt;/p&gt;
&lt;h3 id=&#34;데코레이터-활용&#34;&gt;데코레이터 활용&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@decorator_func&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;@붙은게 데코레이터&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ex) 일반적인 함수&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;희택님이 로그인하셨습니다.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;희택님이 로그인하셨습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;이게 일반적인 함수입니다.&lt;/p&gt;
&lt;p&gt;ex) 데코레이터를 붙인 함수&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 데코레이터 함수&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decorator_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;나는 데코레이터&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wrapper&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 일반함수에 데코레이터를 붙힌 함수&lt;/span&gt;
&lt;span class=&#34;nd&#34;&gt;@decorator_func&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;희택님이 로그인하셨습니다.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;나는 데코레이터
희택님이 로그인하셨습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;클로저를-이용한-데코레이터&#34;&gt;클로저를 이용한 데코레이터&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 데코레이터 함수 정의&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decorator_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;wrapper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;나는 데코레이터&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wrapper&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 데코레이터를 줄 함수&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;희택님이 로그인하셨습니다.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;희택님이 로그인하셨습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;클로저 활용&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;n&#34;&gt;deco_func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decorator_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;deco_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;나는 데코레이터
희택님이 로그인하셨습니다.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;간단하죠?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CDN 이란 무엇인가요?</title>
      <link>https://cidk.xyz/post/cdn/</link>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://cidk.xyz/post/cdn/</guid>
      <description>&lt;h2 id=&#34;cdn이란-무엇인가요&#34;&gt;CDN이란 무엇인가요?&lt;/h2&gt;
&lt;p&gt;&lt;img  src=&#34;https://www.akamai.com/content/dam/site/ko/images/article/what-is-a-cdn.png&#34;
        alt=&#34;what-is-a-cdn.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;CDN(콘텐츠 전송 네트워크)은 지리적으로 분산된 여러 개의 서버입니다. 웹 콘텐츠를 사용자와 가까운 곳에서 전송함으로써 전송 속도를 높입니다. 전 세계 데이터센터는 파일 복사본을 임시로 저장하는 프로세스인 캐싱을 사용합니다. 따라서 사용자는 가까운 서버를 통해 웹 활성화 디바이스 또는 브라우저에서 인터넷 콘텐츠에 빠르게 접속할 수 있습니다. CDN은 웹 페이지, 이미지, 비디오 등의 콘텐츠를 사용자의 물리적 위치와 가까운 프록시 서버에 캐싱합니다. 이렇게 하면 콘텐츠가 로딩될 때까지 기다릴 필요 없이 영화 감상, 소프트웨어 다운로드, 은행 잔고 확인, 소셜 미디어 포스팅, 구매 등의 작업을 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;CDN을 마치 ATM처럼 생각해도 좋습니다. 여러 곳에 ATM을 설치해 놓으면 사용자가 빠르고 효율적으로 현금을 찾을 수 있습니다. 은행에서 긴 줄을 서서 기다릴 필요 없이 가까운 곳에 있는 ATM을 바로 사용하면 됩니다.&lt;/p&gt;
&lt;p&gt;인터넷으로 그래픽과 비디오 등 용량이 큰 웹 콘텐츠를 전송하면 트래픽이 폭주할 때처럼 네트워크 혼잡 문제가 발생할 수 있습니다. CDN 서비스는 이러한 문제를 해결하기 위해 개발되었습니다. 중앙 서버에서 개별 사용자에게 콘텐츠를 전송하려면 시간이 너무 오래 걸렸습니다. 이제 CDN은 텍스트, 그래픽, 스크립트, 미디어 파일부터 소프트웨어 다운로드, 문서, 포털, 이커머스, 라이브 스트리밍 미디어, 온디맨드 비디오 스트리밍 미디어, 소셜 미디어 사이트에 이르기까지 모든 것을 처리합니다.&lt;/p&gt;
&lt;p&gt;또한 CDN은 보안을 강화해 DDoS(Distributed Denial-of-Service) 공격과 같은 보안 문제와 악의적 공격자를 차단하는 기능을 웹사이트에 제공할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;cdn-사례는-어떤-것이-있을까요&#34;&gt;CDN 사례는 어떤 것이 있을까요?&lt;/h2&gt;
&lt;p&gt;인터넷 콘텐츠의 상당 부분이 CDN을 통해 전송됩니다. 간단한 사례를 통해 설명드리겠습니다.&lt;/p&gt;
&lt;p&gt;뉴욕에 있는 사용자가 런던에 있는 업체의 웹사이트를 보고 싶어 합니다. 이 웹사이트는 영국의 서버에 호스팅되어 있습니다. 해당 사용자가 뉴욕에서 영국까지 대서양을 가로질러 요청을 보낸다면 웹사이트의 콘텐츠 로딩 시간은 길어질 것입니다. CDN은 이런 문제를 해결하기 위해 런던 웹사이트 콘텐츠를 캐싱해 전 세계 여러 곳의 &amp;lsquo;PoP(Points of Presence)&amp;lsquo;에 저장합니다. 이러한 PoP는 자체 캐싱 서버를 갖고 있으며 뉴욕에 있는 사용자에게 해당 콘텐츠를 전송합니다.&lt;/p&gt;
&lt;p&gt;사용자의 물리적 위치와 가장 가까운 서버에서 전송되는 콘텐츠는 더 빠른 고성능 웹 경험을 제공합니다.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://www.akamai.com/content/dam/site/ko/images/article/how-does-a-cdn-work.png&#34;
        alt=&#34;how-does-a-cdn-work.png&#34;/&gt;&lt;/p&gt;
&lt;h2 id=&#34;cdn은-어떻게-작동할까요&#34;&gt;CDN은 어떻게 작동할까요?&lt;/h2&gt;
&lt;p&gt;CDN의 미션은 &lt;em&gt;지연 시간을&lt;/em&gt;줄이는 것입니다. 지연 시간은 웹 페이지 또는 비디오 스트리밍 콘텐츠가 디바이스에 완전히 로딩되기 전에 발생하는 불편한 지연을 의미합니다. 지연 시간은 밀리초 단위로 측정됩니다. 하지만 사용자가 체감하는 시간은 매우 길며, 시간 초과 또는 로딩 오류가 발생할 수 있습니다. 콘텐츠가 사용자에게 도달하기 위해 이동해야 하는 물리적 거리를 줄여 지연 시간을 줄이는 콘텐츠 전송 네트워크도 있습니다. 따라서 CDN이 보다 광범위하고 넓게 분산되어 있으면 사용자와 최대한 가까운 곳에 콘텐츠를 배치함으로써 웹 콘텐츠를 보다 빠르고 안정적으로 전송할 수 있습니다.&lt;/p&gt;
&lt;p&gt;주말에 최근 개봉한 할리우드 영화를 보고 싶다면 CDN을 통해 해당 비디오를 제공할 최적의 서버를 네트워크에서 찾을 수 있습니다. 이 서버는 일반적으로 사용자의 물리적 위치와 가장 가까운 서버가 됩니다. 미디어 파일은 캐싱되며 동일한 지역의 다른 사용자가 해당 미디어 파일을 요청할 경우에 대비해 콘텐츠 전송 네트워크 서버에 남게 됩니다. 요청한 콘텐츠가 오래되었거나 사용할 수 없는 경우, CDN 서비스는 새로 가져온 콘텐츠를 저장하고 향후 요청에 있을 때 전송합니다.&lt;/p&gt;
&lt;p&gt;웹사이트 콘텐츠 전송은 CDN에서 흔히 사용되는 기능이지만, 유일한 기능은 아닙니다. CDN은 4K 및 HD 품질의 비디오, 오디오 스트림, 앱-게임-OS 업데이트와 같은 소프트웨어 다운로드 등 광범위한 콘텐츠를 전송합니다. 즉, 디지털화할 수 있는 모든 데이터를 콘텐츠 전송 네트워크를 통해 전송할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;cdn-호스트는-무엇인가요&#34;&gt;CDN 호스트는 무엇인가요?&lt;/h2&gt;
&lt;p&gt;CDN은 웹 호스트가 아니며, 라스트마일 구간에서 콘텐츠를 소비자에게 전송하지 않습니다. 하지만 콘텐츠 전송 네트워크 서버는 콘텐츠를 전 세계 사용자 및 사용자 ISP와 가까운 곳에 캐싱하기 위해 지리적으로 분산되어 있습니다. 네트워크 엣지에 있는 이 임시 콘텐츠 스토리지는 지연 시간을 줄이고 동일한 콘텐츠를 여러 사용자에게 전송함으로써 효율성을 높일 수 있습니다.&lt;/p&gt;
&lt;p&gt;막대한 온라인 비디오 수요를 충족하기 위해 노력하는 네트워크 사업자(무선 서비스 사업자, 모바일 네트워크 사업자)에게 CDN 호스팅 플랫폼은 경쟁력을 유지할 수 있는 매우 효과적이고 비용 효율적인 솔루션이 될 수 있습니다. 콘텐츠 전송 네트워크는 사업자들이 모든 웹 활성화 디바이스에서 빠르고, 안전하고, 안정적인 온라인 경험을 일관된 품질로 제공하고 고객의 기대치에 부합할 수 있도록 지원합니다.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://www.akamai.com/content/dam/site/ko/images/article/why-is-a-cdn-needed.jpg&#34;
        alt=&#34;why-is-a-cdn-needed.jpg&#34;/&gt;&lt;/p&gt;
&lt;h2 id=&#34;cdn이-필요한-이유는-무엇인가요&#34;&gt;CDN이 필요한 이유는 무엇인가요?&lt;/h2&gt;
&lt;p&gt;CDN은 20여 년 동안 리테일, 은행, 헬스케어를 비롯한 여러 산업 분야의 전 세계 사용자들에게 빠르고 확장성 있게 온라인 콘텐츠를 전송하도록 지원해 오면서 인터넷의 보이지 않는 백본 역할을 담당해 왔습니다.&lt;/p&gt;
&lt;p&gt;CDN을 사용하지 않을 경우 오리진 서버가 정보를 복제 및 저장한 다음 사용자가 웹에 접속하는 곳까지 디지털 콘텐츠를 가져가야 하기 때문에 인터넷 속도가 느려질 수 있습니다.&lt;/p&gt;
&lt;p&gt;사용자는 체감하지 못할 수도 있지만, CDN은 온라인의 거의 모든 곳에서 빠르고 안정적이며 일관된 경험을 제공합니다. CDN이 보이지 않는 곳에서 트래픽을 관리하는 방법을 보여주는 간단한 예는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;CDN은 전체 트래픽의 균형을 맞춰 인터넷 콘텐츠에 접속하는 모든 사용자에게 최고의 웹 경험을 제공합니다. 오프라인 환경에서 트래픽을 라우팅하는 것을 생각해 보세요. 다른 차량이 없다고 가정하면 일반적으로 지점 A에서 지점 B로 이동하는 가장 빠른 경로는 하나입니다. 하지만 이 경로가 정체되기 시작하면 다른 경로로 교통이 분산되는 것이 모두에게 좋습니다. 이렇게 되면 몇 분(인터넷 속도로 조정될 경우 밀리초) 더 걸리는 경로를 이용해야 할 수 있지만, 일반적으로 최단 경로에서 발생하는 교통 체증을 겪지 않아도 됩니다. 또는 나는 최단 경로를 이용하지만 다른 차들이 더 긴 경로로 우회하고 있기 때문에 교통 체증이 심하지 않을 수 있습니다. 따라서 속도를 늦추는 것이 아니라 사용 가능한 모든 리소스를 완전히 사용하고 부하를 분산하는 것입니다.&lt;/p&gt;
&lt;p&gt;CDN을 사용하지 않으면 웹 서핑 시 트래픽이 폭증하는 일이 더 자주 발생합니다. &lt;/p&gt;
&lt;h2 id=&#34;누가-cdn을-사용하나요&#34;&gt;누가 CDN을 사용하나요?&lt;/h2&gt;
&lt;p&gt;웹에 접속하는 거의 모든 사람은 CDN을 사용합니다. CDN은 인터넷에 접속하는 사람들에게 더 빠르고 안정적인 경험을 제공하기 위해 만들어졌습니다. 콘텐츠 및 애플리케이션 소유자, 네트워크 서비스 사업자는 CDN을 사용해 고객에게 이러한 장점을 제공합니다.&lt;/p&gt;
&lt;h3 id=&#34;사용자를-위한-cdn&#34;&gt;사용자를 위한 CDN&lt;/h3&gt;
&lt;p&gt;CDN을 통해 전송되는 웹사이트와 웹 애플리케이션은 빠른 페이지 로딩과 트랜잭션, 일관된 온라인 경험을 제공합니다. 하지만 사용자는 자신이 CDN을 통해 접속하고 있다는 것을 전혀 모를 수 있습니다. CDN 기술은 백그라운드에서 작동하기 때문입니다. 사용자는 ISP 또는 모바일 서비스 사업자로부터 요청한 것을 받을 뿐입니다.&lt;/p&gt;
&lt;h3 id=&#34;콘텐츠-기업을-위한-cdn&#34;&gt;콘텐츠 기업을 위한 CDN&lt;/h3&gt;
&lt;p&gt;이커머스 사이트, 미디어 프로퍼티, 클라우드 컴퓨팅 사업자 같은 콘텐츠-애플리케이션 소유자는 CDN을 사용해 최종 사용자의 경험을 개선하고 이탈률 감소, 광고 노출 수 증가, 전환율 증가, 고객 충성도 강화와 같은 장점을 누릴 수 있습니다. 또한 CDN을 사용하면 DDoS(Distributed Denial of Service) 공격을 흡수하고 방어하는 등 웹 보안을 강화할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;네트워크-서비스-사업자를-위한-cdn&#34;&gt;네트워크 서비스 사업자를 위한 CDN&lt;/h3&gt;
&lt;p&gt;온라인 스트리밍을 &lt;a href=&#34;https://www.akamai.com/us/en/resources/online-streaming.jsp&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;비롯한&lt;/a&gt;
 고품질 미디어 서비스가 &lt;a href=&#34;https://www.akamai.com/us/en/products/performance/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;폭발적으로 증가하고 있습니다.&lt;/a&gt;
사용자들은 다양한 종류의 디바이스를 사용하고 있으며 웹 성능에 대한 기대치가 높기 때문에, 오늘날 네트워크 서비스 사업자들은 자체 CDN 구축의 필요성을 절감하고 있습니다. 네트워크 서비스 사업자의 경우 CDN을 구축하면 가입자 이탈이 감소하고, 부가가치 서비스 개발을 촉진하고, 핵심 네트워크의 트래픽을 줄이고, 기업 및 기타 콘텐츠 기업에 CDN 서비스를 판매하는 등 다양한 혜택을 누릴 수 있습니다.&lt;/p&gt;
&lt;p&gt;CDN이 제공하는 가장 큰 장점 중 하나는 &lt;em&gt;부하 분산입니다&lt;/em&gt;. CDN은 원본 콘텐츠가 저장된 서버 대신 사용자와 물리적으로 가까운 네트워크 위치에서 캐싱된 버전으로 웹 콘텐츠 요청에 응답함으로써 콘텐츠 서버의 트래픽을 분산하고 웹 경험을 향상합니다. 즉, 콘텐츠가 네트워크 운영자의 네트워크 안에 존재하고, 다른 네트워크와의 피어링 또는 더 광범위한 인터넷을 통해 정보를 전달할 필요가 없습니다.&lt;/p&gt;
&lt;h2 id=&#34;cdn을-이용하면-어떤-이점이-있을까요&#34;&gt;CDN을 이용하면 어떤 이점이 있을까요?&lt;/h2&gt;
&lt;p&gt;CDN은 전 세계 인터넷 트래픽의 상당 부분을 처리하며 인터넷으로 콘텐츠를 전송할 때 발생하는 가장 어려운 문제들을 해결하도록 지원합니다. 중소 규모의 콘텐츠 기업부터 세계적인 대기업까지 다양한 기업이 CDN을 사용해 고객에게 원활한 웹 경험을 제공합니다.&lt;/p&gt;
&lt;p&gt;기본적으로 인터넷은 대량의 데이터, 라이브 HD 비디오, 반짝 세일, 대규모 다운로드의 수요를 처리할 수 있도록 설계되지 않았는데 CDN은 이런 인터넷 성능을 개선하도록 설계되었습니다. CDN은 대용량 미디어를 안전하게 전송하고 오늘날 대부분의 사람들이 일상 생활에서 겪는 모든 연결 경험을 가능하게 합니다. &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;cdn은-성능-가용성-보안-인텔리전스-솔루션을-제공함으로써-세계-최고의-기업과-조직이-온라인에서-성공적으로-비즈니스를-이끌어-가도록-지원합니다&#34;&gt;CDN은 성능, 가용성, 보안, 인텔리전스 솔루션을 제공함으로써 세계 최고의 기업과 조직이 온라인에서 성공적으로 비즈니스를 이끌어 가도록 지원합니다.&lt;/h2&gt;
&lt;hr&gt;
&lt;h4 id=&#34;성능&#34;&gt;성능&lt;/h4&gt;
&lt;p&gt;사용자가 새로운 콘텐츠를 클릭했을 때 즉시 접속할 수 있는 경우와 페이지 로딩 또는 비디오 버퍼링이 완료될 때까지 7초 동안 기다려야 하는 경우의 차이가 바로 성능의 차이입니다. &lt;em&gt;버퍼링은&lt;/em&gt; 화면에서 돌아가는 둥근 아이콘으로 대표되는 대기 시간입니다. ISP가 제공하는 인터넷 연결이 충분히 빠르지 않을 때 발생합니다.&lt;/p&gt;
&lt;p&gt;작동 방식은 어떨까요? 요청된 콘텐츠가 CDN 서버에 캐싱(사전 저장)되어 있는 경우, 사용자의 ISP 또는 모바일 서비스 사업자는 요청이 오리진에 직접 도달할 때까지 기다리는 대신 CDN 네트워크에 있는 서버에 접속해 해당 콘텐츠를 받게 됩니다. 사용자가 접속하려는 콘텐츠가 저장된 오리진 서버가 사용자와 물리적으로 먼 거리에 있을 수 있습니다. 이런 경우 CDN은 해당 콘텐츠를 사용자와 더 가까운 곳에서 제공함으로써 속도와 성능을 개선합니다. 예를 들어, 이탈리아 밀라노의 Fashion House X(FHX)가 온라인 주문을 위한 새로운 라인업을 출시했다고 가정해 보겠습니다. 뉴욕, 파리, 리우데자네이루, 도쿄의 패션 리더들은 앞다투어 온라인으로 접속하여 주문하려 할 것입니다. 만약 FHX가 클라우드 콘텐츠 관리 시스템을 사용하지 않고 있다면, 각 엔드유저의 요청은 밀라노까지 갔다가 엔드유저에게 되돌아가야 합니다. 하지만 FHX가 CDN을 사용 중이고 CDN 전반에 걸쳐 콘텐츠를 사전에 준비해 놓았다면 모든 사용자는 해당 도시에서 신규 콘텐츠에 직접 접속할 수 있게 되고, 수백 또는 수천 마일을 왕복하는 시간을 절약할 수 있습니다.&lt;/p&gt;
&lt;p&gt;콘텐츠가 사전 저장되어 있지 않은 경우, CDN은 필요한 접속에 대한 프로그래밍된 지식을 사용해 문제를 해결합니다. 고급 CDN은 동적 콘텐츠 또는 캐싱 불가능한 콘텐츠 전송 문제를 해결하고 디바이스에 맞는 적절한 콘텐츠를 결정하기 위해 추가적인 기술을 사용합니다. &lt;/p&gt;
&lt;p&gt;따라서 콘텐츠 제공업체는 CDN을 사용해 위치, 브라우저, 디바이스, 네트워크에 관계없이 모든 사용자에게 고품질의 웹 경험을 빠른 속도로 제공할 수 있게 됩니다. 웹 페이지는 더 빠르게 렌더링되고, 비디오 버퍼링 시간은 줄어들고, 사용자는 몰입도를 유지할 수 있습니다.&lt;/p&gt;
&lt;h4 id=&#34;가용성&#34;&gt;가용성&lt;/h4&gt;
&lt;p&gt;가용성은 많은 사람들이 동시에 콘텐츠에 접속하거나 인터넷에서 서버 장애가 발생해 과도한 사용자 트래픽이 발생하는 동안에도 사용자가 콘텐츠에 계속 접속할 수 있는 것을 의미합니다. &lt;/p&gt;
&lt;p&gt;트래픽 부하가 초당 수백만 건의 요청으로 급증하면 아무리 강력한 서버라도 막대한 부담이 가게 됩니다. CDN이 없다면 콘텐츠 제공업체의 인프라가 이 트래픽을 흡수해야 합니다. 이로 인해 장애가 발생하고 사용자 경험이 저하될 수 있습니다. CDN이 제공하는 광범위하게 분산된 서버 인프라는 이러한 문제를 해결하기 위해 설계되었습니다. 광범위하게 분산된 아키텍처와 막대한 규모의 서버 플랫폼을 갖춘 고급 CDN은 수십 Tbps의 트래픽을 처리할 수 있습니다. 덕분에 콘텐츠 제공업체는 대규모 사용자 기반에 걸쳐 가용성을 제공할 수 있습니다.&lt;/p&gt;
&lt;p&gt;밀라노의 FHX 사례를 다시 들어 보겠습니다. FHX는 수많은 패션 애호가들이 사랑하는 브랜드이며 패션 애호가들은 FHX의 신규 라인업에 큰 관심을 보입니다. 전 세계 패션 애호가들은 출시 시점에 FHX 웹사이트에 동시 접속합니다. FHX가 CDN을 사용하고 있지 않다면, 이러한 사용자들이 동시에 오리진 서버에 요청을 전송하고 오리진 서버에서 트래픽 급증으로 인한 장애가 발생할 가능성이 매우 높습니다. 그러나 FHX가 CDN을 사용한다면 이 모든 트래픽이 수십만 대의 서버로 구성된 CDN 전역으로 분산되어 FHX의 오리진이 장애 없이 작동하고 전 세계 패션 애호가들에게 고품질 경험을 제공할 수 있게 됩니다. &lt;/p&gt;
&lt;h4 id=&#34;보안&#34;&gt;보안&lt;/h4&gt;
&lt;p&gt;인터넷에서 중요한 데이터와 트랜잭션의 양이 계속 증가함에 따라 공격자의 위협도 늘어나고 있습니다. 기업은 공격으로 인해 상당한 비용을 지불해야 할 수 있습니다. 악의적인 내부자에 의한 범죄와 함께 DDoS 및 웹 기반 공격이 가장 많은 비용을 발생시키는 것으로 밝혀졌습니다. &lt;/p&gt;
&lt;p&gt;DoS 공격과 웹 기반 공격(&lt;a href=&#34;https://blogs.akamai.com/2020/09/web-application-and-api-protection-from-sql-injection-to-magecart.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;SQL 인젝션,&lt;/a&gt;
크로스 사이트 스크립팅, 로컬 파일 또는 원격 파일 인클루전)이 점점 빈번하게 발생하고 있습니다. DDoS 공격에 관심이 쏠리도록 만든 다음에 더욱 심각한 손실을 유발하는 다른 악성 공격을 일으키는 사례도 증가하고 있습니다. 두 가지 유형의 공격 모두 정상 트래픽과 악성 트래픽을 구별하기가 쉽지 않은 경우가 대부분이며, 시간이 지나면서 공격 전략이 급속도로 진화하기 때문에 방어 전략을 최신 상태로 유지하기 위해서는 상당히 많은 보안 전담 리소스가 필요합니다. &lt;/p&gt;
&lt;p&gt;인터넷 위협 환경이 급격하게 변화함에 따라 안전한 웹사이트를 지원하는 것이 CDN의 중요한 요구사항이 되었습니다. 오늘날의 고급 CDN은 인터넷 보안을 핵심 역량으로 삼아 독자적인 클라우드 기반 솔루션을 제공하고 있습니다. CDN은 악성 행위자들이 어떠한 경우에도 전송 및 가용성에 영향을 미치지 않도록 하는 동시에 다양한 공격을 막아냄으로써 콘텐츠 제공업체와 사용자들을 보호할 수 있어야 합니다.&lt;/p&gt;
&lt;h4 id=&#34;인텔리전스&#34;&gt;인텔리전스&lt;/h4&gt;
&lt;p&gt;CDN 제공업체들은 전 세계 인터넷 트래픽의 거의 절반을 처리하면서 전 세계의 사용자 접속, 디바이스 종류, 브라우징 경험과 대한 막대한 데이터를 생성합니다. CDN 제공업체들은 고객 지원에 이런 데이터를 사용함으로써 고객의 사용자 기반에 대한 유용하고 중요한 인사이트와 인텔리전스를 제공합니다. 이러한 서비스에는 웹 콘텐츠에 대한 사용자의 몰입도를 측정하는 데 필요한 RUM(Real-User Monitoring) 및 Media Analytics와 온라인 위협을 추적하기 위한 클라우드 보안 인텔리전스가 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;클라우드-vs-cdn&#34;&gt;클라우드 vs CDN&lt;/h2&gt;
&lt;p&gt;최신 디지털 경험은 기업이 콘텐츠를 배치하는 방식으로 확장되었습니다. CDN과 클라우드 컴퓨팅은 웹 콘텐츠 및 애플리케이션 요구사항이 초래하는 성능 및 확장성 문제를 해결하기 위해 개발되었습니다. 이 둘은 어떻게 다를까요?&lt;/p&gt;
&lt;h3 id=&#34;클라우드&#34;&gt;클라우드&lt;/h3&gt;
&lt;p&gt;클라우드 컴퓨팅 환경은 컴퓨터의 하드 드라이브 대신 인터넷 서버에 정보를 저장합니다. 웹 기반 이메일, 파일 저장, 파일 공유, 데이터 백업 등의 작업에 사용할 수 있는 편리하고 믿을 수 있는 방법입니다. 또한 클라우드는 사용자가 소셜 미디어 플랫폼과 같은 웹 애플리케이션에 쉽게 접속할 수 있도록 지원합니다. 클라우드 환경은 수백 개의 PoP로 구성되며, 각 PoP는 지역별로 중앙 집중화되어 있습니다.&lt;/p&gt;
&lt;p&gt;기업은 클라우드를 활용해 필요에 따라 애플리케이션 인프라를 확장하고, 많은 비용을 들여 새로운 인프라에 투자하지 않고 신규 지역으로 확장하며, 최신 디지털 경험 또는 엔터프라이즈 애플리케이션을 개발할 수 있습니다. &lt;/p&gt;
&lt;p&gt;클라우드는 여러 장점을 제공하지만 클라우드에서 애플리케이션을 구축하거나 애플리케이션을 클라우드로 전환할 때는 주로 예상치 못한 비용이 발생합니다. 또한 클라우드 전환 프로젝트는 근본적으로 디지털 경험의 성능과 가용성을 유지하기 어렵게 만듭니다. &lt;/p&gt;
&lt;h3 id=&#34;cdn&#34;&gt;CDN&lt;/h3&gt;
&lt;p&gt;CDN은 각 사용자가 웹 활성화 디바이스를 통해 인터넷에 접속하는 곳과 가까운 곳에서 콘텐츠를 캐싱해 전 세계 &amp;lsquo;오리진&amp;rsquo; 서버에서 콘텐츠를 배포하는 서버 네트워크입니다. 사용자가 요청한 콘텐츠는 먼저 오리진 서버에 저장된 다음 필요에 따라 다른 곳에 복제되고 저장됩니다. 사용자가 있는 곳과 물리적으로 가까운 곳에 콘텐츠를 캐싱하고 이동 거리를 줄임으로써 지연 시간이 줄어듭니다. 또한 이 프로세스는 여러 서버에 걸쳐 지역적으로 부하를 분산시켜 오리진 서버에 대한 스트레스를 줄여줍니다.&lt;/p&gt;
&lt;p&gt;어떤 사람들은 CDN을 &amp;lsquo;엣지&amp;rsquo;라고 부릅니다. 엣지는 물리적 환경과 디지털 세계가 네트워크 경계에서 만나 상호 작용하는 곳입니다. 전 세계에 광범위하게 분산된 수천 개의 PoP와 탁월한 용량 및 확장성을 갖춘 CDN은 사용자와 가까운 곳에서 서비스를 제공합니다. &lt;/p&gt;
&lt;p&gt;즉, 전 세계 어느 곳에서나 휴대폰, 태블릿, 컴퓨터 또는 기타 인터넷 지원 디바이스를 사용해 콘텐츠를 더 빠르게 로딩할 수 있습니다. 집에서 비디오를 보거나 다른 대륙에서 항공편에 체크인할 때도 CDN 덕분에 동일한 디지털 경험을 즐길 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;akamai의-최신-엣지-전송-cdn-솔루션&#34;&gt;Akamai의 최신 엣지 전송 CDN 솔루션&lt;/h2&gt;
&lt;p&gt;Akamai 의 CDN 서비스는 인터넷의 창시자인 팀 버너스 리(Tim Berners-Lee)가 제시한 &amp;lsquo;World Wide Wait&amp;rsquo;이라는 문제를 해결하기 위해 개발되었습니다. Akamai는 20년 전에 웹 트래픽을 라우팅하고 중앙에 위치한 서버에서 초기 인터넷 사용자에게 콘텐츠를 빠르게 전송하는 새로운 기술을 개발함으로써 엣지 컴퓨팅을 개척했습니다. 오늘날 글로벌 기업들은 Akamai의 솔루션과 전문 기술을 활용해 디지털 경험을 보호하고 전송합니다.&lt;/p&gt;
&lt;p&gt;Akamai의 종합적인 콘텐츠 전송 솔루션은 웹사이트, 앱, API, 비디오, 소프트웨어 등 콘텐츠의 종류나 위치, 디바이스, 네트워크에 상관없이 모든 사용자에게 놀라운 디지털 경험을 제공하도록 설계되었습니다. &lt;/p&gt;
&lt;p&gt;Akamai는 300Tbps 이상의 글로벌 네트워크 용량을 보유하고 있으며, 4200여 곳의 위치, 135개 국가, 1400여 개의 네트워크를 기반으로 뛰어난 확장성을 제공합니다. 세계 최대 규모의 엣지 전송 플랫폼으로 인터넷 현황을 더 폭넓게 파악할 수 있으며, 병목 현상을 차단하고 엣지에서 공격을 방어할 수 있습니다. &lt;/p&gt;
&lt;h3 id=&#34;뛰어난-웹사이트-및-모바일-앱-경험을-제공하는-자동-가속&#34;&gt;뛰어난 웹사이트 및 모바일 앱 경험을 제공하는 자동 가속&lt;/h3&gt;
&lt;p&gt;오늘날의 사용자들은 언제든지 시각적으로 우수한 맞춤형 경험을 모든 디바이스에서 제공받고 싶어 합니다. 고객의 기대치에 부합하기 위해 고화질 이미지, 비디오, 개인맞춤형 콘텐츠, 써드파티 콘텐츠 등이 포함된 복잡한 애플리케이션을 출시하는 온라인 기업들이 점차 증가하고 있습니다. 이에 따라 최적화, 운영, 유지 관리 비용이 크게 증가할 수 있습니다. Akamai Ion은 스마트한 성능 자동화 및 제어를 통해 웹 및 모바일 앱 경험을 지속적으로 분석, 최적화, 가속합니다.&lt;/p&gt;
&lt;h3 id=&#34;모든-환경에서-고품질-비디오-재생-경험&#34;&gt;모든 환경에서 고품질 비디오 재생 경험&lt;/h3&gt;
&lt;p&gt;온라인 시청자는 온라인 비디오 전송 시 직면하는 문제에 대해서는 알지 못하거나 관심이 없을 수도 있습니다. 서비스 제공업체가 해결해야 하는 온라인 콘텐츠 전송 과제는 상당히 많음에도 불구하고 온라인 시청자는 항상 환상적인 비디오 재생을 기대합니다. Adaptive Media Delivery는 증가하는 온라인 시청자에게 모든 스크린에서 일관된 고품질 비디오 재생 경험을 제공하도록 최적화되어 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;쾌적한-다운로드-전송&#34;&gt;쾌적한 다운로드 전송&lt;/h3&gt;
&lt;p&gt;사용자는 빠른 다운로드와 실시간에 가까운 업데이트가 결합된 원활한 다운로드 경험을 기대합니다. 효과적이고 안정적인 콘텐츠 배포와 다운로드 전략은 다운로드 완료율, 고객 만족, 매출을 극대화하는 핵심 요소입니다. 사용자 디바이스에 상관없이 소프트웨어, 애플리케이션, 게임, 보안 패치 등을 다운로드할 때 반드시 필요한 전략입니다. Download Delivery는 인터넷으로 대용량 파일 기반 콘텐츠를 전송하는 데 최적화된 안정적인 고성능 콘텐츠 전송 솔루션입니다. &lt;/p&gt;
&lt;h3 id=&#34;api-가속&#34;&gt;API 가속&lt;/h3&gt;
&lt;p&gt;접속 속도가 밀리초 단위로 측정되고 빠르게 변화하는 오늘날의 디지털 환경에서 API는 중요한 역할을 합니다. API 요청 수가 지속적으로 증가하고 갑작스러운 수요 급증이 자주 발생함에 따라 사용자의 기대치에 부합하는 일이 점차 어려운 도전과제로 부각되고 있습니다. 퍼블릭 API를 빠르게 제공하지 않으면 열악한 사용자 경험, 매출 손실, 다운타임 등의 문제로 이어질 수 있습니다. 따라서 안정성∙확장성∙성능에 대해 우려할 필요가 없는 파트너사와 반드시 협력해야 합니다.&lt;/p&gt;
&lt;p&gt;API Acceleration은 API 전송 및 기타 페이로드가 작은 트래픽에 최적화되어 앱 및 사이트 간 빠르고 몰입도 높은 사용자 경험을 제공합니다. 오리진 인프라의 요청을 부하 분산하고 애플리케이션의 성공에 중요한 대규모 XML, JSON과 기타 소규모 트랜잭션 및 프로그래밍 방식의 트래픽에 예측 가능한 고성능을 제공합니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>