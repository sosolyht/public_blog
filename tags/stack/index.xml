<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Stack on 희택의 노력</title>
        <link>https://heetaek.com/tags/stack/</link>
        <description>Recent content in Stack on 희택의 노력</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-kr</language>
        <lastBuildDate>Fri, 13 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://heetaek.com/tags/stack/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>[자료구조] 스택(Stack) 과 큐(Queue)</title>
        <link>https://heetaek.com/p/stack-queue/</link>
        <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/stack-queue/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181748733-7a45d5ed-1ed3-454f-808f-19f470c19353.png" alt="Featured image of post [자료구조] 스택(Stack) 과 큐(Queue)" /&gt;&lt;h1 id=&#34;스택-stack&#34;&gt;스택 (Stack)&lt;/h1&gt;
&lt;p&gt;스택(Stack)은 &amp;lsquo;쌓다&amp;rsquo; 라는 의미로, 데이터를 쌓아 올린 형태의 자료구조이다.&lt;/p&gt;
&lt;p&gt;접근 방법은 LIFO(Last In First Out) 라고 부르며, 마지막에 넣은 요소가 먼저 나온다는 의미다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/168406214-2bc7bf49-33b0-41fe-b294-7671812fac71.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;아래가 막혀있고 위가 뚫린 형태로 차곡차곡 쌓인다.&lt;/p&gt;
&lt;p&gt;이러한 구조이기때문에 마지막에 삽입한 요소는 처음으로 삭제할 수 있다.&lt;/p&gt;
&lt;p&gt;스택에서 삽입은 &lt;code&gt;PUSH&lt;/code&gt;, 삭제는 &lt;code&gt;POP&lt;/code&gt; 이라는 용어로 사용하고 있다.&lt;/p&gt;
&lt;h3 id=&#34;실사용-예제&#34;&gt;실사용 예제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브라우저에서 뒤로 가기&lt;/li&gt;
&lt;li&gt;문서작업에서 Ctrl + Z&lt;/li&gt;
&lt;li&gt;실행취소 (undo)&lt;/li&gt;
&lt;li&gt;후위 표기법 (컴퓨터가 어떤식으로 사칙 연산을 하는지 이해하는 용도)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;큐queue&#34;&gt;큐(Queue)&lt;/h1&gt;
&lt;p&gt;큐는 단순히 스택의 반대 개념이다.&lt;/p&gt;
&lt;p&gt;접근 방법은 FIFO (First In First Out)라고 부르며, 먼저 들어간 데이터가 먼저 나오는 구조다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/168406982-c526f22d-e271-4e42-a5e2-1df59e1a27b6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;은행업무를 보기 위해 줄을 선 모습을 상상해 볼 수 있다.&lt;/p&gt;
&lt;p&gt;번호표를 먼저 뽑은 사람이 먼저 업무를 처리하고 나가고, 말 그대로 &amp;lsquo;FIFO&amp;rsquo; 다.&lt;/p&gt;
&lt;p&gt;또 다른 예시로 CPU 는 하나의 task 가 처리가 완료되어야 다음 task 로 넘어가 처리하는것처럼 실행 순서대로 처리한다.&lt;/p&gt;
&lt;h3 id=&#34;실사용-예제-1&#34;&gt;실사용 예제&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;은행 업무&lt;/li&gt;
&lt;li&gt;프린터에서 여러 문서를 순서대로 인쇄&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.fun-coding.org/Chapter06-stack-live.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.fun-coding.org/Chapter06-stack-live.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.fun-coding.org/Chapter05-queue-live.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.fun-coding.org/Chapter05-queue-live.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hanamon.kr/%ec%9e%90%eb%a3%8c%ea%b5%ac%ec%a1%b0-queue-%ed%81%90-feat-buffering/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hanamon.kr/%ec%9e%90%eb%a3%8c%ea%b5%ac%ec%a1%b0-queue-%ed%81%90-feat-buffering/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
