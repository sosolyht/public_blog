<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>프로세스 on 희택의 노력</title>
        <link>https://heetaek.com/tags/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4/</link>
        <description>Recent content in 프로세스 on 희택의 노력</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-kr</language>
        <lastBuildDate>Sat, 25 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://heetaek.com/tags/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>[운영체제] 동시성(Concurrency) 과 병렬성(Parallelism) 의 차이</title>
        <link>https://heetaek.com/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EB%8F%99%EC%8B%9C%EC%84%B1concurrency-%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1parallelism-%EC%9D%98-%EC%B0%A8%EC%9D%B4/</link>
        <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EB%8F%99%EC%8B%9C%EC%84%B1concurrency-%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1parallelism-%EC%9D%98-%EC%B0%A8%EC%9D%B4/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749273-405db335-e97d-4252-9fd4-1e875d355edf.png" alt="Featured image of post [운영체제] 동시성(Concurrency) 과 병렬성(Parallelism) 의 차이" /&gt;&lt;h1 id=&#34;동시성concurrency&#34;&gt;동시성(Concurrency)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/175758325-a5dd0542-6a35-449b-b578-ec5a8adcd55c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;동시성은 동시에 실행되는 것처럼 보이는 것이다.&lt;/p&gt;
&lt;p&gt;&amp;lsquo;동시&amp;rsquo; 라고 이야기 하지만 컴퓨터(코어)는 한번에 하나의 명령어만 처리 할 수 있다.&lt;/p&gt;
&lt;p&gt;위의 사진과 같이 Thread A 와 Thread B 가 Context Switching 을 통해 여러 개의 스레드를 번갈아 가면서 실행되는 방식이다.&lt;/p&gt;
&lt;h1 id=&#34;병렬성parallelism&#34;&gt;병렬성(Parallelism)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/175758351-7a99efe4-ea42-4375-bd04-9588c5f210e1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;병렬성은 2개 이상의 코어에서 알고리즘이 동시에 정확히 실행 되는 것이다.&lt;/p&gt;
&lt;p&gt;동시성과는 다르게 여러 작업이 여러 스레드에서 각각 처리된다.&lt;/p&gt;
&lt;p&gt;결론은 한번에 여러일을 처리가 가능한것이다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;사실 위의 글을 정리하면서 와닿지 않는 부분이 있었는데&lt;/p&gt;
&lt;p&gt;그림을 보고 이해가 갔다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/175759973-b3117da2-b3c7-4a8c-818b-e09fb6708911.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;커피 머신 한 대에 2줄로 서서 가져가는 카페와&lt;/p&gt;
&lt;p&gt;커피 머신 두 대에 1줄씩 서서 가져가는 카페&lt;/p&gt;
&lt;p&gt;모두 Concurrent 하다 볼 수 있다.&lt;/p&gt;
&lt;p&gt;병렬성도 동시성에 속하기 때문이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://seamless.tistory.com/42&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://seamless.tistory.com/42&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.charlezz.com/?p=44646&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.charlezz.com/?p=44646&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://devsrkim.tistory.com/entry/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4?category=873361&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://devsrkim.tistory.com/entry/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4?category=873361&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>[운영체제] 프로세스(Process)와 스레드(Thread)</title>
        <link>https://heetaek.com/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9Cthread/</link>
        <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>https://heetaek.com/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9Cthread/</guid>
        <description>&lt;img src="https://user-images.githubusercontent.com/2377807/181749139-eea7573e-57c9-41c4-aadb-c0624df0e139.png" alt="Featured image of post [운영체제] 프로세스(Process)와 스레드(Thread)" /&gt;&lt;h1 id=&#34;프로세스process&#34;&gt;프로세스(Process)&lt;/h1&gt;
&lt;p&gt;우리 컴퓨터에서 실행 할 수 있는것을 &lt;code&gt;프로그램&lt;/code&gt; 이라 한다.&lt;/p&gt;
&lt;p&gt;그리고 &lt;code&gt;프로그램&lt;/code&gt; 이 실행이 되어 돌아가고 있는 상태를 &lt;code&gt;프로세스&lt;/code&gt; 라 한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2377807/175501497-a87b5841-8c84-46fa-84c7-5f0093f240a1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;process&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;글을 쓰고 있는 상태에서도 내 PC에서는 &lt;code&gt;프로세스&lt;/code&gt; 가 저렇게 많이 켜져있다.&lt;/p&gt;
&lt;p&gt;위의 사진 처럼 여러 프로세스들이 함께 돌아갈 수 있는 이유는 나중에 더 깊게 다룰 것이지만,&lt;/p&gt;
&lt;p&gt;동시적, 병렬적 이 둘의 혼합으로 이루어진다.&lt;/p&gt;
&lt;p&gt;간단히 설명하자면,&lt;/p&gt;
&lt;p&gt;동시성(Concurrency)은 &lt;code&gt;프로세서(CPU)&lt;/code&gt; 하나가 진행 중인 작업을 계속 바꿔준다.&lt;/p&gt;
&lt;p&gt;바꿔주는 작업을 &lt;code&gt;Context Switching&lt;/code&gt; 이라 한다.&lt;/p&gt;
&lt;p&gt;이 과정이 사람이 눈치 챌 수 없을만큼 빠르게 진행되다보니 동시에 진행되는것처럼 느끼는것이다.&lt;/p&gt;
&lt;p&gt;병렬성(Parallelism)은 &lt;code&gt;프로세서(CPU)&lt;/code&gt; 하나에 코어가 여러개 달려있어, 각각 동시에 작업들을 수행하는 것을 뜻한다.&lt;/p&gt;
&lt;p&gt;듀얼코어, 쿼드코어, 옥타코어 등 멀티코어 프로세서에서 할 수 있는 방식이다.&lt;/p&gt;
&lt;h1 id=&#34;스레드thread&#34;&gt;스레드(Thread)&lt;/h1&gt;
&lt;p&gt;지금까지 PC는 여러개의 프로세스를 어떻게 함께 돌리는지 방법을 알아보았다.&lt;/p&gt;
&lt;p&gt;그러면 프로그램에서의 예시를 들어보자면 크롬 브라우저도 하나의 프로세스이다.&lt;/p&gt;
&lt;p&gt;넷플릭스로 영화를 보면서 이메일도 확인해야하고 게임도 다운로드 받아야한다.&lt;/p&gt;
&lt;p&gt;이렇게 한 프로세스에서도 여러 작업이 동시에 진행되어야하는데, 그 여러 작업을 &lt;code&gt;스레드&lt;/code&gt; 라 부른다.&lt;/p&gt;
&lt;h1 id=&#34;멀티프로세스-멀티스레드&#34;&gt;멀티프로세스? 멀티스레드?&lt;/h1&gt;
&lt;p&gt;먼저 멀티프로세스와 멀티스레드의 용어의 정의를 살펴보자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;멀티 프로세스 : 하나의 응용 프로그램을 여러 개의 프로세스로 구성하여 각 프로세스가 하나의 작업을 처리하도록 하는 것.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;멀티 스레드 : 하나의 응용 프로그램을 여러 개의 스레드로 구성하고 각 스레드로 하여금 하나의 작업을 처리하도록 하는 것.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;종류&lt;/th&gt;
&lt;th&gt;장점&lt;/th&gt;
&lt;th&gt;단점&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;멀티프로세스&lt;/td&gt;
&lt;td&gt;하나의 프로세스가 죽어도 다른 프로세스에게는 영향을 끼치지 않는다.&lt;/td&gt;
&lt;td&gt;각각 독립된 메모리 영역을 갖고 있어 작업량이 많은 수록 오버헤드가 발생하고 Context Switching으로 인한 성능 저하를 유발한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;멀티스레드&lt;/td&gt;
&lt;td&gt;프로세스의 응답시간이 단축되고 시스템의 처리율이 향상된다. 또한 코드 영역을 공유하기 때문에 자원 소모가 적다.&lt;/td&gt;
&lt;td&gt;프로그램 디버깅이 어렵고 하나의 스레드에 문제가 생기면 전체적인 프로세스에 영향을 끼치게 된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Reference&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=LLiV5Yz1AWg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=LLiV5Yz1AWg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=RrfASw-jfZ4&amp;amp;ab_channel=AIHolic&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=RrfASw-jfZ4&amp;ab_channel=AIHolic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.naver.com/sjc02183/221844611260&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.naver.com/sjc02183/221844611260&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
